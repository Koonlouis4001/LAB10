
LAB10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08007d20  08007d20  00017d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081e8  080081e8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080081e8  080081e8  000181e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081f0  080081f0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f0  080081f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080081f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000098  0800828c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  0800828c  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116f2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  000317b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00033b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00034b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  00035a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011229  00000000  00000000  0004dd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c56b  00000000  00000000  0005ef3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb4a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  000fb4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d04 	.word	0x08007d04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08007d04 	.word	0x08007d04

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000be0:	f000 b96e 	b.w	8000ec0 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468c      	mov	ip, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8083 	bne.w	8000d12 <__udivmoddi4+0x116>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d947      	bls.n	8000ca2 <__udivmoddi4+0xa6>
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	b142      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	f1c2 0020 	rsb	r0, r2, #32
 8000c1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4097      	lsls	r7, r2
 8000c24:	ea40 0c01 	orr.w	ip, r0, r1
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbbc f6f8 	udiv	r6, ip, r8
 8000c34:	fa1f fe87 	uxth.w	lr, r7
 8000c38:	fb08 c116 	mls	r1, r8, r6, ip
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f10e 	mul.w	r1, r6, lr
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 8119 	bcs.w	8000e84 <__udivmoddi4+0x288>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8116 	bls.w	8000e84 <__udivmoddi4+0x288>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	443b      	add	r3, r7
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8105 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8102 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8c:	eba4 040e 	sub.w	r4, r4, lr
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xaa>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d150      	bne.n	8000d50 <__udivmoddi4+0x154>
 8000cae:	1bcb      	subs	r3, r1, r7
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	2601      	movs	r6, #1
 8000cba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0xe2>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	f200 80e9 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x10c>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x10a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80d9 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e7bf      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x12e>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <__udivmoddi4+0x282>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x1cc>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0x140>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80b8 	bhi.w	8000eac <__udivmoddi4+0x2b0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	468c      	mov	ip, r1
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0a8      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000d4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f603 	lsr.w	r6, r0, r3
 8000d58:	4097      	lsls	r7, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d62:	40d9      	lsrs	r1, r3
 8000d64:	4330      	orrs	r0, r6
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f108 	mul.w	r1, r6, r8
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x19c>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d8a:	f080 808d 	bcs.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 808a 	bls.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b281      	uxth	r1, r0
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb00 f308 	mul.w	r3, r0, r8
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1c4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db6:	d273      	bcs.n	8000ea0 <__udivmoddi4+0x2a4>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d971      	bls.n	8000ea0 <__udivmoddi4+0x2a4>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4439      	add	r1, r7
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc6:	e778      	b.n	8000cba <__udivmoddi4+0xbe>
 8000dc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de6:	431f      	orrs	r7, r3
 8000de8:	0c3b      	lsrs	r3, r7, #16
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fa1f f884 	uxth.w	r8, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	fa02 f206 	lsl.w	r2, r2, r6
 8000e04:	fa00 f306 	lsl.w	r3, r0, r6
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x220>
 8000e0a:	1861      	adds	r1, r4, r1
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e10:	d248      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e12:	458a      	cmp	sl, r1
 8000e14:	d946      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4421      	add	r1, r4
 8000e1c:	eba1 010a 	sub.w	r1, r1, sl
 8000e20:	b2bf      	uxth	r7, r7
 8000e22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2e:	fb00 f808 	mul.w	r8, r0, r8
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x24a>
 8000e36:	19e7      	adds	r7, r4, r7
 8000e38:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e3c:	d22e      	bcs.n	8000e9c <__udivmoddi4+0x2a0>
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d92c      	bls.n	8000e9c <__udivmoddi4+0x2a0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4427      	add	r7, r4
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	eba7 0708 	sub.w	r7, r7, r8
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	454f      	cmp	r7, r9
 8000e54:	46c6      	mov	lr, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	d31a      	bcc.n	8000e90 <__udivmoddi4+0x294>
 8000e5a:	d017      	beq.n	8000e8c <__udivmoddi4+0x290>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x27a>
 8000e5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e62:	eb67 0701 	sbc.w	r7, r7, r1
 8000e66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	e9c5 2700 	strd	r2, r7, [r5]
 8000e76:	2600      	movs	r6, #0
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e70b      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fd      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e8c:	4543      	cmp	r3, r8
 8000e8e:	d2e5      	bcs.n	8000e5c <__udivmoddi4+0x260>
 8000e90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e94:	eb69 0104 	sbc.w	r1, r9, r4
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7df      	b.n	8000e5c <__udivmoddi4+0x260>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e7d2      	b.n	8000e46 <__udivmoddi4+0x24a>
 8000ea0:	4660      	mov	r0, ip
 8000ea2:	e78d      	b.n	8000dc0 <__udivmoddi4+0x1c4>
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	e7b9      	b.n	8000e1c <__udivmoddi4+0x220>
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	e775      	b.n	8000d98 <__udivmoddi4+0x19c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14a>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	4439      	add	r1, r7
 8000eb6:	e713      	b.n	8000ce0 <__udivmoddi4+0xe4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e724      	b.n	8000d08 <__udivmoddi4+0x10c>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	0000      	movs	r0, r0
	...

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ecc:	b0c0      	sub	sp, #256	; 0x100
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f001 fad4 	bl	800247c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 fd46 	bl	8001964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 ff1a 	bl	8001d10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000edc:	f000 fef8 	bl	8001cd0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee0:	f000 fecc 	bl	8001c7c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000ee4:	f000 fdf8 	bl	8001ad8 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000ee8:	f000 fda4 	bl	8001a34 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000eec:	f000 fe2c 	bl	8001b48 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ef0:	f000 fe76 	bl	8001be0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000ef4:	48a0      	ldr	r0, [pc, #640]	; (8001178 <main+0x2b0>)
 8000ef6:	f003 ffbb 	bl	8004e70 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim5);
 8000efa:	48a0      	ldr	r0, [pc, #640]	; (800117c <main+0x2b4>)
 8000efc:	f004 f812 	bl	8004f24 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	499f      	ldr	r1, [pc, #636]	; (8001180 <main+0x2b8>)
 8000f04:	489f      	ldr	r0, [pc, #636]	; (8001184 <main+0x2bc>)
 8000f06:	f001 fcaf 	bl	8002868 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f10:	489d      	ldr	r0, [pc, #628]	; (8001188 <main+0x2c0>)
 8000f12:	f002 ff2b 	bl	8003d6c <HAL_GPIO_WritePin>
	{
		char temp[]="NOW LOADING... \r\nLAB10 is now operating \r\n\r\n";
 8000f16:	463b      	mov	r3, r7
 8000f18:	4a9c      	ldr	r2, [pc, #624]	; (800118c <main+0x2c4>)
 8000f1a:	461c      	mov	r4, r3
 8000f1c:	4615      	mov	r5, r2
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f2a:	c407      	stmia	r4!, {r0, r1, r2}
 8000f2c:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f955 	bl	80001e0 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f40:	4893      	ldr	r0, [pc, #588]	; (8001190 <main+0x2c8>)
 8000f42:	f004 fc2e 	bl	80057a2 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 100) //100
 8000f46:	f000 ffdd 	bl	8001f04 <micros>
 8000f4a:	4b92      	ldr	r3, [pc, #584]	; (8001194 <main+0x2cc>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	ebb0 0802 	subs.w	r8, r0, r2
 8000f54:	eb61 0903 	sbc.w	r9, r1, r3
 8000f58:	f1b9 0f00 	cmp.w	r9, #0
 8000f5c:	bf08      	it	eq
 8000f5e:	f1b8 0f64 	cmpeq.w	r8, #100	; 0x64
 8000f62:	f0c0 8214 	bcc.w	800138e <main+0x4c6>
		{
			timepass = micros() - timestamp;
 8000f66:	f000 ffcd 	bl	8001f04 <micros>
 8000f6a:	4b8a      	ldr	r3, [pc, #552]	; (8001194 <main+0x2cc>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	ebb0 0a02 	subs.w	sl, r0, r2
 8000f74:	eb61 0b03 	sbc.w	fp, r1, r3
 8000f78:	4b87      	ldr	r3, [pc, #540]	; (8001198 <main+0x2d0>)
 8000f7a:	e9c3 ab00 	strd	sl, fp, [r3]
			timestamp = micros();
 8000f7e:	f000 ffc1 	bl	8001f04 <micros>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4983      	ldr	r1, [pc, #524]	; (8001194 <main+0x2cc>)
 8000f88:	e9c1 2300 	strd	r2, r3, [r1]
			if(timepass > 0 && timepass < 1000)
 8000f8c:	4b82      	ldr	r3, [pc, #520]	; (8001198 <main+0x2d0>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	d041      	beq.n	800101a <main+0x152>
 8000f96:	4b80      	ldr	r3, [pc, #512]	; (8001198 <main+0x2d0>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8000fa0:	f04f 0100 	mov.w	r1, #0
 8000fa4:	4299      	cmp	r1, r3
 8000fa6:	bf08      	it	eq
 8000fa8:	4290      	cmpeq	r0, r2
 8000faa:	d336      	bcc.n	800101a <main+0x152>
			{
				counter += (timepass/100.0)*(frequency/10.0)*(4096.0/10000.0);
 8000fac:	4b7a      	ldr	r3, [pc, #488]	; (8001198 <main+0x2d0>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff faf1 	bl	800059c <__aeabi_ul2d>
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b77      	ldr	r3, [pc, #476]	; (800119c <main+0x2d4>)
 8000fc0:	f7ff fc4c 	bl	800085c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4614      	mov	r4, r2
 8000fca:	461d      	mov	r5, r3
 8000fcc:	4b74      	ldr	r3, [pc, #464]	; (80011a0 <main+0x2d8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff faaf 	bl	8000534 <__aeabi_i2d>
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <main+0x2dc>)
 8000fdc:	f7ff fc3e 	bl	800085c <__aeabi_ddiv>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f7ff fb0e 	bl	8000608 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	a35e      	add	r3, pc, #376	; (adr r3, 8001170 <main+0x2a8>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff fb05 	bl	8000608 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <main+0x2e0>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff f946 	bl	800029c <__adddf3>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4964      	ldr	r1, [pc, #400]	; (80011a8 <main+0x2e0>)
 8001016:	e9c1 2300 	strd	r2, r3, [r1]
			}

			if(counter > 4096.0)
 800101a:	4b63      	ldr	r3, [pc, #396]	; (80011a8 <main+0x2e0>)
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <main+0x2e4>)
 8001026:	f7ff fd7f 	bl	8000b28 <__aeabi_dcmpgt>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <main+0x182>
			{
				counter += -4096.0;
 8001030:	4b5d      	ldr	r3, [pc, #372]	; (80011a8 <main+0x2e0>)
 8001032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <main+0x2e4>)
 800103c:	f7ff f92c 	bl	8000298 <__aeabi_dsub>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4958      	ldr	r1, [pc, #352]	; (80011a8 <main+0x2e0>)
 8001046:	e9c1 2300 	strd	r2, r3, [r1]
			}
			switch(wave)
 800104a:	4b59      	ldr	r3, [pc, #356]	; (80011b0 <main+0x2e8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b06      	cmp	r3, #6
 8001050:	f000 8124 	beq.w	800129c <main+0x3d4>
 8001054:	2b06      	cmp	r3, #6
 8001056:	f300 8184 	bgt.w	8001362 <main+0x49a>
 800105a:	2b04      	cmp	r3, #4
 800105c:	d003      	beq.n	8001066 <main+0x19e>
 800105e:	2b05      	cmp	r3, #5
 8001060:	f000 80b2 	beq.w	80011c8 <main+0x300>
 8001064:	e17d      	b.n	8001362 <main+0x49a>
			{
				case SAWTOOTH:
				{
					if(slope)
 8001066:	4b53      	ldr	r3, [pc, #332]	; (80011b4 <main+0x2ec>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d03f      	beq.n	80010ee <main+0x226>
					{
						dataOut = (LowVolt + (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;
 800106e:	4b52      	ldr	r3, [pc, #328]	; (80011b8 <main+0x2f0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa5e 	bl	8000534 <__aeabi_i2d>
 8001078:	4604      	mov	r4, r0
 800107a:	460d      	mov	r5, r1
 800107c:	4b4f      	ldr	r3, [pc, #316]	; (80011bc <main+0x2f4>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b4d      	ldr	r3, [pc, #308]	; (80011b8 <main+0x2f0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fa54 	bl	8000534 <__aeabi_i2d>
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <main+0x2e0>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fab9 	bl	8000608 <__aeabi_dmul>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <main+0x2e4>)
 80010a4:	f7ff fbda 	bl	800085c <__aeabi_ddiv>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff f8f4 	bl	800029c <__adddf3>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b3a      	ldr	r3, [pc, #232]	; (80011ac <main+0x2e4>)
 80010c2:	f7ff faa1 	bl	8000608 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <main+0x2f8>)
 80010d4:	f7ff fbc2 	bl	800085c <__aeabi_ddiv>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f7ff fd54 	bl	8000b8c <__aeabi_d2uiz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <main+0x2fc>)
 80010ea:	801a      	strh	r2, [r3, #0]
					else
					{
						dataOut = (HighVolt - (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;
					}
				}
				break;
 80010ec:	e139      	b.n	8001362 <main+0x49a>
						dataOut = (HighVolt - (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;
 80010ee:	4b33      	ldr	r3, [pc, #204]	; (80011bc <main+0x2f4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa1e 	bl	8000534 <__aeabi_i2d>
 80010f8:	4604      	mov	r4, r0
 80010fa:	460d      	mov	r5, r1
 80010fc:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <main+0x2f4>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <main+0x2f0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa14 	bl	8000534 <__aeabi_i2d>
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <main+0x2e0>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa79 	bl	8000608 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <main+0x2e4>)
 8001124:	f7ff fb9a 	bl	800085c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff f8b2 	bl	8000298 <__aeabi_dsub>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <main+0x2e4>)
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <main+0x2f8>)
 8001154:	f7ff fb82 	bl	800085c <__aeabi_ddiv>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd14 	bl	8000b8c <__aeabi_d2uiz>
 8001164:	4603      	mov	r3, r0
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <main+0x2fc>)
 800116a:	801a      	strh	r2, [r3, #0]
				break;
 800116c:	e0f9      	b.n	8001362 <main+0x49a>
 800116e:	bf00      	nop
 8001170:	eb1c432d 	.word	0xeb1c432d
 8001174:	3fda36e2 	.word	0x3fda36e2
 8001178:	20000188 	.word	0x20000188
 800117c:	20000140 	.word	0x20000140
 8001180:	20000112 	.word	0x20000112
 8001184:	2000022c 	.word	0x2000022c
 8001188:	40020000 	.word	0x40020000
 800118c:	08007d90 	.word	0x08007d90
 8001190:	200002d4 	.word	0x200002d4
 8001194:	20000128 	.word	0x20000128
 8001198:	20000100 	.word	0x20000100
 800119c:	40590000 	.word	0x40590000
 80011a0:	20000014 	.word	0x20000014
 80011a4:	40240000 	.word	0x40240000
 80011a8:	20000108 	.word	0x20000108
 80011ac:	40b00000 	.word	0x40b00000
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000110 	.word	0x20000110
 80011b8:	200000fc 	.word	0x200000fc
 80011bc:	2000001c 	.word	0x2000001c
 80011c0:	40408000 	.word	0x40408000
 80011c4:	20000120 	.word	0x20000120
				case SINE_WAVE:
				{
					dataOut = ((HighVolt - LowVolt)*4096.0/66.0)*(sin(2*M_PI*counter/4096.0)+1.0) + (LowVolt*4096.0/33.0);
 80011c8:	4bc5      	ldr	r3, [pc, #788]	; (80014e0 <main+0x618>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4bc5      	ldr	r3, [pc, #788]	; (80014e4 <main+0x61c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4bc2      	ldr	r3, [pc, #776]	; (80014e8 <main+0x620>)
 80011de:	f7ff fa13 	bl	8000608 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4bbf      	ldr	r3, [pc, #764]	; (80014ec <main+0x624>)
 80011f0:	f7ff fb34 	bl	800085c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4614      	mov	r4, r2
 80011fa:	461d      	mov	r5, r3
 80011fc:	4bbc      	ldr	r3, [pc, #752]	; (80014f0 <main+0x628>)
 80011fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001202:	a3b5      	add	r3, pc, #724	; (adr r3, 80014d8 <main+0x610>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4bb3      	ldr	r3, [pc, #716]	; (80014e8 <main+0x620>)
 800121a:	f7ff fb1f 	bl	800085c <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	ec43 2b17 	vmov	d7, r2, r3
 8001226:	eeb0 0a47 	vmov.f32	s0, s14
 800122a:	eef0 0a67 	vmov.f32	s1, s15
 800122e:	f005 fd33 	bl	8006c98 <sin>
 8001232:	ec51 0b10 	vmov	r0, r1, d0
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4bae      	ldr	r3, [pc, #696]	; (80014f4 <main+0x62c>)
 800123c:	f7ff f82e 	bl	800029c <__adddf3>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff f9de 	bl	8000608 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4614      	mov	r4, r2
 8001252:	461d      	mov	r5, r3
 8001254:	4ba3      	ldr	r3, [pc, #652]	; (80014e4 <main+0x61c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f96b 	bl	8000534 <__aeabi_i2d>
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4ba1      	ldr	r3, [pc, #644]	; (80014e8 <main+0x620>)
 8001264:	f7ff f9d0 	bl	8000608 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <main+0x630>)
 8001276:	f7ff faf1 	bl	800085c <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4620      	mov	r0, r4
 8001280:	4629      	mov	r1, r5
 8001282:	f7ff f80b 	bl	800029c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fc7d 	bl	8000b8c <__aeabi_d2uiz>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b99      	ldr	r3, [pc, #612]	; (80014fc <main+0x634>)
 8001298:	801a      	strh	r2, [r3, #0]
				}
				break;
 800129a:	e062      	b.n	8001362 <main+0x49a>
				case SQUARE_WAVE:
				{
					if(duty*4096.0/100.0 >= counter)
 800129c:	4b98      	ldr	r3, [pc, #608]	; (8001500 <main+0x638>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f947 	bl	8000534 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b8f      	ldr	r3, [pc, #572]	; (80014e8 <main+0x620>)
 80012ac:	f7ff f9ac 	bl	8000608 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b91      	ldr	r3, [pc, #580]	; (8001504 <main+0x63c>)
 80012be:	f7ff facd 	bl	800085c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <main+0x628>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7ff fc20 	bl	8000b14 <__aeabi_dcmpge>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d025      	beq.n	8001326 <main+0x45e>
					{
						dataOut = HighVolt*4096.0/33.0;
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <main+0x618>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f928 	bl	8000534 <__aeabi_i2d>
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b7f      	ldr	r3, [pc, #508]	; (80014e8 <main+0x620>)
 80012ea:	f7ff f98d 	bl	8000608 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b7f      	ldr	r3, [pc, #508]	; (80014f8 <main+0x630>)
 80012fc:	f7ff faae 	bl	800085c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc40 	bl	8000b8c <__aeabi_d2uiz>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b7a      	ldr	r3, [pc, #488]	; (80014fc <main+0x634>)
 8001312:	801a      	strh	r2, [r3, #0]
						if(HighVolt == 33)
 8001314:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <main+0x618>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b21      	cmp	r3, #33	; 0x21
 800131a:	d121      	bne.n	8001360 <main+0x498>
						{
							dataOut = 4095;
 800131c:	4b77      	ldr	r3, [pc, #476]	; (80014fc <main+0x634>)
 800131e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001322:	801a      	strh	r2, [r3, #0]
					else
					{
						dataOut = LowVolt*4096.0/33.0;
					}
				}
				break;
 8001324:	e01c      	b.n	8001360 <main+0x498>
						dataOut = LowVolt*4096.0/33.0;
 8001326:	4b6f      	ldr	r3, [pc, #444]	; (80014e4 <main+0x61c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f902 	bl	8000534 <__aeabi_i2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b6c      	ldr	r3, [pc, #432]	; (80014e8 <main+0x620>)
 8001336:	f7ff f967 	bl	8000608 <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b6c      	ldr	r3, [pc, #432]	; (80014f8 <main+0x630>)
 8001348:	f7ff fa88 	bl	800085c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc1a 	bl	8000b8c <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b67      	ldr	r3, [pc, #412]	; (80014fc <main+0x634>)
 800135e:	801a      	strh	r2, [r3, #0]
				break;
 8001360:	bf00      	nop
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8001362:	4b69      	ldr	r3, [pc, #420]	; (8001508 <main+0x640>)
 8001364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10f      	bne.n	800138e <main+0x4c6>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 800136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001372:	4866      	ldr	r0, [pc, #408]	; (800150c <main+0x644>)
 8001374:	f002 fce2 	bl	8003d3c <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d107      	bne.n	800138e <main+0x4c6>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 800137e:	4b64      	ldr	r3, [pc, #400]	; (8001510 <main+0x648>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	4a5e      	ldr	r2, [pc, #376]	; (80014fc <main+0x634>)
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fd61 	bl	8001e50 <MCP4922SetOutput>
			}
		}

		char Frequencyline[] = "Frequency is";
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <main+0x64c>)
 8001390:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8001394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001396:	c407      	stmia	r4!, {r0, r1, r2}
 8001398:	7023      	strb	r3, [r4, #0]
		char Dutyline[] = "Duty is";
 800139a:	4a5f      	ldr	r2, [pc, #380]	; (8001518 <main+0x650>)
 800139c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a4:	e883 0003 	stmia.w	r3, {r0, r1}
		char HighVoltline[] = "High Volt is";
 80013a8:	4b5c      	ldr	r3, [pc, #368]	; (800151c <main+0x654>)
 80013aa:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 80013ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013b0:	c407      	stmia	r4!, {r0, r1, r2}
 80013b2:	7023      	strb	r3, [r4, #0]
		char LowVoltline[] = "Low Volt is";
 80013b4:	4a5a      	ldr	r2, [pc, #360]	; (8001520 <main+0x658>)
 80013b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80013bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80013c0:	2220      	movs	r2, #32
 80013c2:	4958      	ldr	r1, [pc, #352]	; (8001524 <main+0x65c>)
 80013c4:	4858      	ldr	r0, [pc, #352]	; (8001528 <main+0x660>)
 80013c6:	f004 fa7e 	bl	80058c6 <HAL_UART_Receive_IT>

		int16_t inputchar = UARTRecieveIT();
 80013ca:	f000 fdb5 	bl	8001f38 <UARTRecieveIT>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		if(inputchar!= -1)
 80013d4:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d00e      	beq.n	80013fc <main+0x534>
		{
			//sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n\r\n", inputchar);
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 80013de:	4853      	ldr	r0, [pc, #332]	; (800152c <main+0x664>)
 80013e0:	f7fe fefe 	bl	80001e0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	494f      	ldr	r1, [pc, #316]	; (800152c <main+0x664>)
 80013ee:	484e      	ldr	r0, [pc, #312]	; (8001528 <main+0x660>)
 80013f0:	f004 f9d7 	bl	80057a2 <HAL_UART_Transmit>
			Input = 1;
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <main+0x668>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e002      	b.n	8001402 <main+0x53a>
		}
		else
		{
			Input = 0;
 80013fc:	4b4c      	ldr	r3, [pc, #304]	; (8001530 <main+0x668>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
		}

		switch(state)
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <main+0x66c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b03      	cmp	r3, #3
 8001408:	f63f ad9d 	bhi.w	8000f46 <main+0x7e>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <main+0x54c>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001455 	.word	0x08001455
 800141c:	080016dd 	.word	0x080016dd
 8001420:	0800170d 	.word	0x0800170d
		{
			case START: //0 start
			{
				char temp[] = " 1. Select Mode \r\n 2. Increase Frequency \r\n 3. Decrease Frequency \r\n 4. Increase High Volt \r\n 5. Decrease High Volt \r\n 6. Increase Low Volt \r\n 7. Decrease Low Volt \r\n\r\n";
 8001424:	463b      	mov	r3, r7
 8001426:	4a44      	ldr	r2, [pc, #272]	; (8001538 <main+0x670>)
 8001428:	4618      	mov	r0, r3
 800142a:	4611      	mov	r1, r2
 800142c:	23a9      	movs	r3, #169	; 0xa9
 800142e:	461a      	mov	r2, r3
 8001430:	f004 fffc 	bl	800642c <memcpy>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001434:	463b      	mov	r3, r7
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fed2 	bl	80001e0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b29a      	uxth	r2, r3
 8001440:	4639      	mov	r1, r7
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	4838      	ldr	r0, [pc, #224]	; (8001528 <main+0x660>)
 8001448:	f004 f9ab 	bl	80057a2 <HAL_UART_Transmit>
				state = WAIT;
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <main+0x66c>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001452:	e275      	b.n	8001940 <main+0xa78>
			case WAIT:
			{
				switch(inputchar)
 8001454:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8001458:	3b31      	subs	r3, #49	; 0x31
 800145a:	2b06      	cmp	r3, #6
 800145c:	f200 8129 	bhi.w	80016b2 <main+0x7ea>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <main+0x5a0>)
 8001462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001485 	.word	0x08001485
 800146c:	0800148d 	.word	0x0800148d
 8001470:	08001545 	.word	0x08001545
 8001474:	0800158b 	.word	0x0800158b
 8001478:	080015d1 	.word	0x080015d1
 800147c:	0800161b 	.word	0x0800161b
 8001480:	0800166d 	.word	0x0800166d
				{
					case '1':
					{
						state = SELECTMODE;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <main+0x66c>)
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
					}
					break;
 800148a:	e126      	b.n	80016da <main+0x812>
					case '2':
					{
						if(frequency < 100)
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <main+0x674>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b63      	cmp	r3, #99	; 0x63
 8001492:	dc04      	bgt.n	800149e <main+0x5d6>
						{
							frequency += 1;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <main+0x674>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <main+0x674>)
 800149c:	6013      	str	r3, [r2, #0]
						}
						sprintf(Frequencyline, "Frequency is [%d]/10 Hz\r\n\r\n", frequency);
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <main+0x674>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014a6:	4926      	ldr	r1, [pc, #152]	; (8001540 <main+0x678>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 ffd5 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),1000);
 80014ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7fe fe94 	bl	80001e0 <strlen>
 80014b8:	4603      	mov	r3, r0
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80014c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <main+0x660>)
 80014c6:	f004 f96c 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <main+0x66c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
					}
					break;
 80014d0:	e103      	b.n	80016da <main+0x812>
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	54442d18 	.word	0x54442d18
 80014dc:	401921fb 	.word	0x401921fb
 80014e0:	2000001c 	.word	0x2000001c
 80014e4:	200000fc 	.word	0x200000fc
 80014e8:	40b00000 	.word	0x40b00000
 80014ec:	40508000 	.word	0x40508000
 80014f0:	20000108 	.word	0x20000108
 80014f4:	3ff00000 	.word	0x3ff00000
 80014f8:	40408000 	.word	0x40408000
 80014fc:	20000120 	.word	0x20000120
 8001500:	20000018 	.word	0x20000018
 8001504:	40590000 	.word	0x40590000
 8001508:	200001d4 	.word	0x200001d4
 800150c:	40020400 	.word	0x40020400
 8001510:	20000020 	.word	0x20000020
 8001514:	08007dc0 	.word	0x08007dc0
 8001518:	08007dd0 	.word	0x08007dd0
 800151c:	08007dd8 	.word	0x08007dd8
 8001520:	08007de8 	.word	0x08007de8
 8001524:	200000d4 	.word	0x200000d4
 8001528:	200002d4 	.word	0x200002d4
 800152c:	200000b4 	.word	0x200000b4
 8001530:	200000f8 	.word	0x200000f8
 8001534:	200000f4 	.word	0x200000f4
 8001538:	08007df4 	.word	0x08007df4
 800153c:	20000014 	.word	0x20000014
 8001540:	08007d20 	.word	0x08007d20
					case '3':
					{
						if(frequency > 0)
 8001544:	4bb0      	ldr	r3, [pc, #704]	; (8001808 <main+0x940>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd04      	ble.n	8001556 <main+0x68e>
						{
							frequency += -1;
 800154c:	4bae      	ldr	r3, [pc, #696]	; (8001808 <main+0x940>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4aad      	ldr	r2, [pc, #692]	; (8001808 <main+0x940>)
 8001554:	6013      	str	r3, [r2, #0]
						}
						sprintf(Frequencyline, "Frequency is [%d]/10 Hz\r\n\r\n", frequency);
 8001556:	4bac      	ldr	r3, [pc, #688]	; (8001808 <main+0x940>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800155e:	49ab      	ldr	r1, [pc, #684]	; (800180c <main+0x944>)
 8001560:	4618      	mov	r0, r3
 8001562:	f004 ff79 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),1000);
 8001566:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157c:	48a4      	ldr	r0, [pc, #656]	; (8001810 <main+0x948>)
 800157e:	f004 f910 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 8001582:	4ba4      	ldr	r3, [pc, #656]	; (8001814 <main+0x94c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001588:	e0a7      	b.n	80016da <main+0x812>
					case '4':
					{
						if(HighVolt < 33)
 800158a:	4ba3      	ldr	r3, [pc, #652]	; (8001818 <main+0x950>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b20      	cmp	r3, #32
 8001590:	dc04      	bgt.n	800159c <main+0x6d4>
						{
							HighVolt += 1;
 8001592:	4ba1      	ldr	r3, [pc, #644]	; (8001818 <main+0x950>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a9f      	ldr	r2, [pc, #636]	; (8001818 <main+0x950>)
 800159a:	6013      	str	r3, [r2, #0]
						}
						sprintf(HighVoltline, "High Volt is [%d]/10 V\r\n\r\n", HighVolt);
 800159c:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <main+0x950>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015a4:	499d      	ldr	r1, [pc, #628]	; (800181c <main+0x954>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 ff56 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)HighVoltline, strlen(HighVoltline),1000);
 80015ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe15 	bl	80001e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	4893      	ldr	r0, [pc, #588]	; (8001810 <main+0x948>)
 80015c4:	f004 f8ed 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 80015c8:	4b92      	ldr	r3, [pc, #584]	; (8001814 <main+0x94c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
					}
					break;
 80015ce:	e084      	b.n	80016da <main+0x812>
					case '5':
					{
						if(HighVolt > LowVolt)
 80015d0:	4b91      	ldr	r3, [pc, #580]	; (8001818 <main+0x950>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b92      	ldr	r3, [pc, #584]	; (8001820 <main+0x958>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dd04      	ble.n	80015e6 <main+0x71e>
						{
							HighVolt += -1;
 80015dc:	4b8e      	ldr	r3, [pc, #568]	; (8001818 <main+0x950>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	4a8d      	ldr	r2, [pc, #564]	; (8001818 <main+0x950>)
 80015e4:	6013      	str	r3, [r2, #0]
						}
						sprintf(HighVoltline, "High Volt is [%d]/10 V\r\n\r\n", HighVolt);
 80015e6:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <main+0x950>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015ee:	498b      	ldr	r1, [pc, #556]	; (800181c <main+0x954>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 ff31 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)HighVoltline, strlen(HighVoltline),1000);
 80015f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fdf0 	bl	80001e0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160c:	4880      	ldr	r0, [pc, #512]	; (8001810 <main+0x948>)
 800160e:	f004 f8c8 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 8001612:	4b80      	ldr	r3, [pc, #512]	; (8001814 <main+0x94c>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001618:	e05f      	b.n	80016da <main+0x812>
					case '6':
					{
						if(LowVolt < 33 && LowVolt < HighVolt)
 800161a:	4b81      	ldr	r3, [pc, #516]	; (8001820 <main+0x958>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b20      	cmp	r3, #32
 8001620:	dc0a      	bgt.n	8001638 <main+0x770>
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <main+0x958>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <main+0x950>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	da04      	bge.n	8001638 <main+0x770>
						{
							LowVolt += 1;
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <main+0x958>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a7a      	ldr	r2, [pc, #488]	; (8001820 <main+0x958>)
 8001636:	6013      	str	r3, [r2, #0]
						}
						sprintf(LowVoltline, "Low Volt is [%d]/10 V\r\n\r\n", LowVolt);
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <main+0x958>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001640:	4978      	ldr	r1, [pc, #480]	; (8001824 <main+0x95c>)
 8001642:	4618      	mov	r0, r3
 8001644:	f004 ff08 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)LowVoltline, strlen(LowVoltline),1000);
 8001648:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe fdc7 	bl	80001e0 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	486c      	ldr	r0, [pc, #432]	; (8001810 <main+0x948>)
 8001660:	f004 f89f 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 8001664:	4b6b      	ldr	r3, [pc, #428]	; (8001814 <main+0x94c>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
					}
					break;
 800166a:	e036      	b.n	80016da <main+0x812>
					case '7':
					{
						if(LowVolt > 0)
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <main+0x958>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	dd04      	ble.n	800167e <main+0x7b6>
						{
							LowVolt += -1;
 8001674:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <main+0x958>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	4a69      	ldr	r2, [pc, #420]	; (8001820 <main+0x958>)
 800167c:	6013      	str	r3, [r2, #0]
						}
						sprintf(LowVoltline, "Low Volt is [%d]/10 V\r\n\r\n", LowVolt);
 800167e:	4b68      	ldr	r3, [pc, #416]	; (8001820 <main+0x958>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001686:	4967      	ldr	r1, [pc, #412]	; (8001824 <main+0x95c>)
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fee5 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)LowVoltline, strlen(LowVoltline),1000);
 800168e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fda4 	bl	80001e0 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80016a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a4:	485a      	ldr	r0, [pc, #360]	; (8001810 <main+0x948>)
 80016a6:	f004 f87c 	bl	80057a2 <HAL_UART_Transmit>
						state = START;
 80016aa:	4b5a      	ldr	r3, [pc, #360]	; (8001814 <main+0x94c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
					}
					break;
 80016b0:	e013      	b.n	80016da <main+0x812>
					default:
					{
						if(Input != 0)
 80016b2:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <main+0x960>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8141 	beq.w	800193e <main+0xa76>
						{
							state = START;
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <main+0x94c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),1000);
 80016c2:	485a      	ldr	r0, [pc, #360]	; (800182c <main+0x964>)
 80016c4:	f7fe fd8c 	bl	80001e0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	4956      	ldr	r1, [pc, #344]	; (800182c <main+0x964>)
 80016d2:	484f      	ldr	r0, [pc, #316]	; (8001810 <main+0x948>)
 80016d4:	f004 f865 	bl	80057a2 <HAL_UART_Transmit>
						}
					}
				}
			}
			break;
 80016d8:	e131      	b.n	800193e <main+0xa76>
 80016da:	e130      	b.n	800193e <main+0xa76>
			case SELECTMODE:
			{
				char temp[] = " 1. Sawtooth up \r\n 2. Sawtooth down \r\n 3. Sine Wave \r\n 4. Square Wave \r\n 5. increase duty cycle \r\n 6. decrease duty cycle \r\n 7. Back \r\n\r\n";
 80016dc:	463b      	mov	r3, r7
 80016de:	4a54      	ldr	r2, [pc, #336]	; (8001830 <main+0x968>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	4611      	mov	r1, r2
 80016e4:	238a      	movs	r3, #138	; 0x8a
 80016e6:	461a      	mov	r2, r3
 80016e8:	f004 fea0 	bl	800642c <memcpy>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80016ec:	463b      	mov	r3, r7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd76 	bl	80001e0 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4639      	mov	r1, r7
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	4844      	ldr	r0, [pc, #272]	; (8001810 <main+0x948>)
 8001700:	f004 f84f 	bl	80057a2 <HAL_UART_Transmit>
				state = SELECTMODE_WAIT;
 8001704:	4b43      	ldr	r3, [pc, #268]	; (8001814 <main+0x94c>)
 8001706:	2203      	movs	r2, #3
 8001708:	701a      	strb	r2, [r3, #0]
			}
			break;
 800170a:	e119      	b.n	8001940 <main+0xa78>
			case SELECTMODE_WAIT:
			{
				switch(inputchar)
 800170c:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8001710:	3b31      	subs	r3, #49	; 0x31
 8001712:	2b06      	cmp	r3, #6
 8001714:	f200 80ff 	bhi.w	8001916 <main+0xa4e>
 8001718:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <main+0x858>)
 800171a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171e:	bf00      	nop
 8001720:	0800173d 	.word	0x0800173d
 8001724:	0800177d 	.word	0x0800177d
 8001728:	080017c5 	.word	0x080017c5
 800172c:	08001849 	.word	0x08001849
 8001730:	08001883 	.word	0x08001883
 8001734:	080018c9 	.word	0x080018c9
 8001738:	0800190f 	.word	0x0800190f
				{
					case '1':
					{
						wave = SAWTOOTH;
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <main+0x96c>)
 800173e:	2204      	movs	r2, #4
 8001740:	701a      	strb	r2, [r3, #0]
						slope = 1;
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <main+0x970>)
 8001744:	2201      	movs	r2, #1
 8001746:	801a      	strh	r2, [r3, #0]
						char temp[] = "SAWTOOTH up is now selected \r\n\r\n";
 8001748:	463b      	mov	r3, r7
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <main+0x974>)
 800174c:	461c      	mov	r4, r3
 800174e:	4615      	mov	r5, r2
 8001750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	682b      	ldr	r3, [r5, #0]
 800175a:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd3e 	bl	80001e0 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	b29a      	uxth	r2, r3
 8001768:	4639      	mov	r1, r7
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	4828      	ldr	r0, [pc, #160]	; (8001810 <main+0x948>)
 8001770:	f004 f817 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <main+0x94c>)
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
					}
					break;
 800177a:	e0df      	b.n	800193c <main+0xa74>
					case '2':
					{
						wave = SAWTOOTH;
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <main+0x96c>)
 800177e:	2204      	movs	r2, #4
 8001780:	701a      	strb	r2, [r3, #0]
						slope = 0;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <main+0x970>)
 8001784:	2200      	movs	r2, #0
 8001786:	801a      	strh	r2, [r3, #0]
						char temp[] = "SAWTOOTH down is now selected \r\n\r\n";
 8001788:	463b      	mov	r3, r7
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <main+0x978>)
 800178c:	461c      	mov	r4, r3
 800178e:	4615      	mov	r5, r2
 8001790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	8022      	strh	r2, [r4, #0]
 800179e:	3402      	adds	r4, #2
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80017a4:	463b      	mov	r3, r7
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd1a 	bl	80001e0 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4639      	mov	r1, r7
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	4816      	ldr	r0, [pc, #88]	; (8001810 <main+0x948>)
 80017b8:	f003 fff3 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <main+0x94c>)
 80017be:	2202      	movs	r2, #2
 80017c0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80017c2:	e0bb      	b.n	800193c <main+0xa74>
					case '3':
					{
						wave = SINE_WAVE;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <main+0x96c>)
 80017c6:	2205      	movs	r2, #5
 80017c8:	701a      	strb	r2, [r3, #0]
						char temp[] = "Sine wave is now selected \r\n\r\n";
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <main+0x97c>)
 80017cc:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80017d0:	461d      	mov	r5, r3
 80017d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017da:	c407      	stmia	r4!, {r0, r1, r2}
 80017dc:	8023      	strh	r3, [r4, #0]
 80017de:	3402      	adds	r4, #2
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80017e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fcf9 	bl	80001e0 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <main+0x948>)
 80017fc:	f003 ffd1 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <main+0x94c>)
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001806:	e099      	b.n	800193c <main+0xa74>
 8001808:	20000014 	.word	0x20000014
 800180c:	08007d20 	.word	0x08007d20
 8001810:	200002d4 	.word	0x200002d4
 8001814:	200000f4 	.word	0x200000f4
 8001818:	2000001c 	.word	0x2000001c
 800181c:	08007d3c 	.word	0x08007d3c
 8001820:	200000fc 	.word	0x200000fc
 8001824:	08007d58 	.word	0x08007d58
 8001828:	200000f8 	.word	0x200000f8
 800182c:	20000004 	.word	0x20000004
 8001830:	08007ea0 	.word	0x08007ea0
 8001834:	20000000 	.word	0x20000000
 8001838:	20000110 	.word	0x20000110
 800183c:	08007f2c 	.word	0x08007f2c
 8001840:	08007f50 	.word	0x08007f50
 8001844:	08007f74 	.word	0x08007f74
					case '4':
					{
						wave = SQUARE_WAVE;
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <main+0xa7c>)
 800184a:	2206      	movs	r2, #6
 800184c:	701a      	strb	r2, [r3, #0]
						char temp[] = "Square wave is now selected \r\n\r\n";
 800184e:	463b      	mov	r3, r7
 8001850:	4a3d      	ldr	r2, [pc, #244]	; (8001948 <main+0xa80>)
 8001852:	461c      	mov	r4, r3
 8001854:	4615      	mov	r5, r2
 8001856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800185e:	682b      	ldr	r3, [r5, #0]
 8001860:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001862:	463b      	mov	r3, r7
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fcbb 	bl	80001e0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	4639      	mov	r1, r7
 8001870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001874:	4835      	ldr	r0, [pc, #212]	; (800194c <main+0xa84>)
 8001876:	f003 ff94 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 800187a:	4b35      	ldr	r3, [pc, #212]	; (8001950 <main+0xa88>)
 800187c:	2202      	movs	r2, #2
 800187e:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001880:	e05c      	b.n	800193c <main+0xa74>
					case '5':
					{
						if(duty < 100)
 8001882:	4b34      	ldr	r3, [pc, #208]	; (8001954 <main+0xa8c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b63      	cmp	r3, #99	; 0x63
 8001888:	dc04      	bgt.n	8001894 <main+0x9cc>
						{
							duty += 1;
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <main+0xa8c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a30      	ldr	r2, [pc, #192]	; (8001954 <main+0xa8c>)
 8001892:	6013      	str	r3, [r2, #0]
						}
						sprintf(Dutyline, "Duty is [%d] percent\r\n\r\n", duty);
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <main+0xa8c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800189c:	492e      	ldr	r1, [pc, #184]	; (8001958 <main+0xa90>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fdda 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Dutyline, strlen(Dutyline),1000);
 80018a4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fc99 	bl	80001e0 <strlen>
 80018ae:	4603      	mov	r3, r0
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	4824      	ldr	r0, [pc, #144]	; (800194c <main+0xa84>)
 80018bc:	f003 ff71 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <main+0xa88>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80018c6:	e039      	b.n	800193c <main+0xa74>
					case '6':
					{
						if(duty > 0)
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <main+0xa8c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd04      	ble.n	80018da <main+0xa12>
						{
							duty += -1;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <main+0xa8c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <main+0xa8c>)
 80018d8:	6013      	str	r3, [r2, #0]
						}
						sprintf(Dutyline, "Duty is [%d] percent\r\n\r\n", duty);
 80018da:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <main+0xa8c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018e2:	491d      	ldr	r1, [pc, #116]	; (8001958 <main+0xa90>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f004 fdb7 	bl	8006458 <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Dutyline, strlen(Dutyline),1000);
 80018ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fc76 	bl	80001e0 <strlen>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80018fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001900:	4812      	ldr	r0, [pc, #72]	; (800194c <main+0xa84>)
 8001902:	f003 ff4e 	bl	80057a2 <HAL_UART_Transmit>
						state = SELECTMODE;
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <main+0xa88>)
 8001908:	2202      	movs	r2, #2
 800190a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800190c:	e016      	b.n	800193c <main+0xa74>
					case '7':
					{
						state = START;
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <main+0xa88>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001914:	e012      	b.n	800193c <main+0xa74>
					default:
					{
						if(Input != 0)
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <main+0xa94>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00d      	beq.n	800193a <main+0xa72>
						{
							state = SELECTMODE;
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <main+0xa88>)
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),1000);
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <main+0xa98>)
 8001926:	f7fe fc5b 	bl	80001e0 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	b29a      	uxth	r2, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	490b      	ldr	r1, [pc, #44]	; (8001960 <main+0xa98>)
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <main+0xa84>)
 8001936:	f003 ff34 	bl	80057a2 <HAL_UART_Transmit>
						}
					}
					break;
 800193a:	bf00      	nop
				}
			}
			break;
 800193c:	e000      	b.n	8001940 <main+0xa78>
			break;
 800193e:	bf00      	nop
	{
 8001940:	f7ff bb01 	b.w	8000f46 <main+0x7e>
 8001944:	20000000 	.word	0x20000000
 8001948:	08007f94 	.word	0x08007f94
 800194c:	200002d4 	.word	0x200002d4
 8001950:	200000f4 	.word	0x200000f4
 8001954:	20000018 	.word	0x20000018
 8001958:	08007d74 	.word	0x08007d74
 800195c:	200000f8 	.word	0x200000f8
 8001960:	20000004 	.word	0x20000004

08001964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b094      	sub	sp, #80	; 0x50
 8001968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	2230      	movs	r2, #48	; 0x30
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fd68 	bl	8006448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <SystemClock_Config+0xc8>)
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <SystemClock_Config+0xc8>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <SystemClock_Config+0xc8>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <SystemClock_Config+0xcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <SystemClock_Config+0xcc>)
 80019ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <SystemClock_Config+0xcc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019c0:	2302      	movs	r3, #2
 80019c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019c8:	2310      	movs	r3, #16
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019cc:	2302      	movs	r3, #2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019d0:	2300      	movs	r3, #0
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 f9d9 	bl	8003da0 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f4:	f000 fae8 	bl	8001fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f8:	230f      	movs	r3, #15
 80019fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	2103      	movs	r1, #3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f002 fc3b 	bl	8004290 <HAL_RCC_ClockConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a20:	f000 fad2 	bl	8001fc8 <Error_Handler>
  }
}
 8001a24:	bf00      	nop
 8001a26:	3750      	adds	r7, #80	; 0x50
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40007000 	.word	0x40007000

08001a34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <MX_ADC1_Init+0xa0>)
 8001a4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a4c:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001a9a:	f000 fd61 	bl	8002560 <HAL_ADC_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001aa4:	f000 fa90 	bl	8001fc8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_ADC1_Init+0x9c>)
 8001aba:	f000 ffed 	bl	8002a98 <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001ac4:	f000 fa80 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000022c 	.word	0x2000022c
 8001ad4:	40012000 	.word	0x40012000

08001ad8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <MX_SPI3_Init+0x6c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001ae4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001af6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b26:	220a      	movs	r2, #10
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_SPI3_Init+0x68>)
 8001b2c:	f002 fdac 	bl	8004688 <HAL_SPI_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001b36:	f000 fa47 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200001d4 	.word	0x200001d4
 8001b44:	40003c00 	.word	0x40003c00

08001b48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <MX_TIM3_Init+0x94>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b6c:	2263      	movs	r2, #99	; 0x63
 8001b6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b78:	2264      	movs	r2, #100	; 0x64
 8001b7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b88:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001b8a:	f003 f921 	bl	8004dd0 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001b94:	f000 fa18 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0308 	add.w	r3, r7, #8
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001ba6:	f003 fb27 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001bb0:	f000 fa0a 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bb4:	2320      	movs	r3, #32
 8001bb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_TIM3_Init+0x90>)
 8001bc2:	f003 fd1f 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001bcc:	f000 f9fc 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bd0:	bf00      	nop
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000188 	.word	0x20000188
 8001bdc:	40000400 	.word	0x40000400

08001be0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]
 8001bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <MX_TIM5_Init+0x98>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c04:	2263      	movs	r2, #99	; 0x63
 8001c06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c22:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c24:	f003 f8d4 	bl	8004dd0 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001c2e:	f000 f9cb 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c40:	f003 fada 	bl	80051f8 <HAL_TIM_ConfigClockSource>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001c4a:	f000 f9bd 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM5_Init+0x94>)
 8001c5c:	f003 fcd2 	bl	8005604 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001c66:	f000 f9af 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000140 	.word	0x20000140
 8001c78:	40000c00 	.word	0x40000c00

08001c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <MX_USART2_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f003 fd28 	bl	8005708 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cbe:	f000 f983 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002d4 	.word	0x200002d4
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_DMA_Init+0x3c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <MX_DMA_Init+0x3c>)
 8001ce0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_DMA_Init+0x3c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2038      	movs	r0, #56	; 0x38
 8001cf8:	f001 fa63 	bl	80031c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cfc:	2038      	movs	r0, #56	; 0x38
 8001cfe:	f001 fa7c 	bl	80031fa <HAL_NVIC_EnableIRQ>

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800

08001d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	f107 0314 	add.w	r3, r7, #20
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a43      	ldr	r2, [pc, #268]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d30:	f043 0304 	orr.w	r3, r3, #4
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b3d      	ldr	r3, [pc, #244]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a3c      	ldr	r2, [pc, #240]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	; (8001e3c <MX_GPIO_Init+0x12c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2120      	movs	r1, #32
 8001d9a:	4829      	ldr	r0, [pc, #164]	; (8001e40 <MX_GPIO_Init+0x130>)
 8001d9c:	f001 ffe6 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da6:	4827      	ldr	r0, [pc, #156]	; (8001e44 <MX_GPIO_Init+0x134>)
 8001da8:	f001 ffe0 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	4825      	ldr	r0, [pc, #148]	; (8001e48 <MX_GPIO_Init+0x138>)
 8001db2:	f001 ffdb 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001db6:	2201      	movs	r2, #1
 8001db8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dbc:	4820      	ldr	r0, [pc, #128]	; (8001e40 <MX_GPIO_Init+0x130>)
 8001dbe:	f001 ffd5 	bl	8003d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <MX_GPIO_Init+0x13c>)
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481c      	ldr	r0, [pc, #112]	; (8001e48 <MX_GPIO_Init+0x138>)
 8001dd8:	f001 fe2c 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001ddc:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4812      	ldr	r0, [pc, #72]	; (8001e40 <MX_GPIO_Init+0x130>)
 8001df6:	f001 fe1d 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_GPIO_Init+0x134>)
 8001e14:	f001 fe0e 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_GPIO_Init+0x138>)
 8001e30:	f001 fe00 	bl	8003a34 <HAL_GPIO_Init>

}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	10210000 	.word	0x10210000

08001e50 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001e60:	88bb      	ldrh	r3, [r7, #4]
 8001e62:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	031b      	lsls	r3, r3, #12
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e76:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MCP4922SetOutput+0x44>)
 8001e78:	f001 ff78 	bl	8003d6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	2201      	movs	r2, #1
 8001e82:	4619      	mov	r1, r3
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MCP4922SetOutput+0x48>)
 8001e86:	f002 fc89 	bl	800479c <HAL_SPI_Transmit_IT>
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40020400 	.word	0x40020400
 8001e98:	200001d4 	.word	0x200001d4

08001e9c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <HAL_SPI_TxCpltCallback+0x24>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d105      	bne.n	8001eb8 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb2:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <HAL_SPI_TxCpltCallback+0x28>)
 8001eb4:	f001 ff5a 	bl	8003d6c <HAL_GPIO_WritePin>
	}
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200001d4 	.word	0x200001d4
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b4b0      	push	{r4, r5, r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	if (htim == &htim5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a0a      	ldr	r2, [pc, #40]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ee2:	f04f 0100 	mov.w	r1, #0
 8001ee6:	1814      	adds	r4, r2, r0
 8001ee8:	eb43 0501 	adc.w	r5, r3, r1
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001eee:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bcb0      	pop	{r4, r5, r7}
 8001efa:	4770      	bx	lr
 8001efc:	20000140 	.word	0x20000140
 8001f00:	20000118 	.word	0x20000118

08001f04 <micros>:

inline uint64_t micros()
{
 8001f04:	b4b0      	push	{r4, r5, r7}
 8001f06:	af00      	add	r7, sp, #0
	return htim5.Instance->CNT + _micro;
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <micros+0x2c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <micros+0x30>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	1884      	adds	r4, r0, r2
 8001f1c:	eb41 0503 	adc.w	r5, r1, r3
 8001f20:	4622      	mov	r2, r4
 8001f22:	462b      	mov	r3, r5
}
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bcb0      	pop	{r4, r5, r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000140 	.word	0x20000140
 8001f34:	20000118 	.word	0x20000118

08001f38 <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f42:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <UARTRecieveIT+0x54>)
 8001f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <UARTRecieveIT+0x54>)
 8001f4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <UARTRecieveIT+0x58>)
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d010      	beq.n	8001f7c <UARTRecieveIT+0x44>
	{
		data = RxDataBuffer[dataPos];
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <UARTRecieveIT+0x58>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <UARTRecieveIT+0x5c>)
 8001f60:	5cd3      	ldrb	r3, [r2, r3]
 8001f62:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <UARTRecieveIT+0x58>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <UARTRecieveIT+0x54>)
 8001f6c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001f6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001f72:	fb02 f201 	mul.w	r2, r2, r1
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <UARTRecieveIT+0x58>)
 8001f7a:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001f7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	200002d4 	.word	0x200002d4
 8001f90:	20000130 	.word	0x20000130
 8001f94:	200000d4 	.word	0x200000d4

08001f98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <HAL_UART_RxCpltCallback+0x28>)
 8001fa2:	f7fe f91d 	bl	80001e0 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fae:	4904      	ldr	r1, [pc, #16]	; (8001fc0 <HAL_UART_RxCpltCallback+0x28>)
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <HAL_UART_RxCpltCallback+0x2c>)
 8001fb2:	f003 fbf6 	bl	80057a2 <HAL_UART_Transmit>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200000b4 	.word	0x200000b4
 8001fc4:	200002d4 	.word	0x200002d4

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_MspInit+0x4c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002012:	2007      	movs	r0, #7
 8002014:	f001 f8ca 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a33      	ldr	r2, [pc, #204]	; (8002110 <HAL_ADC_MspInit+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d15f      	bne.n	8002106 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a31      	ldr	r2, [pc, #196]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_ADC_MspInit+0xf0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207e:	2301      	movs	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4821      	ldr	r0, [pc, #132]	; (8002118 <HAL_ADC_MspInit+0xf4>)
 8002092:	f001 fccf 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_ADC_MspInit+0xf8>)
 8002098:	4a21      	ldr	r2, [pc, #132]	; (8002120 <HAL_ADC_MspInit+0xfc>)
 800209a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <HAL_ADC_MspInit+0xf8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ae:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020da:	4810      	ldr	r0, [pc, #64]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020dc:	f001 f8a8 	bl	8003230 <HAL_DMA_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80020e6:	f7ff ff6f 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
 80020f0:	4a0a      	ldr	r2, [pc, #40]	; (800211c <HAL_ADC_MspInit+0xf8>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2012      	movs	r0, #18
 80020fc:	f001 f861 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002100:	2012      	movs	r0, #18
 8002102:	f001 f87a 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002106:	bf00      	nop
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40012000 	.word	0x40012000
 8002114:	40023800 	.word	0x40023800
 8002118:	40020000 	.word	0x40020000
 800211c:	20000274 	.word	0x20000274
 8002120:	40026410 	.word	0x40026410

08002124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_SPI_MspInit+0x94>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d133      	bne.n	80021ae <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HAL_SPI_MspInit+0x98>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_SPI_MspInit+0x98>)
 8002150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HAL_SPI_MspInit+0x98>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_SPI_MspInit+0x98>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_SPI_MspInit+0x98>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_SPI_MspInit+0x98>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800217e:	2338      	movs	r3, #56	; 0x38
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800218e:	2306      	movs	r3, #6
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4809      	ldr	r0, [pc, #36]	; (80021c0 <HAL_SPI_MspInit+0x9c>)
 800219a:	f001 fc4b 	bl	8003a34 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2033      	movs	r0, #51	; 0x33
 80021a4:	f001 f80d 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80021a8:	2033      	movs	r0, #51	; 0x33
 80021aa:	f001 f826 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80021ae:	bf00      	nop
 80021b0:	3728      	adds	r7, #40	; 0x28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40003c00 	.word	0x40003c00
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40020400 	.word	0x40020400

080021c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIM_Base_MspInit+0x70>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80021f2:	e01a      	b.n	800222a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_TIM_Base_MspInit+0x78>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d115      	bne.n	800222a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b0d      	ldr	r3, [pc, #52]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <HAL_TIM_Base_MspInit+0x74>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2032      	movs	r0, #50	; 0x32
 8002220:	f000 ffcf 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002224:	2032      	movs	r0, #50	; 0x32
 8002226:	f000 ffe8 	bl	80031fa <HAL_NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40000400 	.word	0x40000400
 8002238:	40023800 	.word	0x40023800
 800223c:	40000c00 	.word	0x40000c00

08002240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <HAL_UART_MspInit+0x94>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d133      	bne.n	80022ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_UART_MspInit+0x98>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_UART_MspInit+0x98>)
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0x98>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x98>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0x98>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_UART_MspInit+0x98>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800229a:	230c      	movs	r3, #12
 800229c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	2302      	movs	r3, #2
 80022a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a6:	2303      	movs	r3, #3
 80022a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022aa:	2307      	movs	r3, #7
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <HAL_UART_MspInit+0x9c>)
 80022b6:	f001 fbbd 	bl	8003a34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2026      	movs	r0, #38	; 0x26
 80022c0:	f000 ff7f 	bl	80031c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022c4:	2026      	movs	r0, #38	; 0x26
 80022c6:	f000 ff98 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 f8f8 	bl	8002520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <ADC_IRQHandler+0x10>)
 800233a:	f000 f954 	bl	80025e6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000022c 	.word	0x2000022c

08002348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART2_IRQHandler+0x10>)
 800234e:	f003 faeb 	bl	8005928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200002d4 	.word	0x200002d4

0800235c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TIM5_IRQHandler+0x10>)
 8002362:	f002 fe41 	bl	8004fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000140 	.word	0x20000140

08002370 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <SPI3_IRQHandler+0x10>)
 8002376:	f002 fa9b 	bl	80048b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200001d4 	.word	0x200001d4

08002384 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA2_Stream0_IRQHandler+0x10>)
 800238a:	f001 f8e9 	bl	8003560 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000274 	.word	0x20000274

08002398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <_sbrk+0x5c>)
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <_sbrk+0x60>)
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d102      	bne.n	80023ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b4:	4b11      	ldr	r3, [pc, #68]	; (80023fc <_sbrk+0x64>)
 80023b6:	4a12      	ldr	r2, [pc, #72]	; (8002400 <_sbrk+0x68>)
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ba:	4b10      	ldr	r3, [pc, #64]	; (80023fc <_sbrk+0x64>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4413      	add	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023c8:	f004 f806 	bl	80063d8 <__errno>
 80023cc:	4603      	mov	r3, r0
 80023ce:	220c      	movs	r2, #12
 80023d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295
 80023d6:	e009      	b.n	80023ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023d8:	4b08      	ldr	r3, [pc, #32]	; (80023fc <_sbrk+0x64>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	4a05      	ldr	r2, [pc, #20]	; (80023fc <_sbrk+0x64>)
 80023e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ea:	68fb      	ldr	r3, [r7, #12]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	20020000 	.word	0x20020000
 80023f8:	00000400 	.word	0x00000400
 80023fc:	20000134 	.word	0x20000134
 8002400:	20000330 	.word	0x20000330

08002404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <SystemInit+0x20>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <SystemInit+0x20>)
 8002410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800242e:	490e      	ldr	r1, [pc, #56]	; (8002468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002444:	4c0b      	ldr	r4, [pc, #44]	; (8002474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002452:	f7ff ffd7 	bl	8002404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002456:	f003 ffc5 	bl	80063e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245a:	f7fe fd35 	bl	8000ec8 <main>
  bx  lr    
 800245e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002468:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800246c:	080081f8 	.word	0x080081f8
  ldr r2, =_sbss
 8002470:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002474:	2000032c 	.word	0x2000032c

08002478 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <DMA1_Stream0_IRQHandler>
	...

0800247c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <HAL_Init+0x40>)
 8002486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800248a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_Init+0x40>)
 8002492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_Init+0x40>)
 800249e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 fe81 	bl	80031ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f808 	bl	80024c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b0:	f7ff fd90 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00

080024c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x54>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_InitTick+0x58>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024da:	fbb2 f3f3 	udiv	r3, r2, r3
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fe99 	bl	8003216 <HAL_SYSTICK_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00e      	b.n	800250c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	d80a      	bhi.n	800250a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f4:	2200      	movs	r2, #0
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f000 fe61 	bl	80031c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002500:	4a06      	ldr	r2, [pc, #24]	; (800251c <HAL_InitTick+0x5c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000024 	.word	0x20000024
 8002518:	2000002c 	.word	0x2000002c
 800251c:	20000028 	.word	0x20000028

08002520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x20>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_IncTick+0x24>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4413      	add	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_IncTick+0x24>)
 8002532:	6013      	str	r3, [r2, #0]
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	2000002c 	.word	0x2000002c
 8002544:	20000318 	.word	0x20000318

08002548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return uwTick;
 800254c:	4b03      	ldr	r3, [pc, #12]	; (800255c <HAL_GetTick+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000318 	.word	0x20000318

08002560 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e033      	b.n	80025de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fd50 	bl	8002024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d118      	bne.n	80025d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a6:	f023 0302 	bic.w	r3, r3, #2
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fba2 	bl	8002cfc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	; 0x40
 80025ce:	e001      	b.n	80025d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b20      	cmp	r3, #32
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d049      	beq.n	80026bc <HAL_ADC_IRQHandler+0xd6>
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d046      	beq.n	80026bc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d105      	bne.n	8002646 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12b      	bne.n	80026ac <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d127      	bne.n	80026ac <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002662:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002666:	2b00      	cmp	r3, #0
 8002668:	d006      	beq.n	8002678 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002674:	2b00      	cmp	r3, #0
 8002676:	d119      	bne.n	80026ac <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0220 	bic.w	r2, r2, #32
 8002686:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f9cb 	bl	8002a48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f06f 0212 	mvn.w	r2, #18
 80026ba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b80      	cmp	r3, #128	; 0x80
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d057      	beq.n	800279e <HAL_ADC_IRQHandler+0x1b8>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d054      	beq.n	800279e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d139      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002720:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d006      	beq.n	8002736 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002732:	2b00      	cmp	r3, #0
 8002734:	d12b      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d124      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11d      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002768:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fc32 	bl	8002ff8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 020c 	mvn.w	r2, #12
 800279c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	bf0c      	ite	eq
 80027c2:	2301      	moveq	r3, #1
 80027c4:	2300      	movne	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <HAL_ADC_IRQHandler+0x21a>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d014      	beq.n	8002800 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10d      	bne.n	8002800 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f93d 	bl	8002a70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f06f 0201 	mvn.w	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0320 	and.w	r3, r3, #32
 800280a:	2b20      	cmp	r3, #32
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_ADC_IRQHandler+0x27a>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0220 	mvn.w	r2, #32
 800284e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f917 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0220 	mvn.w	r2, #32
 800285e:	601a      	str	r2, [r3, #0]
  }
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Start_DMA+0x1e>
 8002882:	2302      	movs	r3, #2
 8002884:	e0ce      	b.n	8002a24 <HAL_ADC_Start_DMA+0x1bc>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d018      	beq.n	80028ce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <HAL_ADC_Start_DMA+0x1c4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5f      	ldr	r2, [pc, #380]	; (8002a30 <HAL_ADC_Start_DMA+0x1c8>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9a      	lsrs	r2, r3, #18
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028c0:	e002      	b.n	80028c8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f9      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028dc:	d107      	bne.n	80028ee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	f040 8086 	bne.w	8002a0a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002928:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293c:	d106      	bne.n	800294c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f023 0206 	bic.w	r2, r3, #6
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
 800294a:	e002      	b.n	8002952 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <HAL_ADC_Start_DMA+0x1cc>)
 800295c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <HAL_ADC_Start_DMA+0x1d0>)
 8002964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4a34      	ldr	r2, [pc, #208]	; (8002a3c <HAL_ADC_Start_DMA+0x1d4>)
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <HAL_ADC_Start_DMA+0x1d8>)
 8002974:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800297e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800298e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	334c      	adds	r3, #76	; 0x4c
 80029aa:	4619      	mov	r1, r3
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f000 fcec 	bl	800338c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10f      	bne.n	80029e0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d129      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	e020      	b.n	8002a22 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_ADC_Start_DMA+0x1dc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11b      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x1ba>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d114      	bne.n	8002a22 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	e00b      	b.n	8002a22 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20000024 	.word	0x20000024
 8002a30:	431bde83 	.word	0x431bde83
 8002a34:	40012300 	.word	0x40012300
 8002a38:	08002ef5 	.word	0x08002ef5
 8002a3c:	08002faf 	.word	0x08002faf
 8002a40:	08002fcb 	.word	0x08002fcb
 8002a44:	40012000 	.word	0x40012000

08002a48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e113      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x244>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d925      	bls.n	8002b10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b1e      	subs	r3, #30
 8002ada:	2207      	movs	r2, #7
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68d9      	ldr	r1, [r3, #12]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	4403      	add	r3, r0
 8002b02:	3b1e      	subs	r3, #30
 8002b04:	409a      	lsls	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	e022      	b.n	8002b56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	2207      	movs	r2, #7
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6919      	ldr	r1, [r3, #16]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4403      	add	r3, r0
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d824      	bhi.n	8002ba8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b05      	subs	r3, #5
 8002b70:	221f      	movs	r2, #31
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b05      	subs	r3, #5
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ba6:	e04c      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d824      	bhi.n	8002bfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b23      	subs	r3, #35	; 0x23
 8002bc2:	221f      	movs	r2, #31
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	3b23      	subs	r3, #35	; 0x23
 8002bec:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	e023      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b41      	subs	r3, #65	; 0x41
 8002c0c:	221f      	movs	r2, #31
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	3b41      	subs	r3, #65	; 0x41
 8002c36:	fa00 f203 	lsl.w	r2, r0, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c42:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_ADC_ConfigChannel+0x250>)
 8002c44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a28      	ldr	r2, [pc, #160]	; (8002cec <HAL_ADC_ConfigChannel+0x254>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d10f      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1d8>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b12      	cmp	r3, #18
 8002c56:	d10b      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <HAL_ADC_ConfigChannel+0x254>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d12b      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x23a>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <HAL_ADC_ConfigChannel+0x258>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d003      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x1f4>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b11      	cmp	r3, #17
 8002c8a:	d122      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_ADC_ConfigChannel+0x258>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d111      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <HAL_ADC_ConfigChannel+0x25c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_ADC_ConfigChannel+0x260>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9a      	lsrs	r2, r3, #18
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cc4:	e002      	b.n	8002ccc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f9      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40012300 	.word	0x40012300
 8002cec:	40012000 	.word	0x40012000
 8002cf0:	10000012 	.word	0x10000012
 8002cf4:	20000024 	.word	0x20000024
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d04:	4b79      	ldr	r3, [pc, #484]	; (8002eec <ADC_Init+0x1f0>)
 8002d06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	021a      	lsls	r2, r3, #8
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6899      	ldr	r1, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <ADC_Init+0x1f4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002da2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	e00f      	b.n	8002dfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0202 	bic.w	r2, r2, #2
 8002e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7e1b      	ldrb	r3, [r3, #24]
 8002e14:	005a      	lsls	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	3b01      	subs	r3, #1
 8002e54:	035a      	lsls	r2, r3, #13
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	e007      	b.n	8002e70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	051a      	lsls	r2, r3, #20
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ea4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002eb2:	025a      	lsls	r2, r3, #9
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	029a      	lsls	r2, r3, #10
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	40012300 	.word	0x40012300
 8002ef0:	0f000001 	.word	0x0f000001

08002ef4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d13c      	bne.n	8002f88 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d12b      	bne.n	8002f80 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d127      	bne.n	8002f80 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d119      	bne.n	8002f80 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0220 	bic.w	r2, r2, #32
 8002f5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fd61 	bl	8002a48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f86:	e00e      	b.n	8002fa6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f7ff fd75 	bl	8002a84 <HAL_ADC_ErrorCallback>
}
 8002f9a:	e004      	b.n	8002fa6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fd4d 	bl	8002a5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2240      	movs	r2, #64	; 0x40
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff fd4a 	bl	8002a84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	; (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <__NVIC_GetPriorityGrouping+0x18>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 0307 	and.w	r3, r3, #7
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	4603      	mov	r3, r0
 8003078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	db0b      	blt.n	800309a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4907      	ldr	r1, [pc, #28]	; (80030a8 <__NVIC_EnableIRQ+0x38>)
 800308a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308e:	095b      	lsrs	r3, r3, #5
 8003090:	2001      	movs	r0, #1
 8003092:	fa00 f202 	lsl.w	r2, r0, r2
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000e100 	.word	0xe000e100

080030ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	6039      	str	r1, [r7, #0]
 80030b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	db0a      	blt.n	80030d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	490c      	ldr	r1, [pc, #48]	; (80030f8 <__NVIC_SetPriority+0x4c>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	440b      	add	r3, r1
 80030d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d4:	e00a      	b.n	80030ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4908      	ldr	r1, [pc, #32]	; (80030fc <__NVIC_SetPriority+0x50>)
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	3b04      	subs	r3, #4
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	440b      	add	r3, r1
 80030ea:	761a      	strb	r2, [r3, #24]
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000e100 	.word	0xe000e100
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003100:	b480      	push	{r7}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f1c3 0307 	rsb	r3, r3, #7
 800311a:	2b04      	cmp	r3, #4
 800311c:	bf28      	it	cs
 800311e:	2304      	movcs	r3, #4
 8003120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3304      	adds	r3, #4
 8003126:	2b06      	cmp	r3, #6
 8003128:	d902      	bls.n	8003130 <NVIC_EncodePriority+0x30>
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3b03      	subs	r3, #3
 800312e:	e000      	b.n	8003132 <NVIC_EncodePriority+0x32>
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	f04f 32ff 	mov.w	r2, #4294967295
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	401a      	ands	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	43d9      	mvns	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	4313      	orrs	r3, r2
         );
}
 800315a:	4618      	mov	r0, r3
 800315c:	3724      	adds	r7, #36	; 0x24
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3b01      	subs	r3, #1
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d301      	bcc.n	800317e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317a:	2301      	movs	r3, #1
 800317c:	e00f      	b.n	800319e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <SysTick_Config+0x40>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3b01      	subs	r3, #1
 8003184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003186:	210f      	movs	r1, #15
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f7ff ff8e 	bl	80030ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <SysTick_Config+0x40>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003196:	4b04      	ldr	r3, [pc, #16]	; (80031a8 <SysTick_Config+0x40>)
 8003198:	2207      	movs	r2, #7
 800319a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000e010 	.word	0xe000e010

080031ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff29 	bl	800300c <__NVIC_SetPriorityGrouping>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031d4:	f7ff ff3e 	bl	8003054 <__NVIC_GetPriorityGrouping>
 80031d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7ff ff8e 	bl	8003100 <NVIC_EncodePriority>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff5d 	bl	80030ac <__NVIC_SetPriority>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff31 	bl	8003070 <__NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffa2 	bl	8003168 <SysTick_Config>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff f984 	bl	8002548 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e099      	b.n	8003380 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326c:	e00f      	b.n	800328e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800326e:	f7ff f96b 	bl	8002548 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b05      	cmp	r3, #5
 800327a:	d908      	bls.n	800328e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2203      	movs	r2, #3
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e078      	b.n	8003380 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e8      	bne.n	800326e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <HAL_DMA_Init+0x158>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d107      	bne.n	80032f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4313      	orrs	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0307 	bic.w	r3, r3, #7
 800330e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b04      	cmp	r3, #4
 8003320:	d117      	bne.n	8003352 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4313      	orrs	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00e      	beq.n	8003352 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fb01 	bl	800393c <DMA_CheckFifoParam>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800334e:	2301      	movs	r3, #1
 8003350:	e016      	b.n	8003380 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fab8 	bl	80038d0 <DMA_CalcBaseAndBitshift>
 8003360:	4603      	mov	r3, r0
 8003362:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	223f      	movs	r2, #63	; 0x3f
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	f010803f 	.word	0xf010803f

0800338c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Start_IT+0x26>
 80033ae:	2302      	movs	r3, #2
 80033b0:	e040      	b.n	8003434 <HAL_DMA_Start_IT+0xa8>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d12f      	bne.n	8003426 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa4a 	bl	8003874 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	223f      	movs	r2, #63	; 0x3f
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0216 	orr.w	r2, r2, #22
 80033fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0208 	orr.w	r2, r2, #8
 8003412:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e005      	b.n	8003432 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800344a:	f7ff f87d 	bl	8002548 <HAL_GetTick>
 800344e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d008      	beq.n	800346e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	; 0x80
 8003460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e052      	b.n	8003514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0216 	bic.w	r2, r2, #22
 800347c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800348c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_DMA_Abort+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0208 	bic.w	r2, r2, #8
 80034ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0201 	bic.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034be:	e013      	b.n	80034e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c0:	f7ff f842 	bl	8002548 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d90c      	bls.n	80034e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2203      	movs	r2, #3
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e015      	b.n	8003514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e4      	bne.n	80034c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	223f      	movs	r2, #63	; 0x3f
 80034fc:	409a      	lsls	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e00c      	b.n	8003554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2205      	movs	r2, #5
 800353e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800356c:	4b92      	ldr	r3, [pc, #584]	; (80037b8 <HAL_DMA_IRQHandler+0x258>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a92      	ldr	r2, [pc, #584]	; (80037bc <HAL_DMA_IRQHandler+0x25c>)
 8003572:	fba2 2303 	umull	r2, r3, r2, r3
 8003576:	0a9b      	lsrs	r3, r3, #10
 8003578:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358a:	2208      	movs	r2, #8
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b8:	2208      	movs	r2, #8
 80035ba:	409a      	lsls	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0201 	orr.w	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2201      	movs	r2, #1
 80035f0:	409a      	lsls	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	2204      	movs	r2, #4
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00b      	beq.n	8003638 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	2204      	movs	r2, #4
 8003626:	409a      	lsls	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f043 0204 	orr.w	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	2210      	movs	r2, #16
 800363e:	409a      	lsls	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d043      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03c      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365a:	2210      	movs	r2, #16
 800365c:	409a      	lsls	r2, r3
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d018      	beq.n	80036a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d024      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e01f      	b.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	4798      	blx	r3
 80036a0:	e016      	b.n	80036d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0208 	bic.w	r2, r2, #8
 80036be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2220      	movs	r2, #32
 80036d6:	409a      	lsls	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 808e 	beq.w	80037fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8086 	beq.w	80037fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2220      	movs	r2, #32
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b05      	cmp	r3, #5
 8003708:	d136      	bne.n	8003778 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0216 	bic.w	r2, r2, #22
 8003718:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003728:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d103      	bne.n	800373a <HAL_DMA_IRQHandler+0x1da>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0208 	bic.w	r2, r2, #8
 8003748:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374e:	223f      	movs	r2, #63	; 0x3f
 8003750:	409a      	lsls	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800376a:	2b00      	cmp	r3, #0
 800376c:	d07d      	beq.n	800386a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	4798      	blx	r3
        }
        return;
 8003776:	e078      	b.n	800386a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01c      	beq.n	80037c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d108      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	2b00      	cmp	r3, #0
 800379a:	d030      	beq.n	80037fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e02b      	b.n	80037fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d027      	beq.n	80037fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
 80037b6:	e022      	b.n	80037fe <HAL_DMA_IRQHandler+0x29e>
 80037b8:	20000024 	.word	0x20000024
 80037bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0210 	bic.w	r2, r2, #16
 80037dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	2b00      	cmp	r3, #0
 8003804:	d032      	beq.n	800386c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d022      	beq.n	8003858 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2205      	movs	r2, #5
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	429a      	cmp	r2, r3
 8003834:	d307      	bcc.n	8003846 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f2      	bne.n	800382a <HAL_DMA_IRQHandler+0x2ca>
 8003844:	e000      	b.n	8003848 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003846:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
 8003868:	e000      	b.n	800386c <HAL_DMA_IRQHandler+0x30c>
        return;
 800386a:	bf00      	nop
    }
  }
}
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop

08003874 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003890:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d108      	bne.n	80038b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038b2:	e007      	b.n	80038c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	60da      	str	r2, [r3, #12]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	3b10      	subs	r3, #16
 80038e0:	4a14      	ldr	r2, [pc, #80]	; (8003934 <DMA_CalcBaseAndBitshift+0x64>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <DMA_CalcBaseAndBitshift+0x68>)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d909      	bls.n	8003912 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	1d1a      	adds	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	659a      	str	r2, [r3, #88]	; 0x58
 8003910:	e007      	b.n	8003922 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	aaaaaaab 	.word	0xaaaaaaab
 8003938:	08007fd0 	.word	0x08007fd0

0800393c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11f      	bne.n	8003996 <DMA_CheckFifoParam+0x5a>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b03      	cmp	r3, #3
 800395a:	d856      	bhi.n	8003a0a <DMA_CheckFifoParam+0xce>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <DMA_CheckFifoParam+0x28>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	08003987 	.word	0x08003987
 800396c:	08003975 	.word	0x08003975
 8003970:	08003a0b 	.word	0x08003a0b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d046      	beq.n	8003a0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e043      	b.n	8003a0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800398e:	d140      	bne.n	8003a12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003994:	e03d      	b.n	8003a12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399e:	d121      	bne.n	80039e4 <DMA_CheckFifoParam+0xa8>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d837      	bhi.n	8003a16 <DMA_CheckFifoParam+0xda>
 80039a6:	a201      	add	r2, pc, #4	; (adr r2, 80039ac <DMA_CheckFifoParam+0x70>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039bd 	.word	0x080039bd
 80039b0:	080039c3 	.word	0x080039c3
 80039b4:	080039bd 	.word	0x080039bd
 80039b8:	080039d5 	.word	0x080039d5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e030      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d025      	beq.n	8003a1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039d2:	e022      	b.n	8003a1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039dc:	d11f      	bne.n	8003a1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039e2:	e01c      	b.n	8003a1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d903      	bls.n	80039f2 <DMA_CheckFifoParam+0xb6>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d003      	beq.n	80039f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039f0:	e018      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
      break;
 80039f6:	e015      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00e      	beq.n	8003a22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	73fb      	strb	r3, [r7, #15]
      break;
 8003a08:	e00b      	b.n	8003a22 <DMA_CheckFifoParam+0xe6>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e00a      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a0e:	bf00      	nop
 8003a10:	e008      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a12:	bf00      	nop
 8003a14:	e006      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a16:	bf00      	nop
 8003a18:	e004      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e002      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a1e:	bf00      	nop
 8003a20:	e000      	b.n	8003a24 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
    }
  } 
  
  return status; 
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	; 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e159      	b.n	8003d04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	f040 8148 	bne.w	8003cfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d005      	beq.n	8003a86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d130      	bne.n	8003ae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003abc:	2201      	movs	r2, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 0201 	and.w	r2, r3, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d017      	beq.n	8003b24 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d123      	bne.n	8003b78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	220f      	movs	r2, #15
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3208      	adds	r2, #8
 8003b72:	69b9      	ldr	r1, [r7, #24]
 8003b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	2203      	movs	r2, #3
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0203 	and.w	r2, r3, #3
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a2 	beq.w	8003cfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b57      	ldr	r3, [pc, #348]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bca:	4b54      	ldr	r3, [pc, #336]	; (8003d1c <HAL_GPIO_Init+0x2e8>)
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bd6:	4a52      	ldr	r2, [pc, #328]	; (8003d20 <HAL_GPIO_Init+0x2ec>)
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	089b      	lsrs	r3, r3, #2
 8003bdc:	3302      	adds	r3, #2
 8003bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	220f      	movs	r2, #15
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43db      	mvns	r3, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a49      	ldr	r2, [pc, #292]	; (8003d24 <HAL_GPIO_Init+0x2f0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d019      	beq.n	8003c36 <HAL_GPIO_Init+0x202>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a48      	ldr	r2, [pc, #288]	; (8003d28 <HAL_GPIO_Init+0x2f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_GPIO_Init+0x1fe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a47      	ldr	r2, [pc, #284]	; (8003d2c <HAL_GPIO_Init+0x2f8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <HAL_GPIO_Init+0x1fa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a46      	ldr	r2, [pc, #280]	; (8003d30 <HAL_GPIO_Init+0x2fc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <HAL_GPIO_Init+0x1f6>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a45      	ldr	r2, [pc, #276]	; (8003d34 <HAL_GPIO_Init+0x300>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d101      	bne.n	8003c26 <HAL_GPIO_Init+0x1f2>
 8003c22:	2304      	movs	r3, #4
 8003c24:	e008      	b.n	8003c38 <HAL_GPIO_Init+0x204>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x204>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e004      	b.n	8003c38 <HAL_GPIO_Init+0x204>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_Init+0x204>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_GPIO_Init+0x204>
 8003c36:	2300      	movs	r3, #0
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4093      	lsls	r3, r2
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c48:	4935      	ldr	r1, [pc, #212]	; (8003d20 <HAL_GPIO_Init+0x2ec>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c56:	4b38      	ldr	r3, [pc, #224]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7a:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c80:	4b2d      	ldr	r3, [pc, #180]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca4:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003caa:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cce:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	; (8003d38 <HAL_GPIO_Init+0x304>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	f67f aea2 	bls.w	8003a50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020800 	.word	0x40020800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40013c00 	.word	0x40013c00

08003d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	887b      	ldrh	r3, [r7, #2]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e001      	b.n	8003d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d7c:	787b      	ldrb	r3, [r7, #1]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d82:	887a      	ldrh	r2, [r7, #2]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d88:	e003      	b.n	8003d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	041a      	lsls	r2, r3, #16
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e264      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dbe:	4ba3      	ldr	r3, [pc, #652]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4ba0      	ldr	r3, [pc, #640]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d112      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd6:	4b9d      	ldr	r3, [pc, #628]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	4b99      	ldr	r3, [pc, #612]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x108>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d157      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e23f      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x74>
 8003e06:	4b91      	ldr	r3, [pc, #580]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a90      	ldr	r2, [pc, #576]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b8b      	ldr	r3, [pc, #556]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a8a      	ldr	r2, [pc, #552]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b88      	ldr	r3, [pc, #544]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a87      	ldr	r2, [pc, #540]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e38:	4b84      	ldr	r3, [pc, #528]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a83      	ldr	r2, [pc, #524]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b81      	ldr	r3, [pc, #516]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a80      	ldr	r2, [pc, #512]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fe fb76 	bl	8002548 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e60:	f7fe fb72 	bl	8002548 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e204      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b76      	ldr	r3, [pc, #472]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xc0>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe fb62 	bl	8002548 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fb5e 	bl	8002548 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1f0      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0xe8>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d063      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec2:	4b62      	ldr	r3, [pc, #392]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d11c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1c4      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4952      	ldr	r1, [pc, #328]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f06:	e03a      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCC_OscConfig+0x2b0>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7fe fb17 	bl	8002548 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7fe fb13 	bl	8002548 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1a5      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4940      	ldr	r1, [pc, #256]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	e015      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f52:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCC_OscConfig+0x2b0>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe faf6 	bl	8002548 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fe faf2 	bl	8002548 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e184      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	4b36      	ldr	r3, [pc, #216]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d030      	beq.n	8003fec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_RCC_OscConfig+0x2b4>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7fe fad6 	bl	8002548 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7fe fad2 	bl	8002548 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e164      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	4b26      	ldr	r3, [pc, #152]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x200>
 8003fbe:	e015      	b.n	8003fec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc0:	4b24      	ldr	r3, [pc, #144]	; (8004054 <HAL_RCC_OscConfig+0x2b4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7fe fabf 	bl	8002548 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fe fabb 	bl	8002548 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e14d      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8003fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a0 	beq.w	800413a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	4a0e      	ldr	r2, [pc, #56]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	; 0x40
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <HAL_RCC_OscConfig+0x2ac>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x2b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <HAL_RCC_OscConfig+0x2b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a07      	ldr	r2, [pc, #28]	; (8004058 <HAL_RCC_OscConfig+0x2b8>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004042:	f7fe fa81 	bl	8002548 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	e011      	b.n	800406e <HAL_RCC_OscConfig+0x2ce>
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	42470000 	.word	0x42470000
 8004054:	42470e80 	.word	0x42470e80
 8004058:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800405c:	f7fe fa74 	bl	8002548 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e106      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCC_OscConfig+0x4e4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d106      	bne.n	8004090 <HAL_RCC_OscConfig+0x2f0>
 8004082:	4b81      	ldr	r3, [pc, #516]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a80      	ldr	r2, [pc, #512]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	e01c      	b.n	80040ca <HAL_RCC_OscConfig+0x32a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d10c      	bne.n	80040b2 <HAL_RCC_OscConfig+0x312>
 8004098:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4a7a      	ldr	r2, [pc, #488]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6713      	str	r3, [r2, #112]	; 0x70
 80040a4:	4b78      	ldr	r3, [pc, #480]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a77      	ldr	r2, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70
 80040b0:	e00b      	b.n	80040ca <HAL_RCC_OscConfig+0x32a>
 80040b2:	4b75      	ldr	r3, [pc, #468]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a74      	ldr	r2, [pc, #464]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	4b72      	ldr	r3, [pc, #456]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a71      	ldr	r2, [pc, #452]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d015      	beq.n	80040fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d2:	f7fe fa39 	bl	8002548 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d8:	e00a      	b.n	80040f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040da:	f7fe fa35 	bl	8002548 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e0c5      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f0:	4b65      	ldr	r3, [pc, #404]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0ee      	beq.n	80040da <HAL_RCC_OscConfig+0x33a>
 80040fc:	e014      	b.n	8004128 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fa23 	bl	8002548 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004104:	e00a      	b.n	800411c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004106:	f7fe fa1f 	bl	8002548 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	f241 3288 	movw	r2, #5000	; 0x1388
 8004114:	4293      	cmp	r3, r2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0af      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411c:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1ee      	bne.n	8004106 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d105      	bne.n	800413a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412e:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a55      	ldr	r2, [pc, #340]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 809b 	beq.w	800427a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004144:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d05c      	beq.n	800420a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b02      	cmp	r3, #2
 8004156:	d141      	bne.n	80041dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004158:	4b4c      	ldr	r3, [pc, #304]	; (800428c <HAL_RCC_OscConfig+0x4ec>)
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fe f9f3 	bl	8002548 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004166:	f7fe f9ef 	bl	8002548 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e081      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f0      	bne.n	8004166 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	019b      	lsls	r3, r3, #6
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	085b      	lsrs	r3, r3, #1
 800419c:	3b01      	subs	r3, #1
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	431a      	orrs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	4937      	ldr	r1, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ae:	4b37      	ldr	r3, [pc, #220]	; (800428c <HAL_RCC_OscConfig+0x4ec>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b4:	f7fe f9c8 	bl	8002548 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe f9c4 	bl	8002548 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e056      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ce:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x41c>
 80041da:	e04e      	b.n	800427a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041dc:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCC_OscConfig+0x4ec>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fe f9b1 	bl	8002548 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ea:	f7fe f9ad 	bl	8002548 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e03f      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fc:	4b22      	ldr	r3, [pc, #136]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <HAL_RCC_OscConfig+0x44a>
 8004208:	e037      	b.n	800427a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e032      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <HAL_RCC_OscConfig+0x4e8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d028      	beq.n	8004276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d121      	bne.n	8004276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423c:	429a      	cmp	r2, r3
 800423e:	d11a      	bne.n	8004276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004246:	4013      	ands	r3, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800424e:	4293      	cmp	r3, r2
 8004250:	d111      	bne.n	8004276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	085b      	lsrs	r3, r3, #1
 800425e:	3b01      	subs	r3, #1
 8004260:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d107      	bne.n	8004276 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40007000 	.word	0x40007000
 8004288:	40023800 	.word	0x40023800
 800428c:	42470060 	.word	0x42470060

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0cc      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b68      	ldr	r3, [pc, #416]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90c      	bls.n	80042cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d119      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434a:	2b03      	cmp	r3, #3
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e06f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e067      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b37      	ldr	r3, [pc, #220]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4934      	ldr	r1, [pc, #208]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7fe f8e2 	bl	8002548 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7fe f8de 	bl	8002548 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	; 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e04f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d20c      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f842 	bl	80024c0 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	08007fb8 	.word	0x08007fb8
 8004454:	20000024 	.word	0x20000024
 8004458:	20000028 	.word	0x20000028

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	2300      	movs	r3, #0
 800446e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b67      	ldr	r3, [pc, #412]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80bd 	bhi.w	8004600 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e0b7      	b.n	8004600 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004492:	60bb      	str	r3, [r7, #8]
       break;
 8004494:	e0b7      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b61      	ldr	r3, [pc, #388]	; (800461c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004498:	60bb      	str	r3, [r7, #8]
      break;
 800449a:	e0b4      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b5d      	ldr	r3, [pc, #372]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d04d      	beq.n	800454e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b58      	ldr	r3, [pc, #352]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	461a      	mov	r2, r3
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	ea02 0800 	and.w	r8, r2, r0
 80044ca:	ea03 0901 	and.w	r9, r3, r1
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	014b      	lsls	r3, r1, #5
 80044dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044e0:	0142      	lsls	r2, r0, #5
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	ebb0 0008 	subs.w	r0, r0, r8
 80044ea:	eb61 0109 	sbc.w	r1, r1, r9
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	018b      	lsls	r3, r1, #6
 80044f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044fc:	0182      	lsls	r2, r0, #6
 80044fe:	1a12      	subs	r2, r2, r0
 8004500:	eb63 0301 	sbc.w	r3, r3, r1
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	00d9      	lsls	r1, r3, #3
 800450e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004512:	00d0      	lsls	r0, r2, #3
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	eb12 0208 	adds.w	r2, r2, r8
 800451c:	eb43 0309 	adc.w	r3, r3, r9
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0259      	lsls	r1, r3, #9
 800452a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800452e:	0250      	lsls	r0, r2, #9
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4610      	mov	r0, r2
 8004536:	4619      	mov	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	461a      	mov	r2, r3
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	f7fc fb44 	bl	8000bcc <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4613      	mov	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	e04a      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	099b      	lsrs	r3, r3, #6
 8004554:	461a      	mov	r2, r3
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	ea02 0400 	and.w	r4, r2, r0
 8004566:	ea03 0501 	and.w	r5, r3, r1
 800456a:	4620      	mov	r0, r4
 800456c:	4629      	mov	r1, r5
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	014b      	lsls	r3, r1, #5
 8004578:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800457c:	0142      	lsls	r2, r0, #5
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	1b00      	subs	r0, r0, r4
 8004584:	eb61 0105 	sbc.w	r1, r1, r5
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	018b      	lsls	r3, r1, #6
 8004592:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004596:	0182      	lsls	r2, r0, #6
 8004598:	1a12      	subs	r2, r2, r0
 800459a:	eb63 0301 	sbc.w	r3, r3, r1
 800459e:	f04f 0000 	mov.w	r0, #0
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	00d9      	lsls	r1, r3, #3
 80045a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045ac:	00d0      	lsls	r0, r2, #3
 80045ae:	4602      	mov	r2, r0
 80045b0:	460b      	mov	r3, r1
 80045b2:	1912      	adds	r2, r2, r4
 80045b4:	eb45 0303 	adc.w	r3, r5, r3
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0299      	lsls	r1, r3, #10
 80045c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045c6:	0290      	lsls	r0, r2, #10
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4610      	mov	r0, r2
 80045ce:	4619      	mov	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f04f 0300 	mov.w	r3, #0
 80045d8:	f7fc faf8 	bl	8000bcc <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	3301      	adds	r3, #1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	60bb      	str	r3, [r7, #8]
      break;
 80045fe:	e002      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004602:	60bb      	str	r3, [r7, #8]
      break;
 8004604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004606:	68bb      	ldr	r3, [r7, #8]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	00f42400 	.word	0x00f42400
 800461c:	007a1200 	.word	0x007a1200

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCC_GetHCLKFreq+0x14>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000024 	.word	0x20000024

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800463c:	f7ff fff0 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004640:	4602      	mov	r2, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4903      	ldr	r1, [pc, #12]	; (800465c <HAL_RCC_GetPCLK1Freq+0x24>)
 800464e:	5ccb      	ldrb	r3, [r1, r3]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	08007fc8 	.word	0x08007fc8

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004664:	f7ff ffdc 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0b5b      	lsrs	r3, r3, #13
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	08007fc8 	.word	0x08007fc8

08004688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e07b      	b.n	8004792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046aa:	d009      	beq.n	80046c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	61da      	str	r2, [r3, #28]
 80046b2:	e005      	b.n	80046c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fd fd22 	bl	8002124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004744:	ea42 0103 	orr.w	r1, r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	0c1b      	lsrs	r3, r3, #16
 800475e:	f003 0104 	and.w	r1, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f003 0210 	and.w	r2, r3, #16
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_SPI_Transmit_IT+0x20>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e06f      	b.n	800489c <HAL_SPI_Transmit_IT+0x100>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d002      	beq.n	80047d0 <HAL_SPI_Transmit_IT+0x34>
 80047ca:	88fb      	ldrh	r3, [r7, #6]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d102      	bne.n	80047d6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047d4:	e05d      	b.n	8004892 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d002      	beq.n	80047e8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e6:	e054      	b.n	8004892 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2203      	movs	r2, #3
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_SPI_Transmit_IT+0x10c>)
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
 800482e:	e002      	b.n	8004836 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_SPI_Transmit_IT+0x110>)
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483e:	d10f      	bne.n	8004860 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800486e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d008      	beq.n	8004890 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e000      	b.n	8004892 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8004890:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800489a:	7dfb      	ldrb	r3, [r7, #23]
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	08004b33 	.word	0x08004b33
 80048ac:	08004aed 	.word	0x08004aed

080048b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10f      	bne.n	80048f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
    return;
 80048f2:	e0d7      	b.n	8004aa4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	085b      	lsrs	r3, r3, #1
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_SPI_IRQHandler+0x66>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	09db      	lsrs	r3, r3, #7
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
    return;
 8004914:	e0c6      	b.n	8004aa4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_SPI_IRQHandler+0x8c>
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	099b      	lsrs	r3, r3, #6
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	0a1b      	lsrs	r3, r3, #8
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80b4 	beq.w	8004aa4 <HAL_SPI_IRQHandler+0x1f4>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80ad 	beq.w	8004aa4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d023      	beq.n	800499e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b03      	cmp	r3, #3
 8004960:	d011      	beq.n	8004986 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004966:	f043 0204 	orr.w	r2, r3, #4
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	e00b      	b.n	800499e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	613b      	str	r3, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	613b      	str	r3, [r7, #16]
 800499a:	693b      	ldr	r3, [r7, #16]
        return;
 800499c:	e082      	b.n	8004aa4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d014      	beq.n	80049d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00c      	beq.n	80049fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e4:	f043 0208 	orr.w	r2, r3, #8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]
 80049f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04f      	beq.n	8004aa2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a10:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_SPI_IRQHandler+0x17e>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d034      	beq.n	8004a98 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0203 	bic.w	r2, r2, #3
 8004a3c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4a:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_SPI_IRQHandler+0x1fc>)
 8004a4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe fd62 	bl	800351c <HAL_DMA_Abort_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d005      	beq.n	8004a6a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	4a0d      	ldr	r2, [pc, #52]	; (8004aac <HAL_SPI_IRQHandler+0x1fc>)
 8004a78:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fd4c 	bl	800351c <HAL_DMA_Abort_IT>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004a96:	e003      	b.n	8004aa0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f809 	bl	8004ab0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004a9e:	e000      	b.n	8004aa2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004aa0:	bf00      	nop
    return;
 8004aa2:	bf00      	nop
  }
}
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	08004ac5 	.word	0x08004ac5

08004ab0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff ffe6 	bl	8004ab0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f8f1 	bl	8004d0c <SPI_CloseTx_ISR>
  }
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	881a      	ldrh	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d102      	bne.n	8004b6e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f8cf 	bl	8004d0c <SPI_CloseTx_ISR>
  }
}
 8004b6e:	bf00      	nop
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b88:	f7fd fcde 	bl	8002548 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	4413      	add	r3, r2
 8004b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b98:	f7fd fcd6 	bl	8002548 <HAL_GetTick>
 8004b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	015b      	lsls	r3, r3, #5
 8004ba4:	0d1b      	lsrs	r3, r3, #20
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bae:	e054      	b.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb6:	d050      	beq.n	8004c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb8:	f7fd fcc6 	bl	8002548 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d902      	bls.n	8004bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d13d      	bne.n	8004c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004be6:	d111      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf0:	d004      	beq.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfa:	d107      	bne.n	8004c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c14:	d10f      	bne.n	8004c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e017      	b.n	8004c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4013      	ands	r3, r2
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d19b      	bne.n	8004bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3720      	adds	r7, #32
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000024 	.word	0x20000024

08004c88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <SPI_EndRxTxTransaction+0x7c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <SPI_EndRxTxTransaction+0x80>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0d5b      	lsrs	r3, r3, #21
 8004ca0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
 8004ca8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cb2:	d112      	bne.n	8004cda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff ff5a 	bl	8004b78 <SPI_WaitFlagStateUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00f      	b.n	8004cfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d0f2      	beq.n	8004cda <SPI_EndRxTxTransaction+0x52>
 8004cf4:	e000      	b.n	8004cf8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004cf6:	bf00      	nop
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000024 	.word	0x20000024
 8004d08:	165e9f81 	.word	0x165e9f81

08004d0c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004d14:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <SPI_CloseTx_ISR+0xbc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <SPI_CloseTx_ISR+0xc0>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0a5b      	lsrs	r3, r3, #9
 8004d20:	2264      	movs	r2, #100	; 0x64
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d28:	f7fd fc0e 	bl	8002548 <HAL_GetTick>
 8004d2c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	f043 0220 	orr.w	r2, r3, #32
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d40:	e009      	b.n	8004d56 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0eb      	beq.n	8004d2e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d64:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	2164      	movs	r1, #100	; 0x64
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ff8c 	bl	8004c88 <SPI_EndRxTxTransaction>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	f043 0220 	orr.w	r2, r3, #32
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fe7d 	bl	8004ab0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004db6:	e002      	b.n	8004dbe <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7fd f86f 	bl	8001e9c <HAL_SPI_TxCpltCallback>
}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000024 	.word	0x20000024
 8004dcc:	057619f1 	.word	0x057619f1

08004dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd f9e4 	bl	80021c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fade 	bl	80053d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e03c      	b.n	8004f02 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_TIM_Base_Start+0xa0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_TIM_Base_Start+0x5c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea2:	d013      	beq.n	8004ecc <HAL_TIM_Base_Start+0x5c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <HAL_TIM_Base_Start+0xa4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_TIM_Base_Start+0x5c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_TIM_Base_Start+0xa8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIM_Base_Start+0x5c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <HAL_TIM_Base_Start+0xac>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_Base_Start+0x5c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_TIM_Base_Start+0xb0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d010      	beq.n	8004f00 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e007      	b.n	8004f00 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000

08004f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e044      	b.n	8004fc6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d018      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d013      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_TIM_Base_Start_IT+0xb8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x6c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d010      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	e007      	b.n	8004fc4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40000400 	.word	0x40000400
 8004fdc:	40000800 	.word	0x40000800
 8004fe0:	40000c00 	.word	0x40000c00
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d122      	bne.n	8005044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b02      	cmp	r3, #2
 800500a:	d11b      	bne.n	8005044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0202 	mvn.w	r2, #2
 8005014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f9b2 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8005030:	e005      	b.n	800503e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9a4 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9b5 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b04      	cmp	r3, #4
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b04      	cmp	r3, #4
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0204 	mvn.w	r2, #4
 8005068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f988 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f97a 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f98b 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0208 	mvn.w	r2, #8
 80050bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2204      	movs	r2, #4
 80050c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f95e 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f950 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f961 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b10      	cmp	r3, #16
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b10      	cmp	r3, #16
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0210 	mvn.w	r2, #16
 8005110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2208      	movs	r2, #8
 8005116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f934 	bl	8005394 <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f926 	bl	8005380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f937 	bl	80053a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b01      	cmp	r3, #1
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0201 	mvn.w	r2, #1
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fc feae 	bl	8001ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b80      	cmp	r3, #128	; 0x80
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 faae 	bl	80056f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8fc 	bl	80053bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0220 	mvn.w	r2, #32
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa78 	bl	80056e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <HAL_TIM_ConfigClockSource+0x18>
 800520c:	2302      	movs	r3, #2
 800520e:	e0b3      	b.n	8005378 <HAL_TIM_ConfigClockSource+0x180>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800522e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005236:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005248:	d03e      	beq.n	80052c8 <HAL_TIM_ConfigClockSource+0xd0>
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	f200 8087 	bhi.w	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	f000 8085 	beq.w	8005364 <HAL_TIM_ConfigClockSource+0x16c>
 800525a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525e:	d87f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005260:	2b70      	cmp	r3, #112	; 0x70
 8005262:	d01a      	beq.n	800529a <HAL_TIM_ConfigClockSource+0xa2>
 8005264:	2b70      	cmp	r3, #112	; 0x70
 8005266:	d87b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005268:	2b60      	cmp	r3, #96	; 0x60
 800526a:	d050      	beq.n	800530e <HAL_TIM_ConfigClockSource+0x116>
 800526c:	2b60      	cmp	r3, #96	; 0x60
 800526e:	d877      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005270:	2b50      	cmp	r3, #80	; 0x50
 8005272:	d03c      	beq.n	80052ee <HAL_TIM_ConfigClockSource+0xf6>
 8005274:	2b50      	cmp	r3, #80	; 0x50
 8005276:	d873      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d058      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x136>
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d86f      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005280:	2b30      	cmp	r3, #48	; 0x30
 8005282:	d064      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x156>
 8005284:	2b30      	cmp	r3, #48	; 0x30
 8005286:	d86b      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005288:	2b20      	cmp	r3, #32
 800528a:	d060      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x156>
 800528c:	2b20      	cmp	r3, #32
 800528e:	d867      	bhi.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
 8005290:	2b00      	cmp	r3, #0
 8005292:	d05c      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x156>
 8005294:	2b10      	cmp	r3, #16
 8005296:	d05a      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005298:	e062      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f000 f98b 	bl	80055c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	609a      	str	r2, [r3, #8]
      break;
 80052c6:	e04e      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	6899      	ldr	r1, [r3, #8]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f000 f974 	bl	80055c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	609a      	str	r2, [r3, #8]
      break;
 80052ec:	e03b      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f000 f8e8 	bl	80054d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2150      	movs	r1, #80	; 0x50
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f941 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 800530c:	e02b      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 f907 	bl	800552e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2160      	movs	r1, #96	; 0x60
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f931 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 800532c:	e01b      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 f8c8 	bl	80054d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f921 	bl	800558e <TIM_ITRx_SetConfig>
      break;
 800534c:	e00b      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f000 f918 	bl	800558e <TIM_ITRx_SetConfig>
        break;
 800535e:	e002      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005364:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a34      	ldr	r2, [pc, #208]	; (80054b4 <TIM_Base_SetConfig+0xe4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <TIM_Base_SetConfig+0xe8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a30      	ldr	r2, [pc, #192]	; (80054bc <TIM_Base_SetConfig+0xec>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x38>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a2f      	ldr	r2, [pc, #188]	; (80054c0 <TIM_Base_SetConfig+0xf0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a25      	ldr	r2, [pc, #148]	; (80054b4 <TIM_Base_SetConfig+0xe4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005428:	d017      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a22      	ldr	r2, [pc, #136]	; (80054b8 <TIM_Base_SetConfig+0xe8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a21      	ldr	r2, [pc, #132]	; (80054bc <TIM_Base_SetConfig+0xec>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00f      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a20      	ldr	r2, [pc, #128]	; (80054c0 <TIM_Base_SetConfig+0xf0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d00b      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <TIM_Base_SetConfig+0xf4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d007      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <TIM_Base_SetConfig+0xf8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d003      	beq.n	800545a <TIM_Base_SetConfig+0x8a>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <TIM_Base_SetConfig+0xfc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d108      	bne.n	800546c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <TIM_Base_SetConfig+0xe4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d103      	bne.n	80054a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	615a      	str	r2, [r3, #20]
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400
 80054cc:	40014800 	.word	0x40014800

080054d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f023 0201 	bic.w	r2, r3, #1
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f023 030a 	bic.w	r3, r3, #10
 800550c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552e:	b480      	push	{r7}
 8005530:	b087      	sub	sp, #28
 8005532:	af00      	add	r7, sp, #0
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	f023 0210 	bic.w	r2, r3, #16
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	031b      	lsls	r3, r3, #12
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800556a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558e:	b480      	push	{r7}
 8005590:	b085      	sub	sp, #20
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f043 0307 	orr.w	r3, r3, #7
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	609a      	str	r2, [r3, #8]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	609a      	str	r2, [r3, #8]
}
 80055f8:	bf00      	nop
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005618:	2302      	movs	r3, #2
 800561a:	e050      	b.n	80056be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1c      	ldr	r2, [pc, #112]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005668:	d013      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a18      	ldr	r2, [pc, #96]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d00e      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a13      	ldr	r2, [pc, #76]	; (80056dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d10c      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40014000 	.word	0x40014000

080056e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e03f      	b.n	800579a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d106      	bne.n	8005734 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fc fd86 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800574a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fc7b 	bl	8006048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005760:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005770:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005780:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b08a      	sub	sp, #40	; 0x28
 80057a6:	af02      	add	r7, sp, #8
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	d17c      	bne.n	80058bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d002      	beq.n	80057ce <HAL_UART_Transmit+0x2c>
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e075      	b.n	80058be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_UART_Transmit+0x3e>
 80057dc:	2302      	movs	r3, #2
 80057de:	e06e      	b.n	80058be <HAL_UART_Transmit+0x11c>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2221      	movs	r2, #33	; 0x21
 80057f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057f6:	f7fc fea7 	bl	8002548 <HAL_GetTick>
 80057fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	88fa      	ldrh	r2, [r7, #6]
 8005800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d108      	bne.n	8005824 <HAL_UART_Transmit+0x82>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e003      	b.n	800582c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005828:	2300      	movs	r3, #0
 800582a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005834:	e02a      	b.n	800588c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 fa3d 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e036      	b.n	80058be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005864:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	3302      	adds	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e007      	b.n	800587e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	781a      	ldrb	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1cf      	bne.n	8005836 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2200      	movs	r2, #0
 800589e:	2140      	movs	r1, #64	; 0x40
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa0d 	bl	8005cc0 <UART_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e006      	b.n	80058be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058b8:	2300      	movs	r3, #0
 80058ba:	e000      	b.n	80058be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	4613      	mov	r3, r2
 80058d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d11d      	bne.n	800591c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_UART_Receive_IT+0x26>
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e016      	b.n	800591e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Receive_IT+0x38>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e00f      	b.n	800591e <HAL_UART_Receive_IT+0x58>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	461a      	mov	r2, r3
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fa1e 	bl	8005d54 <UART_Start_Receive_IT>
 8005918:	4603      	mov	r3, r0
 800591a:	e000      	b.n	800591e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800591c:	2302      	movs	r3, #2
  }
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_UART_IRQHandler+0x52>
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fad1 	bl	8005f1a <UART_Receive_IT>
      return;
 8005978:	e17c      	b.n	8005c74 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80b1 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x1bc>
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <HAL_UART_IRQHandler+0x70>
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 80a6 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_UART_IRQHandler+0x90>
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	f043 0201 	orr.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f003 0304 	and.w	r3, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_UART_IRQHandler+0xb0>
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f043 0202 	orr.w	r2, r3, #2
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <HAL_UART_IRQHandler+0xd0>
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	f043 0204 	orr.w	r2, r3, #4
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00f      	beq.n	8005a22 <HAL_UART_IRQHandler+0xfa>
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <HAL_UART_IRQHandler+0xee>
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f043 0208 	orr.w	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 811f 	beq.w	8005c6a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_UART_IRQHandler+0x11e>
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fa6a 	bl	8005f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b40      	cmp	r3, #64	; 0x40
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	f003 0308 	and.w	r3, r3, #8
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <HAL_UART_IRQHandler+0x146>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d031      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f9aa 	bl	8005dc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d123      	bne.n	8005aca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d013      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9e:	4a77      	ldr	r2, [pc, #476]	; (8005c7c <HAL_UART_IRQHandler+0x354>)
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fd fd38 	bl	800351c <HAL_DMA_Abort_IT>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005abc:	4610      	mov	r0, r2
 8005abe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00e      	b.n	8005ae0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8e6 	bl	8005c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e00a      	b.n	8005ae0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8e2 	bl	8005c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad0:	e006      	b.n	8005ae0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8de 	bl	8005c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ade:	e0c4      	b.n	8005c6a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	bf00      	nop
    return;
 8005ae2:	e0c2      	b.n	8005c6a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	f040 80a2 	bne.w	8005c32 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 809c 	beq.w	8005c32 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 8096 	beq.w	8005c32 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d14f      	bne.n	8005bca <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b34:	8a3b      	ldrh	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f000 8099 	beq.w	8005c6e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b40:	8a3a      	ldrh	r2, [r7, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f080 8093 	bcs.w	8005c6e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8a3a      	ldrh	r2, [r7, #16]
 8005b4c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b58:	d02b      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b68:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0201 	bic.w	r2, r2, #1
 8005b78:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0210 	bic.w	r2, r2, #16
 8005ba6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd fc45 	bl	800343c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f870 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005bc8:	e051      	b.n	8005c6e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d047      	beq.n	8005c72 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005be2:	8a7b      	ldrh	r3, [r7, #18]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d044      	beq.n	8005c72 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68da      	ldr	r2, [r3, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bf6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0210 	bic.w	r2, r2, #16
 8005c24:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c26:	8a7b      	ldrh	r3, [r7, #18]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f83c 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c30:	e01f      	b.n	8005c72 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_UART_IRQHandler+0x326>
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f8ff 	bl	8005e4a <UART_Transmit_IT>
    return;
 8005c4c:	e012      	b.n	8005c74 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <HAL_UART_IRQHandler+0x34c>
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f941 	bl	8005eea <UART_EndTransmit_IT>
    return;
 8005c68:	e004      	b.n	8005c74 <HAL_UART_IRQHandler+0x34c>
    return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c72:	bf00      	nop
  }
}
 8005c74:	3728      	adds	r7, #40	; 0x28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	08005e23 	.word	0x08005e23

08005c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd0:	e02c      	b.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d028      	beq.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce0:	f7fc fc32 	bl	8002548 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d21d      	bcs.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cfe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e00f      	b.n	8005d4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4013      	ands	r3, r2
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d0c3      	beq.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2222      	movs	r2, #34	; 0x22
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695a      	ldr	r2, [r3, #20]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0220 	orr.w	r2, r2, #32
 8005db8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695a      	ldr	r2, [r3, #20]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f022 0201 	bic.w	r2, r2, #1
 8005dee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0210 	bic.w	r2, r2, #16
 8005e06:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ff29 	bl	8005c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b21      	cmp	r3, #33	; 0x21
 8005e5c:	d13e      	bne.n	8005edc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e66:	d114      	bne.n	8005e92 <UART_Transmit_IT+0x48>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d110      	bne.n	8005e92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	621a      	str	r2, [r3, #32]
 8005e90:	e008      	b.n	8005ea4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6211      	str	r1, [r2, #32]
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68da      	ldr	r2, [r3, #12]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e000      	b.n	8005ede <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005edc:	2302      	movs	r3, #2
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b082      	sub	sp, #8
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff feb8 	bl	8005c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b22      	cmp	r3, #34	; 0x22
 8005f2c:	f040 8087 	bne.w	800603e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f38:	d117      	bne.n	8005f6a <UART_Receive_IT+0x50>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d113      	bne.n	8005f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	1c9a      	adds	r2, r3, #2
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	; 0x28
 8005f68:	e026      	b.n	8005fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f7c:	d007      	beq.n	8005f8e <UART_Receive_IT+0x74>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <UART_Receive_IT+0x82>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d106      	bne.n	8005f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e008      	b.n	8005fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d136      	bne.n	800603a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0220 	bic.w	r2, r2, #32
 8005fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0201 	bic.w	r2, r2, #1
 8005ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	d10e      	bne.n	800602a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0210 	bic.w	r2, r2, #16
 800601a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fe40 	bl	8005ca8 <HAL_UARTEx_RxEventCallback>
 8006028:	e002      	b.n	8006030 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fb ffb4 	bl	8001f98 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e002      	b.n	8006040 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	e000      	b.n	8006040 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800603e:	2302      	movs	r3, #2
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604c:	b09f      	sub	sp, #124	; 0x7c
 800604e:	af00      	add	r7, sp, #0
 8006050:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800605c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800605e:	68d9      	ldr	r1, [r3, #12]
 8006060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	ea40 0301 	orr.w	r3, r0, r1
 8006068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800606a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	431a      	orrs	r2, r3
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	4313      	orrs	r3, r2
 8006080:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800608c:	f021 010c 	bic.w	r1, r1, #12
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006096:	430b      	orrs	r3, r1
 8006098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a6:	6999      	ldr	r1, [r3, #24]
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	ea40 0301 	orr.w	r3, r0, r1
 80060b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4bc5      	ldr	r3, [pc, #788]	; (80063cc <UART_SetConfig+0x384>)
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d004      	beq.n	80060c6 <UART_SetConfig+0x7e>
 80060bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4bc3      	ldr	r3, [pc, #780]	; (80063d0 <UART_SetConfig+0x388>)
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d103      	bne.n	80060ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c6:	f7fe facb 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80060ca:	6778      	str	r0, [r7, #116]	; 0x74
 80060cc:	e002      	b.n	80060d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060ce:	f7fe fab3 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 80060d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060dc:	f040 80b6 	bne.w	800624c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e2:	461c      	mov	r4, r3
 80060e4:	f04f 0500 	mov.w	r5, #0
 80060e8:	4622      	mov	r2, r4
 80060ea:	462b      	mov	r3, r5
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	6439      	str	r1, [r7, #64]	; 0x40
 80060f0:	415b      	adcs	r3, r3
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060f8:	1912      	adds	r2, r2, r4
 80060fa:	eb45 0303 	adc.w	r3, r5, r3
 80060fe:	f04f 0000 	mov.w	r0, #0
 8006102:	f04f 0100 	mov.w	r1, #0
 8006106:	00d9      	lsls	r1, r3, #3
 8006108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800610c:	00d0      	lsls	r0, r2, #3
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	1911      	adds	r1, r2, r4
 8006114:	6639      	str	r1, [r7, #96]	; 0x60
 8006116:	416b      	adcs	r3, r5
 8006118:	667b      	str	r3, [r7, #100]	; 0x64
 800611a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	461a      	mov	r2, r3
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	1891      	adds	r1, r2, r2
 8006126:	63b9      	str	r1, [r7, #56]	; 0x38
 8006128:	415b      	adcs	r3, r3
 800612a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006130:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006134:	f7fa fd4a 	bl	8000bcc <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4ba5      	ldr	r3, [pc, #660]	; (80063d4 <UART_SetConfig+0x38c>)
 800613e:	fba3 2302 	umull	r2, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	011e      	lsls	r6, r3, #4
 8006146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006148:	461c      	mov	r4, r3
 800614a:	f04f 0500 	mov.w	r5, #0
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	1891      	adds	r1, r2, r2
 8006154:	6339      	str	r1, [r7, #48]	; 0x30
 8006156:	415b      	adcs	r3, r3
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
 800615a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800615e:	1912      	adds	r2, r2, r4
 8006160:	eb45 0303 	adc.w	r3, r5, r3
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	00d9      	lsls	r1, r3, #3
 800616e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006172:	00d0      	lsls	r0, r2, #3
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	1911      	adds	r1, r2, r4
 800617a:	65b9      	str	r1, [r7, #88]	; 0x58
 800617c:	416b      	adcs	r3, r5
 800617e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	461a      	mov	r2, r3
 8006186:	f04f 0300 	mov.w	r3, #0
 800618a:	1891      	adds	r1, r2, r2
 800618c:	62b9      	str	r1, [r7, #40]	; 0x28
 800618e:	415b      	adcs	r3, r3
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006196:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800619a:	f7fa fd17 	bl	8000bcc <__aeabi_uldivmod>
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	4b8c      	ldr	r3, [pc, #560]	; (80063d4 <UART_SetConfig+0x38c>)
 80061a4:	fba3 1302 	umull	r1, r3, r3, r2
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	2164      	movs	r1, #100	; 0x64
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	3332      	adds	r3, #50	; 0x32
 80061b6:	4a87      	ldr	r2, [pc, #540]	; (80063d4 <UART_SetConfig+0x38c>)
 80061b8:	fba2 2303 	umull	r2, r3, r2, r3
 80061bc:	095b      	lsrs	r3, r3, #5
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061c4:	441e      	add	r6, r3
 80061c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061c8:	4618      	mov	r0, r3
 80061ca:	f04f 0100 	mov.w	r1, #0
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	1894      	adds	r4, r2, r2
 80061d4:	623c      	str	r4, [r7, #32]
 80061d6:	415b      	adcs	r3, r3
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
 80061da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061de:	1812      	adds	r2, r2, r0
 80061e0:	eb41 0303 	adc.w	r3, r1, r3
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	00dd      	lsls	r5, r3, #3
 80061ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061f2:	00d4      	lsls	r4, r2, #3
 80061f4:	4622      	mov	r2, r4
 80061f6:	462b      	mov	r3, r5
 80061f8:	1814      	adds	r4, r2, r0
 80061fa:	653c      	str	r4, [r7, #80]	; 0x50
 80061fc:	414b      	adcs	r3, r1
 80061fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	461a      	mov	r2, r3
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	1891      	adds	r1, r2, r2
 800620c:	61b9      	str	r1, [r7, #24]
 800620e:	415b      	adcs	r3, r3
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006216:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800621a:	f7fa fcd7 	bl	8000bcc <__aeabi_uldivmod>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4b6c      	ldr	r3, [pc, #432]	; (80063d4 <UART_SetConfig+0x38c>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	3332      	adds	r3, #50	; 0x32
 8006236:	4a67      	ldr	r2, [pc, #412]	; (80063d4 <UART_SetConfig+0x38c>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f003 0207 	and.w	r2, r3, #7
 8006242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4432      	add	r2, r6
 8006248:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800624a:	e0b9      	b.n	80063c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624e:	461c      	mov	r4, r3
 8006250:	f04f 0500 	mov.w	r5, #0
 8006254:	4622      	mov	r2, r4
 8006256:	462b      	mov	r3, r5
 8006258:	1891      	adds	r1, r2, r2
 800625a:	6139      	str	r1, [r7, #16]
 800625c:	415b      	adcs	r3, r3
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006264:	1912      	adds	r2, r2, r4
 8006266:	eb45 0303 	adc.w	r3, r5, r3
 800626a:	f04f 0000 	mov.w	r0, #0
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	00d9      	lsls	r1, r3, #3
 8006274:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006278:	00d0      	lsls	r0, r2, #3
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	eb12 0804 	adds.w	r8, r2, r4
 8006282:	eb43 0905 	adc.w	r9, r3, r5
 8006286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4618      	mov	r0, r3
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	008b      	lsls	r3, r1, #2
 800629a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800629e:	0082      	lsls	r2, r0, #2
 80062a0:	4640      	mov	r0, r8
 80062a2:	4649      	mov	r1, r9
 80062a4:	f7fa fc92 	bl	8000bcc <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4b49      	ldr	r3, [pc, #292]	; (80063d4 <UART_SetConfig+0x38c>)
 80062ae:	fba3 2302 	umull	r2, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	011e      	lsls	r6, r3, #4
 80062b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b8:	4618      	mov	r0, r3
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	1894      	adds	r4, r2, r2
 80062c4:	60bc      	str	r4, [r7, #8]
 80062c6:	415b      	adcs	r3, r3
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062ce:	1812      	adds	r2, r2, r0
 80062d0:	eb41 0303 	adc.w	r3, r1, r3
 80062d4:	f04f 0400 	mov.w	r4, #0
 80062d8:	f04f 0500 	mov.w	r5, #0
 80062dc:	00dd      	lsls	r5, r3, #3
 80062de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062e2:	00d4      	lsls	r4, r2, #3
 80062e4:	4622      	mov	r2, r4
 80062e6:	462b      	mov	r3, r5
 80062e8:	1814      	adds	r4, r2, r0
 80062ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80062ec:	414b      	adcs	r3, r1
 80062ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f04f 0100 	mov.w	r1, #0
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	008b      	lsls	r3, r1, #2
 8006304:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006308:	0082      	lsls	r2, r0, #2
 800630a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800630e:	f7fa fc5d 	bl	8000bcc <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4b2f      	ldr	r3, [pc, #188]	; (80063d4 <UART_SetConfig+0x38c>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2164      	movs	r1, #100	; 0x64
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	3332      	adds	r3, #50	; 0x32
 800632a:	4a2a      	ldr	r2, [pc, #168]	; (80063d4 <UART_SetConfig+0x38c>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006336:	441e      	add	r6, r3
 8006338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800633a:	4618      	mov	r0, r3
 800633c:	f04f 0100 	mov.w	r1, #0
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	1894      	adds	r4, r2, r2
 8006346:	603c      	str	r4, [r7, #0]
 8006348:	415b      	adcs	r3, r3
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006350:	1812      	adds	r2, r2, r0
 8006352:	eb41 0303 	adc.w	r3, r1, r3
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	f04f 0500 	mov.w	r5, #0
 800635e:	00dd      	lsls	r5, r3, #3
 8006360:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006364:	00d4      	lsls	r4, r2, #3
 8006366:	4622      	mov	r2, r4
 8006368:	462b      	mov	r3, r5
 800636a:	eb12 0a00 	adds.w	sl, r2, r0
 800636e:	eb43 0b01 	adc.w	fp, r3, r1
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	4618      	mov	r0, r3
 8006378:	f04f 0100 	mov.w	r1, #0
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	008b      	lsls	r3, r1, #2
 8006386:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800638a:	0082      	lsls	r2, r0, #2
 800638c:	4650      	mov	r0, sl
 800638e:	4659      	mov	r1, fp
 8006390:	f7fa fc1c 	bl	8000bcc <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4b0e      	ldr	r3, [pc, #56]	; (80063d4 <UART_SetConfig+0x38c>)
 800639a:	fba3 1302 	umull	r1, r3, r3, r2
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	2164      	movs	r1, #100	; 0x64
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	3332      	adds	r3, #50	; 0x32
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <UART_SetConfig+0x38c>)
 80063ae:	fba2 2303 	umull	r2, r3, r2, r3
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4432      	add	r2, r6
 80063be:	609a      	str	r2, [r3, #8]
}
 80063c0:	bf00      	nop
 80063c2:	377c      	adds	r7, #124	; 0x7c
 80063c4:	46bd      	mov	sp, r7
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	bf00      	nop
 80063cc:	40011000 	.word	0x40011000
 80063d0:	40011400 	.word	0x40011400
 80063d4:	51eb851f 	.word	0x51eb851f

080063d8 <__errno>:
 80063d8:	4b01      	ldr	r3, [pc, #4]	; (80063e0 <__errno+0x8>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000030 	.word	0x20000030

080063e4 <__libc_init_array>:
 80063e4:	b570      	push	{r4, r5, r6, lr}
 80063e6:	4d0d      	ldr	r5, [pc, #52]	; (800641c <__libc_init_array+0x38>)
 80063e8:	4c0d      	ldr	r4, [pc, #52]	; (8006420 <__libc_init_array+0x3c>)
 80063ea:	1b64      	subs	r4, r4, r5
 80063ec:	10a4      	asrs	r4, r4, #2
 80063ee:	2600      	movs	r6, #0
 80063f0:	42a6      	cmp	r6, r4
 80063f2:	d109      	bne.n	8006408 <__libc_init_array+0x24>
 80063f4:	4d0b      	ldr	r5, [pc, #44]	; (8006424 <__libc_init_array+0x40>)
 80063f6:	4c0c      	ldr	r4, [pc, #48]	; (8006428 <__libc_init_array+0x44>)
 80063f8:	f001 fc84 	bl	8007d04 <_init>
 80063fc:	1b64      	subs	r4, r4, r5
 80063fe:	10a4      	asrs	r4, r4, #2
 8006400:	2600      	movs	r6, #0
 8006402:	42a6      	cmp	r6, r4
 8006404:	d105      	bne.n	8006412 <__libc_init_array+0x2e>
 8006406:	bd70      	pop	{r4, r5, r6, pc}
 8006408:	f855 3b04 	ldr.w	r3, [r5], #4
 800640c:	4798      	blx	r3
 800640e:	3601      	adds	r6, #1
 8006410:	e7ee      	b.n	80063f0 <__libc_init_array+0xc>
 8006412:	f855 3b04 	ldr.w	r3, [r5], #4
 8006416:	4798      	blx	r3
 8006418:	3601      	adds	r6, #1
 800641a:	e7f2      	b.n	8006402 <__libc_init_array+0x1e>
 800641c:	080081f0 	.word	0x080081f0
 8006420:	080081f0 	.word	0x080081f0
 8006424:	080081f0 	.word	0x080081f0
 8006428:	080081f4 	.word	0x080081f4

0800642c <memcpy>:
 800642c:	440a      	add	r2, r1
 800642e:	4291      	cmp	r1, r2
 8006430:	f100 33ff 	add.w	r3, r0, #4294967295
 8006434:	d100      	bne.n	8006438 <memcpy+0xc>
 8006436:	4770      	bx	lr
 8006438:	b510      	push	{r4, lr}
 800643a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800643e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006442:	4291      	cmp	r1, r2
 8006444:	d1f9      	bne.n	800643a <memcpy+0xe>
 8006446:	bd10      	pop	{r4, pc}

08006448 <memset>:
 8006448:	4402      	add	r2, r0
 800644a:	4603      	mov	r3, r0
 800644c:	4293      	cmp	r3, r2
 800644e:	d100      	bne.n	8006452 <memset+0xa>
 8006450:	4770      	bx	lr
 8006452:	f803 1b01 	strb.w	r1, [r3], #1
 8006456:	e7f9      	b.n	800644c <memset+0x4>

08006458 <siprintf>:
 8006458:	b40e      	push	{r1, r2, r3}
 800645a:	b500      	push	{lr}
 800645c:	b09c      	sub	sp, #112	; 0x70
 800645e:	ab1d      	add	r3, sp, #116	; 0x74
 8006460:	9002      	str	r0, [sp, #8]
 8006462:	9006      	str	r0, [sp, #24]
 8006464:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006468:	4809      	ldr	r0, [pc, #36]	; (8006490 <siprintf+0x38>)
 800646a:	9107      	str	r1, [sp, #28]
 800646c:	9104      	str	r1, [sp, #16]
 800646e:	4909      	ldr	r1, [pc, #36]	; (8006494 <siprintf+0x3c>)
 8006470:	f853 2b04 	ldr.w	r2, [r3], #4
 8006474:	9105      	str	r1, [sp, #20]
 8006476:	6800      	ldr	r0, [r0, #0]
 8006478:	9301      	str	r3, [sp, #4]
 800647a:	a902      	add	r1, sp, #8
 800647c:	f000 f868 	bl	8006550 <_svfiprintf_r>
 8006480:	9b02      	ldr	r3, [sp, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	b01c      	add	sp, #112	; 0x70
 8006488:	f85d eb04 	ldr.w	lr, [sp], #4
 800648c:	b003      	add	sp, #12
 800648e:	4770      	bx	lr
 8006490:	20000030 	.word	0x20000030
 8006494:	ffff0208 	.word	0xffff0208

08006498 <__ssputs_r>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	688e      	ldr	r6, [r1, #8]
 800649e:	429e      	cmp	r6, r3
 80064a0:	4682      	mov	sl, r0
 80064a2:	460c      	mov	r4, r1
 80064a4:	4690      	mov	r8, r2
 80064a6:	461f      	mov	r7, r3
 80064a8:	d838      	bhi.n	800651c <__ssputs_r+0x84>
 80064aa:	898a      	ldrh	r2, [r1, #12]
 80064ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064b0:	d032      	beq.n	8006518 <__ssputs_r+0x80>
 80064b2:	6825      	ldr	r5, [r4, #0]
 80064b4:	6909      	ldr	r1, [r1, #16]
 80064b6:	eba5 0901 	sub.w	r9, r5, r1
 80064ba:	6965      	ldr	r5, [r4, #20]
 80064bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064c4:	3301      	adds	r3, #1
 80064c6:	444b      	add	r3, r9
 80064c8:	106d      	asrs	r5, r5, #1
 80064ca:	429d      	cmp	r5, r3
 80064cc:	bf38      	it	cc
 80064ce:	461d      	movcc	r5, r3
 80064d0:	0553      	lsls	r3, r2, #21
 80064d2:	d531      	bpl.n	8006538 <__ssputs_r+0xa0>
 80064d4:	4629      	mov	r1, r5
 80064d6:	f000 fb39 	bl	8006b4c <_malloc_r>
 80064da:	4606      	mov	r6, r0
 80064dc:	b950      	cbnz	r0, 80064f4 <__ssputs_r+0x5c>
 80064de:	230c      	movs	r3, #12
 80064e0:	f8ca 3000 	str.w	r3, [sl]
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f4:	6921      	ldr	r1, [r4, #16]
 80064f6:	464a      	mov	r2, r9
 80064f8:	f7ff ff98 	bl	800642c <memcpy>
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	6126      	str	r6, [r4, #16]
 800650a:	6165      	str	r5, [r4, #20]
 800650c:	444e      	add	r6, r9
 800650e:	eba5 0509 	sub.w	r5, r5, r9
 8006512:	6026      	str	r6, [r4, #0]
 8006514:	60a5      	str	r5, [r4, #8]
 8006516:	463e      	mov	r6, r7
 8006518:	42be      	cmp	r6, r7
 800651a:	d900      	bls.n	800651e <__ssputs_r+0x86>
 800651c:	463e      	mov	r6, r7
 800651e:	4632      	mov	r2, r6
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	4641      	mov	r1, r8
 8006524:	f000 faa8 	bl	8006a78 <memmove>
 8006528:	68a3      	ldr	r3, [r4, #8]
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	1b9b      	subs	r3, r3, r6
 800652e:	4432      	add	r2, r6
 8006530:	60a3      	str	r3, [r4, #8]
 8006532:	6022      	str	r2, [r4, #0]
 8006534:	2000      	movs	r0, #0
 8006536:	e7db      	b.n	80064f0 <__ssputs_r+0x58>
 8006538:	462a      	mov	r2, r5
 800653a:	f000 fb61 	bl	8006c00 <_realloc_r>
 800653e:	4606      	mov	r6, r0
 8006540:	2800      	cmp	r0, #0
 8006542:	d1e1      	bne.n	8006508 <__ssputs_r+0x70>
 8006544:	6921      	ldr	r1, [r4, #16]
 8006546:	4650      	mov	r0, sl
 8006548:	f000 fab0 	bl	8006aac <_free_r>
 800654c:	e7c7      	b.n	80064de <__ssputs_r+0x46>
	...

08006550 <_svfiprintf_r>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	4698      	mov	r8, r3
 8006556:	898b      	ldrh	r3, [r1, #12]
 8006558:	061b      	lsls	r3, r3, #24
 800655a:	b09d      	sub	sp, #116	; 0x74
 800655c:	4607      	mov	r7, r0
 800655e:	460d      	mov	r5, r1
 8006560:	4614      	mov	r4, r2
 8006562:	d50e      	bpl.n	8006582 <_svfiprintf_r+0x32>
 8006564:	690b      	ldr	r3, [r1, #16]
 8006566:	b963      	cbnz	r3, 8006582 <_svfiprintf_r+0x32>
 8006568:	2140      	movs	r1, #64	; 0x40
 800656a:	f000 faef 	bl	8006b4c <_malloc_r>
 800656e:	6028      	str	r0, [r5, #0]
 8006570:	6128      	str	r0, [r5, #16]
 8006572:	b920      	cbnz	r0, 800657e <_svfiprintf_r+0x2e>
 8006574:	230c      	movs	r3, #12
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e0d1      	b.n	8006722 <_svfiprintf_r+0x1d2>
 800657e:	2340      	movs	r3, #64	; 0x40
 8006580:	616b      	str	r3, [r5, #20]
 8006582:	2300      	movs	r3, #0
 8006584:	9309      	str	r3, [sp, #36]	; 0x24
 8006586:	2320      	movs	r3, #32
 8006588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800658c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006590:	2330      	movs	r3, #48	; 0x30
 8006592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800673c <_svfiprintf_r+0x1ec>
 8006596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800659a:	f04f 0901 	mov.w	r9, #1
 800659e:	4623      	mov	r3, r4
 80065a0:	469a      	mov	sl, r3
 80065a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065a6:	b10a      	cbz	r2, 80065ac <_svfiprintf_r+0x5c>
 80065a8:	2a25      	cmp	r2, #37	; 0x25
 80065aa:	d1f9      	bne.n	80065a0 <_svfiprintf_r+0x50>
 80065ac:	ebba 0b04 	subs.w	fp, sl, r4
 80065b0:	d00b      	beq.n	80065ca <_svfiprintf_r+0x7a>
 80065b2:	465b      	mov	r3, fp
 80065b4:	4622      	mov	r2, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff6d 	bl	8006498 <__ssputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	f000 80aa 	beq.w	8006718 <_svfiprintf_r+0x1c8>
 80065c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c6:	445a      	add	r2, fp
 80065c8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ca:	f89a 3000 	ldrb.w	r3, [sl]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 80a2 	beq.w	8006718 <_svfiprintf_r+0x1c8>
 80065d4:	2300      	movs	r3, #0
 80065d6:	f04f 32ff 	mov.w	r2, #4294967295
 80065da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065de:	f10a 0a01 	add.w	sl, sl, #1
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	9307      	str	r3, [sp, #28]
 80065e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ea:	931a      	str	r3, [sp, #104]	; 0x68
 80065ec:	4654      	mov	r4, sl
 80065ee:	2205      	movs	r2, #5
 80065f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f4:	4851      	ldr	r0, [pc, #324]	; (800673c <_svfiprintf_r+0x1ec>)
 80065f6:	f7f9 fdfb 	bl	80001f0 <memchr>
 80065fa:	9a04      	ldr	r2, [sp, #16]
 80065fc:	b9d8      	cbnz	r0, 8006636 <_svfiprintf_r+0xe6>
 80065fe:	06d0      	lsls	r0, r2, #27
 8006600:	bf44      	itt	mi
 8006602:	2320      	movmi	r3, #32
 8006604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006608:	0711      	lsls	r1, r2, #28
 800660a:	bf44      	itt	mi
 800660c:	232b      	movmi	r3, #43	; 0x2b
 800660e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006612:	f89a 3000 	ldrb.w	r3, [sl]
 8006616:	2b2a      	cmp	r3, #42	; 0x2a
 8006618:	d015      	beq.n	8006646 <_svfiprintf_r+0xf6>
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	4654      	mov	r4, sl
 800661e:	2000      	movs	r0, #0
 8006620:	f04f 0c0a 	mov.w	ip, #10
 8006624:	4621      	mov	r1, r4
 8006626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662a:	3b30      	subs	r3, #48	; 0x30
 800662c:	2b09      	cmp	r3, #9
 800662e:	d94e      	bls.n	80066ce <_svfiprintf_r+0x17e>
 8006630:	b1b0      	cbz	r0, 8006660 <_svfiprintf_r+0x110>
 8006632:	9207      	str	r2, [sp, #28]
 8006634:	e014      	b.n	8006660 <_svfiprintf_r+0x110>
 8006636:	eba0 0308 	sub.w	r3, r0, r8
 800663a:	fa09 f303 	lsl.w	r3, r9, r3
 800663e:	4313      	orrs	r3, r2
 8006640:	9304      	str	r3, [sp, #16]
 8006642:	46a2      	mov	sl, r4
 8006644:	e7d2      	b.n	80065ec <_svfiprintf_r+0x9c>
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	1d19      	adds	r1, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9103      	str	r1, [sp, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	bfbb      	ittet	lt
 8006652:	425b      	neglt	r3, r3
 8006654:	f042 0202 	orrlt.w	r2, r2, #2
 8006658:	9307      	strge	r3, [sp, #28]
 800665a:	9307      	strlt	r3, [sp, #28]
 800665c:	bfb8      	it	lt
 800665e:	9204      	strlt	r2, [sp, #16]
 8006660:	7823      	ldrb	r3, [r4, #0]
 8006662:	2b2e      	cmp	r3, #46	; 0x2e
 8006664:	d10c      	bne.n	8006680 <_svfiprintf_r+0x130>
 8006666:	7863      	ldrb	r3, [r4, #1]
 8006668:	2b2a      	cmp	r3, #42	; 0x2a
 800666a:	d135      	bne.n	80066d8 <_svfiprintf_r+0x188>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	1d1a      	adds	r2, r3, #4
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	9203      	str	r2, [sp, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfb8      	it	lt
 8006678:	f04f 33ff 	movlt.w	r3, #4294967295
 800667c:	3402      	adds	r4, #2
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800674c <_svfiprintf_r+0x1fc>
 8006684:	7821      	ldrb	r1, [r4, #0]
 8006686:	2203      	movs	r2, #3
 8006688:	4650      	mov	r0, sl
 800668a:	f7f9 fdb1 	bl	80001f0 <memchr>
 800668e:	b140      	cbz	r0, 80066a2 <_svfiprintf_r+0x152>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	eba0 000a 	sub.w	r0, r0, sl
 8006696:	fa03 f000 	lsl.w	r0, r3, r0
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	4303      	orrs	r3, r0
 800669e:	3401      	adds	r4, #1
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a6:	4826      	ldr	r0, [pc, #152]	; (8006740 <_svfiprintf_r+0x1f0>)
 80066a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066ac:	2206      	movs	r2, #6
 80066ae:	f7f9 fd9f 	bl	80001f0 <memchr>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d038      	beq.n	8006728 <_svfiprintf_r+0x1d8>
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <_svfiprintf_r+0x1f4>)
 80066b8:	bb1b      	cbnz	r3, 8006702 <_svfiprintf_r+0x1b2>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	3307      	adds	r3, #7
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	3308      	adds	r3, #8
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c8:	4433      	add	r3, r6
 80066ca:	9309      	str	r3, [sp, #36]	; 0x24
 80066cc:	e767      	b.n	800659e <_svfiprintf_r+0x4e>
 80066ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d2:	460c      	mov	r4, r1
 80066d4:	2001      	movs	r0, #1
 80066d6:	e7a5      	b.n	8006624 <_svfiprintf_r+0xd4>
 80066d8:	2300      	movs	r3, #0
 80066da:	3401      	adds	r4, #1
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	4619      	mov	r1, r3
 80066e0:	f04f 0c0a 	mov.w	ip, #10
 80066e4:	4620      	mov	r0, r4
 80066e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ea:	3a30      	subs	r2, #48	; 0x30
 80066ec:	2a09      	cmp	r2, #9
 80066ee:	d903      	bls.n	80066f8 <_svfiprintf_r+0x1a8>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0c5      	beq.n	8006680 <_svfiprintf_r+0x130>
 80066f4:	9105      	str	r1, [sp, #20]
 80066f6:	e7c3      	b.n	8006680 <_svfiprintf_r+0x130>
 80066f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80066fc:	4604      	mov	r4, r0
 80066fe:	2301      	movs	r3, #1
 8006700:	e7f0      	b.n	80066e4 <_svfiprintf_r+0x194>
 8006702:	ab03      	add	r3, sp, #12
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462a      	mov	r2, r5
 8006708:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <_svfiprintf_r+0x1f8>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	4638      	mov	r0, r7
 800670e:	f3af 8000 	nop.w
 8006712:	1c42      	adds	r2, r0, #1
 8006714:	4606      	mov	r6, r0
 8006716:	d1d6      	bne.n	80066c6 <_svfiprintf_r+0x176>
 8006718:	89ab      	ldrh	r3, [r5, #12]
 800671a:	065b      	lsls	r3, r3, #25
 800671c:	f53f af2c 	bmi.w	8006578 <_svfiprintf_r+0x28>
 8006720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006722:	b01d      	add	sp, #116	; 0x74
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	ab03      	add	r3, sp, #12
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	462a      	mov	r2, r5
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <_svfiprintf_r+0x1f8>)
 8006730:	a904      	add	r1, sp, #16
 8006732:	4638      	mov	r0, r7
 8006734:	f000 f87a 	bl	800682c <_printf_i>
 8006738:	e7eb      	b.n	8006712 <_svfiprintf_r+0x1c2>
 800673a:	bf00      	nop
 800673c:	08007fd8 	.word	0x08007fd8
 8006740:	08007fe2 	.word	0x08007fe2
 8006744:	00000000 	.word	0x00000000
 8006748:	08006499 	.word	0x08006499
 800674c:	08007fde 	.word	0x08007fde

08006750 <_printf_common>:
 8006750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006754:	4616      	mov	r6, r2
 8006756:	4699      	mov	r9, r3
 8006758:	688a      	ldr	r2, [r1, #8]
 800675a:	690b      	ldr	r3, [r1, #16]
 800675c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006760:	4293      	cmp	r3, r2
 8006762:	bfb8      	it	lt
 8006764:	4613      	movlt	r3, r2
 8006766:	6033      	str	r3, [r6, #0]
 8006768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800676c:	4607      	mov	r7, r0
 800676e:	460c      	mov	r4, r1
 8006770:	b10a      	cbz	r2, 8006776 <_printf_common+0x26>
 8006772:	3301      	adds	r3, #1
 8006774:	6033      	str	r3, [r6, #0]
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	0699      	lsls	r1, r3, #26
 800677a:	bf42      	ittt	mi
 800677c:	6833      	ldrmi	r3, [r6, #0]
 800677e:	3302      	addmi	r3, #2
 8006780:	6033      	strmi	r3, [r6, #0]
 8006782:	6825      	ldr	r5, [r4, #0]
 8006784:	f015 0506 	ands.w	r5, r5, #6
 8006788:	d106      	bne.n	8006798 <_printf_common+0x48>
 800678a:	f104 0a19 	add.w	sl, r4, #25
 800678e:	68e3      	ldr	r3, [r4, #12]
 8006790:	6832      	ldr	r2, [r6, #0]
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	42ab      	cmp	r3, r5
 8006796:	dc26      	bgt.n	80067e6 <_printf_common+0x96>
 8006798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800679c:	1e13      	subs	r3, r2, #0
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	bf18      	it	ne
 80067a2:	2301      	movne	r3, #1
 80067a4:	0692      	lsls	r2, r2, #26
 80067a6:	d42b      	bmi.n	8006800 <_printf_common+0xb0>
 80067a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ac:	4649      	mov	r1, r9
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c0      	blx	r8
 80067b2:	3001      	adds	r0, #1
 80067b4:	d01e      	beq.n	80067f4 <_printf_common+0xa4>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	68e5      	ldr	r5, [r4, #12]
 80067ba:	6832      	ldr	r2, [r6, #0]
 80067bc:	f003 0306 	and.w	r3, r3, #6
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	bf08      	it	eq
 80067c4:	1aad      	subeq	r5, r5, r2
 80067c6:	68a3      	ldr	r3, [r4, #8]
 80067c8:	6922      	ldr	r2, [r4, #16]
 80067ca:	bf0c      	ite	eq
 80067cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067d0:	2500      	movne	r5, #0
 80067d2:	4293      	cmp	r3, r2
 80067d4:	bfc4      	itt	gt
 80067d6:	1a9b      	subgt	r3, r3, r2
 80067d8:	18ed      	addgt	r5, r5, r3
 80067da:	2600      	movs	r6, #0
 80067dc:	341a      	adds	r4, #26
 80067de:	42b5      	cmp	r5, r6
 80067e0:	d11a      	bne.n	8006818 <_printf_common+0xc8>
 80067e2:	2000      	movs	r0, #0
 80067e4:	e008      	b.n	80067f8 <_printf_common+0xa8>
 80067e6:	2301      	movs	r3, #1
 80067e8:	4652      	mov	r2, sl
 80067ea:	4649      	mov	r1, r9
 80067ec:	4638      	mov	r0, r7
 80067ee:	47c0      	blx	r8
 80067f0:	3001      	adds	r0, #1
 80067f2:	d103      	bne.n	80067fc <_printf_common+0xac>
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	3501      	adds	r5, #1
 80067fe:	e7c6      	b.n	800678e <_printf_common+0x3e>
 8006800:	18e1      	adds	r1, r4, r3
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	2030      	movs	r0, #48	; 0x30
 8006806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800680a:	4422      	add	r2, r4
 800680c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006814:	3302      	adds	r3, #2
 8006816:	e7c7      	b.n	80067a8 <_printf_common+0x58>
 8006818:	2301      	movs	r3, #1
 800681a:	4622      	mov	r2, r4
 800681c:	4649      	mov	r1, r9
 800681e:	4638      	mov	r0, r7
 8006820:	47c0      	blx	r8
 8006822:	3001      	adds	r0, #1
 8006824:	d0e6      	beq.n	80067f4 <_printf_common+0xa4>
 8006826:	3601      	adds	r6, #1
 8006828:	e7d9      	b.n	80067de <_printf_common+0x8e>
	...

0800682c <_printf_i>:
 800682c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	460c      	mov	r4, r1
 8006832:	4691      	mov	r9, r2
 8006834:	7e27      	ldrb	r7, [r4, #24]
 8006836:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006838:	2f78      	cmp	r7, #120	; 0x78
 800683a:	4680      	mov	r8, r0
 800683c:	469a      	mov	sl, r3
 800683e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006842:	d807      	bhi.n	8006854 <_printf_i+0x28>
 8006844:	2f62      	cmp	r7, #98	; 0x62
 8006846:	d80a      	bhi.n	800685e <_printf_i+0x32>
 8006848:	2f00      	cmp	r7, #0
 800684a:	f000 80d8 	beq.w	80069fe <_printf_i+0x1d2>
 800684e:	2f58      	cmp	r7, #88	; 0x58
 8006850:	f000 80a3 	beq.w	800699a <_printf_i+0x16e>
 8006854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800685c:	e03a      	b.n	80068d4 <_printf_i+0xa8>
 800685e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006862:	2b15      	cmp	r3, #21
 8006864:	d8f6      	bhi.n	8006854 <_printf_i+0x28>
 8006866:	a001      	add	r0, pc, #4	; (adr r0, 800686c <_printf_i+0x40>)
 8006868:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800686c:	080068c5 	.word	0x080068c5
 8006870:	080068d9 	.word	0x080068d9
 8006874:	08006855 	.word	0x08006855
 8006878:	08006855 	.word	0x08006855
 800687c:	08006855 	.word	0x08006855
 8006880:	08006855 	.word	0x08006855
 8006884:	080068d9 	.word	0x080068d9
 8006888:	08006855 	.word	0x08006855
 800688c:	08006855 	.word	0x08006855
 8006890:	08006855 	.word	0x08006855
 8006894:	08006855 	.word	0x08006855
 8006898:	080069e5 	.word	0x080069e5
 800689c:	08006909 	.word	0x08006909
 80068a0:	080069c7 	.word	0x080069c7
 80068a4:	08006855 	.word	0x08006855
 80068a8:	08006855 	.word	0x08006855
 80068ac:	08006a07 	.word	0x08006a07
 80068b0:	08006855 	.word	0x08006855
 80068b4:	08006909 	.word	0x08006909
 80068b8:	08006855 	.word	0x08006855
 80068bc:	08006855 	.word	0x08006855
 80068c0:	080069cf 	.word	0x080069cf
 80068c4:	680b      	ldr	r3, [r1, #0]
 80068c6:	1d1a      	adds	r2, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	600a      	str	r2, [r1, #0]
 80068cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a3      	b.n	8006a20 <_printf_i+0x1f4>
 80068d8:	6825      	ldr	r5, [r4, #0]
 80068da:	6808      	ldr	r0, [r1, #0]
 80068dc:	062e      	lsls	r6, r5, #24
 80068de:	f100 0304 	add.w	r3, r0, #4
 80068e2:	d50a      	bpl.n	80068fa <_printf_i+0xce>
 80068e4:	6805      	ldr	r5, [r0, #0]
 80068e6:	600b      	str	r3, [r1, #0]
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	da03      	bge.n	80068f4 <_printf_i+0xc8>
 80068ec:	232d      	movs	r3, #45	; 0x2d
 80068ee:	426d      	negs	r5, r5
 80068f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f4:	485e      	ldr	r0, [pc, #376]	; (8006a70 <_printf_i+0x244>)
 80068f6:	230a      	movs	r3, #10
 80068f8:	e019      	b.n	800692e <_printf_i+0x102>
 80068fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068fe:	6805      	ldr	r5, [r0, #0]
 8006900:	600b      	str	r3, [r1, #0]
 8006902:	bf18      	it	ne
 8006904:	b22d      	sxthne	r5, r5
 8006906:	e7ef      	b.n	80068e8 <_printf_i+0xbc>
 8006908:	680b      	ldr	r3, [r1, #0]
 800690a:	6825      	ldr	r5, [r4, #0]
 800690c:	1d18      	adds	r0, r3, #4
 800690e:	6008      	str	r0, [r1, #0]
 8006910:	0628      	lsls	r0, r5, #24
 8006912:	d501      	bpl.n	8006918 <_printf_i+0xec>
 8006914:	681d      	ldr	r5, [r3, #0]
 8006916:	e002      	b.n	800691e <_printf_i+0xf2>
 8006918:	0669      	lsls	r1, r5, #25
 800691a:	d5fb      	bpl.n	8006914 <_printf_i+0xe8>
 800691c:	881d      	ldrh	r5, [r3, #0]
 800691e:	4854      	ldr	r0, [pc, #336]	; (8006a70 <_printf_i+0x244>)
 8006920:	2f6f      	cmp	r7, #111	; 0x6f
 8006922:	bf0c      	ite	eq
 8006924:	2308      	moveq	r3, #8
 8006926:	230a      	movne	r3, #10
 8006928:	2100      	movs	r1, #0
 800692a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800692e:	6866      	ldr	r6, [r4, #4]
 8006930:	60a6      	str	r6, [r4, #8]
 8006932:	2e00      	cmp	r6, #0
 8006934:	bfa2      	ittt	ge
 8006936:	6821      	ldrge	r1, [r4, #0]
 8006938:	f021 0104 	bicge.w	r1, r1, #4
 800693c:	6021      	strge	r1, [r4, #0]
 800693e:	b90d      	cbnz	r5, 8006944 <_printf_i+0x118>
 8006940:	2e00      	cmp	r6, #0
 8006942:	d04d      	beq.n	80069e0 <_printf_i+0x1b4>
 8006944:	4616      	mov	r6, r2
 8006946:	fbb5 f1f3 	udiv	r1, r5, r3
 800694a:	fb03 5711 	mls	r7, r3, r1, r5
 800694e:	5dc7      	ldrb	r7, [r0, r7]
 8006950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006954:	462f      	mov	r7, r5
 8006956:	42bb      	cmp	r3, r7
 8006958:	460d      	mov	r5, r1
 800695a:	d9f4      	bls.n	8006946 <_printf_i+0x11a>
 800695c:	2b08      	cmp	r3, #8
 800695e:	d10b      	bne.n	8006978 <_printf_i+0x14c>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	07df      	lsls	r7, r3, #31
 8006964:	d508      	bpl.n	8006978 <_printf_i+0x14c>
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	4299      	cmp	r1, r3
 800696c:	bfde      	ittt	le
 800696e:	2330      	movle	r3, #48	; 0x30
 8006970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006978:	1b92      	subs	r2, r2, r6
 800697a:	6122      	str	r2, [r4, #16]
 800697c:	f8cd a000 	str.w	sl, [sp]
 8006980:	464b      	mov	r3, r9
 8006982:	aa03      	add	r2, sp, #12
 8006984:	4621      	mov	r1, r4
 8006986:	4640      	mov	r0, r8
 8006988:	f7ff fee2 	bl	8006750 <_printf_common>
 800698c:	3001      	adds	r0, #1
 800698e:	d14c      	bne.n	8006a2a <_printf_i+0x1fe>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	b004      	add	sp, #16
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	4835      	ldr	r0, [pc, #212]	; (8006a70 <_printf_i+0x244>)
 800699c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	680e      	ldr	r6, [r1, #0]
 80069a4:	061f      	lsls	r7, r3, #24
 80069a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80069aa:	600e      	str	r6, [r1, #0]
 80069ac:	d514      	bpl.n	80069d8 <_printf_i+0x1ac>
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	bf44      	itt	mi
 80069b2:	f043 0320 	orrmi.w	r3, r3, #32
 80069b6:	6023      	strmi	r3, [r4, #0]
 80069b8:	b91d      	cbnz	r5, 80069c2 <_printf_i+0x196>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	f023 0320 	bic.w	r3, r3, #32
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	2310      	movs	r3, #16
 80069c4:	e7b0      	b.n	8006928 <_printf_i+0xfc>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	f043 0320 	orr.w	r3, r3, #32
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	2378      	movs	r3, #120	; 0x78
 80069d0:	4828      	ldr	r0, [pc, #160]	; (8006a74 <_printf_i+0x248>)
 80069d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d6:	e7e3      	b.n	80069a0 <_printf_i+0x174>
 80069d8:	065e      	lsls	r6, r3, #25
 80069da:	bf48      	it	mi
 80069dc:	b2ad      	uxthmi	r5, r5
 80069de:	e7e6      	b.n	80069ae <_printf_i+0x182>
 80069e0:	4616      	mov	r6, r2
 80069e2:	e7bb      	b.n	800695c <_printf_i+0x130>
 80069e4:	680b      	ldr	r3, [r1, #0]
 80069e6:	6826      	ldr	r6, [r4, #0]
 80069e8:	6960      	ldr	r0, [r4, #20]
 80069ea:	1d1d      	adds	r5, r3, #4
 80069ec:	600d      	str	r5, [r1, #0]
 80069ee:	0635      	lsls	r5, r6, #24
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	d501      	bpl.n	80069f8 <_printf_i+0x1cc>
 80069f4:	6018      	str	r0, [r3, #0]
 80069f6:	e002      	b.n	80069fe <_printf_i+0x1d2>
 80069f8:	0671      	lsls	r1, r6, #25
 80069fa:	d5fb      	bpl.n	80069f4 <_printf_i+0x1c8>
 80069fc:	8018      	strh	r0, [r3, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	6123      	str	r3, [r4, #16]
 8006a02:	4616      	mov	r6, r2
 8006a04:	e7ba      	b.n	800697c <_printf_i+0x150>
 8006a06:	680b      	ldr	r3, [r1, #0]
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	600a      	str	r2, [r1, #0]
 8006a0c:	681e      	ldr	r6, [r3, #0]
 8006a0e:	6862      	ldr	r2, [r4, #4]
 8006a10:	2100      	movs	r1, #0
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7f9 fbec 	bl	80001f0 <memchr>
 8006a18:	b108      	cbz	r0, 8006a1e <_printf_i+0x1f2>
 8006a1a:	1b80      	subs	r0, r0, r6
 8006a1c:	6060      	str	r0, [r4, #4]
 8006a1e:	6863      	ldr	r3, [r4, #4]
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	2300      	movs	r3, #0
 8006a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a28:	e7a8      	b.n	800697c <_printf_i+0x150>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4649      	mov	r1, r9
 8006a30:	4640      	mov	r0, r8
 8006a32:	47d0      	blx	sl
 8006a34:	3001      	adds	r0, #1
 8006a36:	d0ab      	beq.n	8006990 <_printf_i+0x164>
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	079b      	lsls	r3, r3, #30
 8006a3c:	d413      	bmi.n	8006a66 <_printf_i+0x23a>
 8006a3e:	68e0      	ldr	r0, [r4, #12]
 8006a40:	9b03      	ldr	r3, [sp, #12]
 8006a42:	4298      	cmp	r0, r3
 8006a44:	bfb8      	it	lt
 8006a46:	4618      	movlt	r0, r3
 8006a48:	e7a4      	b.n	8006994 <_printf_i+0x168>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d09b      	beq.n	8006990 <_printf_i+0x164>
 8006a58:	3501      	adds	r5, #1
 8006a5a:	68e3      	ldr	r3, [r4, #12]
 8006a5c:	9903      	ldr	r1, [sp, #12]
 8006a5e:	1a5b      	subs	r3, r3, r1
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	dcf2      	bgt.n	8006a4a <_printf_i+0x21e>
 8006a64:	e7eb      	b.n	8006a3e <_printf_i+0x212>
 8006a66:	2500      	movs	r5, #0
 8006a68:	f104 0619 	add.w	r6, r4, #25
 8006a6c:	e7f5      	b.n	8006a5a <_printf_i+0x22e>
 8006a6e:	bf00      	nop
 8006a70:	08007fe9 	.word	0x08007fe9
 8006a74:	08007ffa 	.word	0x08007ffa

08006a78 <memmove>:
 8006a78:	4288      	cmp	r0, r1
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	eb01 0402 	add.w	r4, r1, r2
 8006a80:	d902      	bls.n	8006a88 <memmove+0x10>
 8006a82:	4284      	cmp	r4, r0
 8006a84:	4623      	mov	r3, r4
 8006a86:	d807      	bhi.n	8006a98 <memmove+0x20>
 8006a88:	1e43      	subs	r3, r0, #1
 8006a8a:	42a1      	cmp	r1, r4
 8006a8c:	d008      	beq.n	8006aa0 <memmove+0x28>
 8006a8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a96:	e7f8      	b.n	8006a8a <memmove+0x12>
 8006a98:	4402      	add	r2, r0
 8006a9a:	4601      	mov	r1, r0
 8006a9c:	428a      	cmp	r2, r1
 8006a9e:	d100      	bne.n	8006aa2 <memmove+0x2a>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006aaa:	e7f7      	b.n	8006a9c <memmove+0x24>

08006aac <_free_r>:
 8006aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aae:	2900      	cmp	r1, #0
 8006ab0:	d048      	beq.n	8006b44 <_free_r+0x98>
 8006ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab6:	9001      	str	r0, [sp, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f1a1 0404 	sub.w	r4, r1, #4
 8006abe:	bfb8      	it	lt
 8006ac0:	18e4      	addlt	r4, r4, r3
 8006ac2:	f000 f8d3 	bl	8006c6c <__malloc_lock>
 8006ac6:	4a20      	ldr	r2, [pc, #128]	; (8006b48 <_free_r+0x9c>)
 8006ac8:	9801      	ldr	r0, [sp, #4]
 8006aca:	6813      	ldr	r3, [r2, #0]
 8006acc:	4615      	mov	r5, r2
 8006ace:	b933      	cbnz	r3, 8006ade <_free_r+0x32>
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	6014      	str	r4, [r2, #0]
 8006ad4:	b003      	add	sp, #12
 8006ad6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ada:	f000 b8cd 	b.w	8006c78 <__malloc_unlock>
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	d90b      	bls.n	8006afa <_free_r+0x4e>
 8006ae2:	6821      	ldr	r1, [r4, #0]
 8006ae4:	1862      	adds	r2, r4, r1
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	bf04      	itt	eq
 8006aea:	681a      	ldreq	r2, [r3, #0]
 8006aec:	685b      	ldreq	r3, [r3, #4]
 8006aee:	6063      	str	r3, [r4, #4]
 8006af0:	bf04      	itt	eq
 8006af2:	1852      	addeq	r2, r2, r1
 8006af4:	6022      	streq	r2, [r4, #0]
 8006af6:	602c      	str	r4, [r5, #0]
 8006af8:	e7ec      	b.n	8006ad4 <_free_r+0x28>
 8006afa:	461a      	mov	r2, r3
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b10b      	cbz	r3, 8006b04 <_free_r+0x58>
 8006b00:	42a3      	cmp	r3, r4
 8006b02:	d9fa      	bls.n	8006afa <_free_r+0x4e>
 8006b04:	6811      	ldr	r1, [r2, #0]
 8006b06:	1855      	adds	r5, r2, r1
 8006b08:	42a5      	cmp	r5, r4
 8006b0a:	d10b      	bne.n	8006b24 <_free_r+0x78>
 8006b0c:	6824      	ldr	r4, [r4, #0]
 8006b0e:	4421      	add	r1, r4
 8006b10:	1854      	adds	r4, r2, r1
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	6011      	str	r1, [r2, #0]
 8006b16:	d1dd      	bne.n	8006ad4 <_free_r+0x28>
 8006b18:	681c      	ldr	r4, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	6053      	str	r3, [r2, #4]
 8006b1e:	4421      	add	r1, r4
 8006b20:	6011      	str	r1, [r2, #0]
 8006b22:	e7d7      	b.n	8006ad4 <_free_r+0x28>
 8006b24:	d902      	bls.n	8006b2c <_free_r+0x80>
 8006b26:	230c      	movs	r3, #12
 8006b28:	6003      	str	r3, [r0, #0]
 8006b2a:	e7d3      	b.n	8006ad4 <_free_r+0x28>
 8006b2c:	6825      	ldr	r5, [r4, #0]
 8006b2e:	1961      	adds	r1, r4, r5
 8006b30:	428b      	cmp	r3, r1
 8006b32:	bf04      	itt	eq
 8006b34:	6819      	ldreq	r1, [r3, #0]
 8006b36:	685b      	ldreq	r3, [r3, #4]
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	bf04      	itt	eq
 8006b3c:	1949      	addeq	r1, r1, r5
 8006b3e:	6021      	streq	r1, [r4, #0]
 8006b40:	6054      	str	r4, [r2, #4]
 8006b42:	e7c7      	b.n	8006ad4 <_free_r+0x28>
 8006b44:	b003      	add	sp, #12
 8006b46:	bd30      	pop	{r4, r5, pc}
 8006b48:	20000138 	.word	0x20000138

08006b4c <_malloc_r>:
 8006b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4e:	1ccd      	adds	r5, r1, #3
 8006b50:	f025 0503 	bic.w	r5, r5, #3
 8006b54:	3508      	adds	r5, #8
 8006b56:	2d0c      	cmp	r5, #12
 8006b58:	bf38      	it	cc
 8006b5a:	250c      	movcc	r5, #12
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	4606      	mov	r6, r0
 8006b60:	db01      	blt.n	8006b66 <_malloc_r+0x1a>
 8006b62:	42a9      	cmp	r1, r5
 8006b64:	d903      	bls.n	8006b6e <_malloc_r+0x22>
 8006b66:	230c      	movs	r3, #12
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b6e:	f000 f87d 	bl	8006c6c <__malloc_lock>
 8006b72:	4921      	ldr	r1, [pc, #132]	; (8006bf8 <_malloc_r+0xac>)
 8006b74:	680a      	ldr	r2, [r1, #0]
 8006b76:	4614      	mov	r4, r2
 8006b78:	b99c      	cbnz	r4, 8006ba2 <_malloc_r+0x56>
 8006b7a:	4f20      	ldr	r7, [pc, #128]	; (8006bfc <_malloc_r+0xb0>)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	b923      	cbnz	r3, 8006b8a <_malloc_r+0x3e>
 8006b80:	4621      	mov	r1, r4
 8006b82:	4630      	mov	r0, r6
 8006b84:	f000 f862 	bl	8006c4c <_sbrk_r>
 8006b88:	6038      	str	r0, [r7, #0]
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f000 f85d 	bl	8006c4c <_sbrk_r>
 8006b92:	1c43      	adds	r3, r0, #1
 8006b94:	d123      	bne.n	8006bde <_malloc_r+0x92>
 8006b96:	230c      	movs	r3, #12
 8006b98:	6033      	str	r3, [r6, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 f86c 	bl	8006c78 <__malloc_unlock>
 8006ba0:	e7e3      	b.n	8006b6a <_malloc_r+0x1e>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	1b5b      	subs	r3, r3, r5
 8006ba6:	d417      	bmi.n	8006bd8 <_malloc_r+0x8c>
 8006ba8:	2b0b      	cmp	r3, #11
 8006baa:	d903      	bls.n	8006bb4 <_malloc_r+0x68>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	441c      	add	r4, r3
 8006bb0:	6025      	str	r5, [r4, #0]
 8006bb2:	e004      	b.n	8006bbe <_malloc_r+0x72>
 8006bb4:	6863      	ldr	r3, [r4, #4]
 8006bb6:	42a2      	cmp	r2, r4
 8006bb8:	bf0c      	ite	eq
 8006bba:	600b      	streq	r3, [r1, #0]
 8006bbc:	6053      	strne	r3, [r2, #4]
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	f000 f85a 	bl	8006c78 <__malloc_unlock>
 8006bc4:	f104 000b 	add.w	r0, r4, #11
 8006bc8:	1d23      	adds	r3, r4, #4
 8006bca:	f020 0007 	bic.w	r0, r0, #7
 8006bce:	1ac2      	subs	r2, r0, r3
 8006bd0:	d0cc      	beq.n	8006b6c <_malloc_r+0x20>
 8006bd2:	1a1b      	subs	r3, r3, r0
 8006bd4:	50a3      	str	r3, [r4, r2]
 8006bd6:	e7c9      	b.n	8006b6c <_malloc_r+0x20>
 8006bd8:	4622      	mov	r2, r4
 8006bda:	6864      	ldr	r4, [r4, #4]
 8006bdc:	e7cc      	b.n	8006b78 <_malloc_r+0x2c>
 8006bde:	1cc4      	adds	r4, r0, #3
 8006be0:	f024 0403 	bic.w	r4, r4, #3
 8006be4:	42a0      	cmp	r0, r4
 8006be6:	d0e3      	beq.n	8006bb0 <_malloc_r+0x64>
 8006be8:	1a21      	subs	r1, r4, r0
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 f82e 	bl	8006c4c <_sbrk_r>
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1dd      	bne.n	8006bb0 <_malloc_r+0x64>
 8006bf4:	e7cf      	b.n	8006b96 <_malloc_r+0x4a>
 8006bf6:	bf00      	nop
 8006bf8:	20000138 	.word	0x20000138
 8006bfc:	2000013c 	.word	0x2000013c

08006c00 <_realloc_r>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	4607      	mov	r7, r0
 8006c04:	4614      	mov	r4, r2
 8006c06:	460e      	mov	r6, r1
 8006c08:	b921      	cbnz	r1, 8006c14 <_realloc_r+0x14>
 8006c0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c0e:	4611      	mov	r1, r2
 8006c10:	f7ff bf9c 	b.w	8006b4c <_malloc_r>
 8006c14:	b922      	cbnz	r2, 8006c20 <_realloc_r+0x20>
 8006c16:	f7ff ff49 	bl	8006aac <_free_r>
 8006c1a:	4625      	mov	r5, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c20:	f000 f830 	bl	8006c84 <_malloc_usable_size_r>
 8006c24:	42a0      	cmp	r0, r4
 8006c26:	d20f      	bcs.n	8006c48 <_realloc_r+0x48>
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f7ff ff8e 	bl	8006b4c <_malloc_r>
 8006c30:	4605      	mov	r5, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d0f2      	beq.n	8006c1c <_realloc_r+0x1c>
 8006c36:	4631      	mov	r1, r6
 8006c38:	4622      	mov	r2, r4
 8006c3a:	f7ff fbf7 	bl	800642c <memcpy>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ff33 	bl	8006aac <_free_r>
 8006c46:	e7e9      	b.n	8006c1c <_realloc_r+0x1c>
 8006c48:	4635      	mov	r5, r6
 8006c4a:	e7e7      	b.n	8006c1c <_realloc_r+0x1c>

08006c4c <_sbrk_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4d06      	ldr	r5, [pc, #24]	; (8006c68 <_sbrk_r+0x1c>)
 8006c50:	2300      	movs	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	4608      	mov	r0, r1
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	f7fb fb9e 	bl	8002398 <_sbrk>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d102      	bne.n	8006c66 <_sbrk_r+0x1a>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	b103      	cbz	r3, 8006c66 <_sbrk_r+0x1a>
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	2000031c 	.word	0x2000031c

08006c6c <__malloc_lock>:
 8006c6c:	4801      	ldr	r0, [pc, #4]	; (8006c74 <__malloc_lock+0x8>)
 8006c6e:	f000 b811 	b.w	8006c94 <__retarget_lock_acquire_recursive>
 8006c72:	bf00      	nop
 8006c74:	20000324 	.word	0x20000324

08006c78 <__malloc_unlock>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__malloc_unlock+0x8>)
 8006c7a:	f000 b80c 	b.w	8006c96 <__retarget_lock_release_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000324 	.word	0x20000324

08006c84 <_malloc_usable_size_r>:
 8006c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c88:	1f18      	subs	r0, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bfbc      	itt	lt
 8006c8e:	580b      	ldrlt	r3, [r1, r0]
 8006c90:	18c0      	addlt	r0, r0, r3
 8006c92:	4770      	bx	lr

08006c94 <__retarget_lock_acquire_recursive>:
 8006c94:	4770      	bx	lr

08006c96 <__retarget_lock_release_recursive>:
 8006c96:	4770      	bx	lr

08006c98 <sin>:
 8006c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c9a:	ec53 2b10 	vmov	r2, r3, d0
 8006c9e:	4826      	ldr	r0, [pc, #152]	; (8006d38 <sin+0xa0>)
 8006ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ca4:	4281      	cmp	r1, r0
 8006ca6:	dc07      	bgt.n	8006cb8 <sin+0x20>
 8006ca8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006d30 <sin+0x98>
 8006cac:	2000      	movs	r0, #0
 8006cae:	f000 fe5b 	bl	8007968 <__kernel_sin>
 8006cb2:	ec51 0b10 	vmov	r0, r1, d0
 8006cb6:	e007      	b.n	8006cc8 <sin+0x30>
 8006cb8:	4820      	ldr	r0, [pc, #128]	; (8006d3c <sin+0xa4>)
 8006cba:	4281      	cmp	r1, r0
 8006cbc:	dd09      	ble.n	8006cd2 <sin+0x3a>
 8006cbe:	ee10 0a10 	vmov	r0, s0
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	f7f9 fae8 	bl	8000298 <__aeabi_dsub>
 8006cc8:	ec41 0b10 	vmov	d0, r0, r1
 8006ccc:	b005      	add	sp, #20
 8006cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8006cd2:	4668      	mov	r0, sp
 8006cd4:	f000 f834 	bl	8006d40 <__ieee754_rem_pio2>
 8006cd8:	f000 0003 	and.w	r0, r0, #3
 8006cdc:	2801      	cmp	r0, #1
 8006cde:	d008      	beq.n	8006cf2 <sin+0x5a>
 8006ce0:	2802      	cmp	r0, #2
 8006ce2:	d00d      	beq.n	8006d00 <sin+0x68>
 8006ce4:	b9d0      	cbnz	r0, 8006d1c <sin+0x84>
 8006ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cea:	ed9d 0b00 	vldr	d0, [sp]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e7dd      	b.n	8006cae <sin+0x16>
 8006cf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006cf6:	ed9d 0b00 	vldr	d0, [sp]
 8006cfa:	f000 fa2d 	bl	8007158 <__kernel_cos>
 8006cfe:	e7d8      	b.n	8006cb2 <sin+0x1a>
 8006d00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d04:	ed9d 0b00 	vldr	d0, [sp]
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f000 fe2d 	bl	8007968 <__kernel_sin>
 8006d0e:	ec53 2b10 	vmov	r2, r3, d0
 8006d12:	ee10 0a10 	vmov	r0, s0
 8006d16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d1a:	e7d5      	b.n	8006cc8 <sin+0x30>
 8006d1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d20:	ed9d 0b00 	vldr	d0, [sp]
 8006d24:	f000 fa18 	bl	8007158 <__kernel_cos>
 8006d28:	e7f1      	b.n	8006d0e <sin+0x76>
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w
	...
 8006d38:	3fe921fb 	.word	0x3fe921fb
 8006d3c:	7fefffff 	.word	0x7fefffff

08006d40 <__ieee754_rem_pio2>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	ed2d 8b02 	vpush	{d8}
 8006d48:	ec55 4b10 	vmov	r4, r5, d0
 8006d4c:	4bca      	ldr	r3, [pc, #808]	; (8007078 <__ieee754_rem_pio2+0x338>)
 8006d4e:	b08b      	sub	sp, #44	; 0x2c
 8006d50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006d54:	4598      	cmp	r8, r3
 8006d56:	4682      	mov	sl, r0
 8006d58:	9502      	str	r5, [sp, #8]
 8006d5a:	dc08      	bgt.n	8006d6e <__ieee754_rem_pio2+0x2e>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	ed80 0b00 	vstr	d0, [r0]
 8006d64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006d68:	f04f 0b00 	mov.w	fp, #0
 8006d6c:	e028      	b.n	8006dc0 <__ieee754_rem_pio2+0x80>
 8006d6e:	4bc3      	ldr	r3, [pc, #780]	; (800707c <__ieee754_rem_pio2+0x33c>)
 8006d70:	4598      	cmp	r8, r3
 8006d72:	dc78      	bgt.n	8006e66 <__ieee754_rem_pio2+0x126>
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	4ec2      	ldr	r6, [pc, #776]	; (8007080 <__ieee754_rem_pio2+0x340>)
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	ee10 0a10 	vmov	r0, s0
 8006d7e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007040 <__ieee754_rem_pio2+0x300>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	4629      	mov	r1, r5
 8006d86:	dd39      	ble.n	8006dfc <__ieee754_rem_pio2+0xbc>
 8006d88:	f7f9 fa86 	bl	8000298 <__aeabi_dsub>
 8006d8c:	45b0      	cmp	r8, r6
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	d01b      	beq.n	8006dcc <__ieee754_rem_pio2+0x8c>
 8006d94:	a3ac      	add	r3, pc, #688	; (adr r3, 8007048 <__ieee754_rem_pio2+0x308>)
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fa7d 	bl	8000298 <__aeabi_dsub>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	e9ca 2300 	strd	r2, r3, [sl]
 8006da6:	4620      	mov	r0, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7f9 fa75 	bl	8000298 <__aeabi_dsub>
 8006dae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007048 <__ieee754_rem_pio2+0x308>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fa70 	bl	8000298 <__aeabi_dsub>
 8006db8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006dbc:	f04f 0b01 	mov.w	fp, #1
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	b00b      	add	sp, #44	; 0x2c
 8006dc4:	ecbd 8b02 	vpop	{d8}
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007050 <__ieee754_rem_pio2+0x310>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7f9 fa61 	bl	8000298 <__aeabi_dsub>
 8006dd6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007058 <__ieee754_rem_pio2+0x318>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	4604      	mov	r4, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	f7f9 fa5a 	bl	8000298 <__aeabi_dsub>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	e9ca 2300 	strd	r2, r3, [sl]
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	f7f9 fa52 	bl	8000298 <__aeabi_dsub>
 8006df4:	a398      	add	r3, pc, #608	; (adr r3, 8007058 <__ieee754_rem_pio2+0x318>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	e7db      	b.n	8006db4 <__ieee754_rem_pio2+0x74>
 8006dfc:	f7f9 fa4e 	bl	800029c <__adddf3>
 8006e00:	45b0      	cmp	r8, r6
 8006e02:	4604      	mov	r4, r0
 8006e04:	460d      	mov	r5, r1
 8006e06:	d016      	beq.n	8006e36 <__ieee754_rem_pio2+0xf6>
 8006e08:	a38f      	add	r3, pc, #572	; (adr r3, 8007048 <__ieee754_rem_pio2+0x308>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fa45 	bl	800029c <__adddf3>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	e9ca 2300 	strd	r2, r3, [sl]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 fa3b 	bl	8000298 <__aeabi_dsub>
 8006e22:	a389      	add	r3, pc, #548	; (adr r3, 8007048 <__ieee754_rem_pio2+0x308>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fa38 	bl	800029c <__adddf3>
 8006e2c:	f04f 3bff 	mov.w	fp, #4294967295
 8006e30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e34:	e7c4      	b.n	8006dc0 <__ieee754_rem_pio2+0x80>
 8006e36:	a386      	add	r3, pc, #536	; (adr r3, 8007050 <__ieee754_rem_pio2+0x310>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fa2e 	bl	800029c <__adddf3>
 8006e40:	a385      	add	r3, pc, #532	; (adr r3, 8007058 <__ieee754_rem_pio2+0x318>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	4604      	mov	r4, r0
 8006e48:	460d      	mov	r5, r1
 8006e4a:	f7f9 fa27 	bl	800029c <__adddf3>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9ca 2300 	strd	r2, r3, [sl]
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fa1d 	bl	8000298 <__aeabi_dsub>
 8006e5e:	a37e      	add	r3, pc, #504	; (adr r3, 8007058 <__ieee754_rem_pio2+0x318>)
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	e7e0      	b.n	8006e28 <__ieee754_rem_pio2+0xe8>
 8006e66:	4b87      	ldr	r3, [pc, #540]	; (8007084 <__ieee754_rem_pio2+0x344>)
 8006e68:	4598      	cmp	r8, r3
 8006e6a:	f300 80d9 	bgt.w	8007020 <__ieee754_rem_pio2+0x2e0>
 8006e6e:	f000 fe39 	bl	8007ae4 <fabs>
 8006e72:	ec55 4b10 	vmov	r4, r5, d0
 8006e76:	ee10 0a10 	vmov	r0, s0
 8006e7a:	a379      	add	r3, pc, #484	; (adr r3, 8007060 <__ieee754_rem_pio2+0x320>)
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	4629      	mov	r1, r5
 8006e82:	f7f9 fbc1 	bl	8000608 <__aeabi_dmul>
 8006e86:	4b80      	ldr	r3, [pc, #512]	; (8007088 <__ieee754_rem_pio2+0x348>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f7f9 fa07 	bl	800029c <__adddf3>
 8006e8e:	f7f9 fe55 	bl	8000b3c <__aeabi_d2iz>
 8006e92:	4683      	mov	fp, r0
 8006e94:	f7f9 fb4e 	bl	8000534 <__aeabi_i2d>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	ec43 2b18 	vmov	d8, r2, r3
 8006ea0:	a367      	add	r3, pc, #412	; (adr r3, 8007040 <__ieee754_rem_pio2+0x300>)
 8006ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea6:	f7f9 fbaf 	bl	8000608 <__aeabi_dmul>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 f9f1 	bl	8000298 <__aeabi_dsub>
 8006eb6:	a364      	add	r3, pc, #400	; (adr r3, 8007048 <__ieee754_rem_pio2+0x308>)
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	ec51 0b18 	vmov	r0, r1, d8
 8006ec4:	f7f9 fba0 	bl	8000608 <__aeabi_dmul>
 8006ec8:	f1bb 0f1f 	cmp.w	fp, #31
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	dc0d      	bgt.n	8006eee <__ieee754_rem_pio2+0x1ae>
 8006ed2:	4b6e      	ldr	r3, [pc, #440]	; (800708c <__ieee754_rem_pio2+0x34c>)
 8006ed4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	4543      	cmp	r3, r8
 8006ede:	d006      	beq.n	8006eee <__ieee754_rem_pio2+0x1ae>
 8006ee0:	4622      	mov	r2, r4
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f7f9 f9d6 	bl	8000298 <__aeabi_dsub>
 8006eec:	e00f      	b.n	8006f0e <__ieee754_rem_pio2+0x1ce>
 8006eee:	462b      	mov	r3, r5
 8006ef0:	4622      	mov	r2, r4
 8006ef2:	4630      	mov	r0, r6
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	f7f9 f9cf 	bl	8000298 <__aeabi_dsub>
 8006efa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006f08:	f1b8 0f10 	cmp.w	r8, #16
 8006f0c:	dc02      	bgt.n	8006f14 <__ieee754_rem_pio2+0x1d4>
 8006f0e:	e9ca 0100 	strd	r0, r1, [sl]
 8006f12:	e039      	b.n	8006f88 <__ieee754_rem_pio2+0x248>
 8006f14:	a34e      	add	r3, pc, #312	; (adr r3, 8007050 <__ieee754_rem_pio2+0x310>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	ec51 0b18 	vmov	r0, r1, d8
 8006f1e:	f7f9 fb73 	bl	8000608 <__aeabi_dmul>
 8006f22:	4604      	mov	r4, r0
 8006f24:	460d      	mov	r5, r1
 8006f26:	4602      	mov	r2, r0
 8006f28:	460b      	mov	r3, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 f9b3 	bl	8000298 <__aeabi_dsub>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4680      	mov	r8, r0
 8006f38:	4689      	mov	r9, r1
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	f7f9 f9ab 	bl	8000298 <__aeabi_dsub>
 8006f42:	4622      	mov	r2, r4
 8006f44:	462b      	mov	r3, r5
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	a343      	add	r3, pc, #268	; (adr r3, 8007058 <__ieee754_rem_pio2+0x318>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	4604      	mov	r4, r0
 8006f52:	460d      	mov	r5, r1
 8006f54:	ec51 0b18 	vmov	r0, r1, d8
 8006f58:	f7f9 fb56 	bl	8000608 <__aeabi_dmul>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	462b      	mov	r3, r5
 8006f60:	f7f9 f99a 	bl	8000298 <__aeabi_dsub>
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	4640      	mov	r0, r8
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f7f9 f992 	bl	8000298 <__aeabi_dsub>
 8006f74:	9a03      	ldr	r2, [sp, #12]
 8006f76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b31      	cmp	r3, #49	; 0x31
 8006f7e:	dc24      	bgt.n	8006fca <__ieee754_rem_pio2+0x28a>
 8006f80:	e9ca 0100 	strd	r0, r1, [sl]
 8006f84:	4646      	mov	r6, r8
 8006f86:	464f      	mov	r7, r9
 8006f88:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	4642      	mov	r2, r8
 8006f90:	464b      	mov	r3, r9
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 f980 	bl	8000298 <__aeabi_dsub>
 8006f98:	462b      	mov	r3, r5
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	f7f9 f97c 	bl	8000298 <__aeabi_dsub>
 8006fa0:	9b02      	ldr	r3, [sp, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fa8:	f6bf af0a 	bge.w	8006dc0 <__ieee754_rem_pio2+0x80>
 8006fac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006fb0:	f8ca 3004 	str.w	r3, [sl, #4]
 8006fb4:	f8ca 8000 	str.w	r8, [sl]
 8006fb8:	f8ca 0008 	str.w	r0, [sl, #8]
 8006fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc0:	f8ca 300c 	str.w	r3, [sl, #12]
 8006fc4:	f1cb 0b00 	rsb	fp, fp, #0
 8006fc8:	e6fa      	b.n	8006dc0 <__ieee754_rem_pio2+0x80>
 8006fca:	a327      	add	r3, pc, #156	; (adr r3, 8007068 <__ieee754_rem_pio2+0x328>)
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	ec51 0b18 	vmov	r0, r1, d8
 8006fd4:	f7f9 fb18 	bl	8000608 <__aeabi_dmul>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4649      	mov	r1, r9
 8006fe4:	f7f9 f958 	bl	8000298 <__aeabi_dsub>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4606      	mov	r6, r0
 8006fee:	460f      	mov	r7, r1
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	f7f9 f950 	bl	8000298 <__aeabi_dsub>
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	f7f9 f94c 	bl	8000298 <__aeabi_dsub>
 8007000:	a31b      	add	r3, pc, #108	; (adr r3, 8007070 <__ieee754_rem_pio2+0x330>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	ec51 0b18 	vmov	r0, r1, d8
 800700e:	f7f9 fafb 	bl	8000608 <__aeabi_dmul>
 8007012:	4622      	mov	r2, r4
 8007014:	462b      	mov	r3, r5
 8007016:	f7f9 f93f 	bl	8000298 <__aeabi_dsub>
 800701a:	4604      	mov	r4, r0
 800701c:	460d      	mov	r5, r1
 800701e:	e75f      	b.n	8006ee0 <__ieee754_rem_pio2+0x1a0>
 8007020:	4b1b      	ldr	r3, [pc, #108]	; (8007090 <__ieee754_rem_pio2+0x350>)
 8007022:	4598      	cmp	r8, r3
 8007024:	dd36      	ble.n	8007094 <__ieee754_rem_pio2+0x354>
 8007026:	ee10 2a10 	vmov	r2, s0
 800702a:	462b      	mov	r3, r5
 800702c:	4620      	mov	r0, r4
 800702e:	4629      	mov	r1, r5
 8007030:	f7f9 f932 	bl	8000298 <__aeabi_dsub>
 8007034:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007038:	e9ca 0100 	strd	r0, r1, [sl]
 800703c:	e694      	b.n	8006d68 <__ieee754_rem_pio2+0x28>
 800703e:	bf00      	nop
 8007040:	54400000 	.word	0x54400000
 8007044:	3ff921fb 	.word	0x3ff921fb
 8007048:	1a626331 	.word	0x1a626331
 800704c:	3dd0b461 	.word	0x3dd0b461
 8007050:	1a600000 	.word	0x1a600000
 8007054:	3dd0b461 	.word	0x3dd0b461
 8007058:	2e037073 	.word	0x2e037073
 800705c:	3ba3198a 	.word	0x3ba3198a
 8007060:	6dc9c883 	.word	0x6dc9c883
 8007064:	3fe45f30 	.word	0x3fe45f30
 8007068:	2e000000 	.word	0x2e000000
 800706c:	3ba3198a 	.word	0x3ba3198a
 8007070:	252049c1 	.word	0x252049c1
 8007074:	397b839a 	.word	0x397b839a
 8007078:	3fe921fb 	.word	0x3fe921fb
 800707c:	4002d97b 	.word	0x4002d97b
 8007080:	3ff921fb 	.word	0x3ff921fb
 8007084:	413921fb 	.word	0x413921fb
 8007088:	3fe00000 	.word	0x3fe00000
 800708c:	0800800c 	.word	0x0800800c
 8007090:	7fefffff 	.word	0x7fefffff
 8007094:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007098:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800709c:	ee10 0a10 	vmov	r0, s0
 80070a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80070a4:	ee10 6a10 	vmov	r6, s0
 80070a8:	460f      	mov	r7, r1
 80070aa:	f7f9 fd47 	bl	8000b3c <__aeabi_d2iz>
 80070ae:	f7f9 fa41 	bl	8000534 <__aeabi_i2d>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070be:	f7f9 f8eb 	bl	8000298 <__aeabi_dsub>
 80070c2:	4b22      	ldr	r3, [pc, #136]	; (800714c <__ieee754_rem_pio2+0x40c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	f7f9 fa9f 	bl	8000608 <__aeabi_dmul>
 80070ca:	460f      	mov	r7, r1
 80070cc:	4606      	mov	r6, r0
 80070ce:	f7f9 fd35 	bl	8000b3c <__aeabi_d2iz>
 80070d2:	f7f9 fa2f 	bl	8000534 <__aeabi_i2d>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	4630      	mov	r0, r6
 80070dc:	4639      	mov	r1, r7
 80070de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070e2:	f7f9 f8d9 	bl	8000298 <__aeabi_dsub>
 80070e6:	4b19      	ldr	r3, [pc, #100]	; (800714c <__ieee754_rem_pio2+0x40c>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	f7f9 fa8d 	bl	8000608 <__aeabi_dmul>
 80070ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80070f2:	ad04      	add	r5, sp, #16
 80070f4:	f04f 0803 	mov.w	r8, #3
 80070f8:	46a9      	mov	r9, r5
 80070fa:	2600      	movs	r6, #0
 80070fc:	2700      	movs	r7, #0
 80070fe:	4632      	mov	r2, r6
 8007100:	463b      	mov	r3, r7
 8007102:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007106:	46c3      	mov	fp, r8
 8007108:	3d08      	subs	r5, #8
 800710a:	f108 38ff 	add.w	r8, r8, #4294967295
 800710e:	f7f9 fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007112:	2800      	cmp	r0, #0
 8007114:	d1f3      	bne.n	80070fe <__ieee754_rem_pio2+0x3be>
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <__ieee754_rem_pio2+0x410>)
 8007118:	9301      	str	r3, [sp, #4]
 800711a:	2302      	movs	r3, #2
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	4622      	mov	r2, r4
 8007120:	465b      	mov	r3, fp
 8007122:	4651      	mov	r1, sl
 8007124:	4648      	mov	r0, r9
 8007126:	f000 f8df 	bl	80072e8 <__kernel_rem_pio2>
 800712a:	9b02      	ldr	r3, [sp, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	4683      	mov	fp, r0
 8007130:	f6bf ae46 	bge.w	8006dc0 <__ieee754_rem_pio2+0x80>
 8007134:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007138:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800713c:	f8ca 3004 	str.w	r3, [sl, #4]
 8007140:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007144:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007148:	e73a      	b.n	8006fc0 <__ieee754_rem_pio2+0x280>
 800714a:	bf00      	nop
 800714c:	41700000 	.word	0x41700000
 8007150:	0800808c 	.word	0x0800808c
 8007154:	00000000 	.word	0x00000000

08007158 <__kernel_cos>:
 8007158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	ec57 6b10 	vmov	r6, r7, d0
 8007160:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007164:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007168:	ed8d 1b00 	vstr	d1, [sp]
 800716c:	da07      	bge.n	800717e <__kernel_cos+0x26>
 800716e:	ee10 0a10 	vmov	r0, s0
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fce2 	bl	8000b3c <__aeabi_d2iz>
 8007178:	2800      	cmp	r0, #0
 800717a:	f000 8088 	beq.w	800728e <__kernel_cos+0x136>
 800717e:	4632      	mov	r2, r6
 8007180:	463b      	mov	r3, r7
 8007182:	4630      	mov	r0, r6
 8007184:	4639      	mov	r1, r7
 8007186:	f7f9 fa3f 	bl	8000608 <__aeabi_dmul>
 800718a:	4b51      	ldr	r3, [pc, #324]	; (80072d0 <__kernel_cos+0x178>)
 800718c:	2200      	movs	r2, #0
 800718e:	4604      	mov	r4, r0
 8007190:	460d      	mov	r5, r1
 8007192:	f7f9 fa39 	bl	8000608 <__aeabi_dmul>
 8007196:	a340      	add	r3, pc, #256	; (adr r3, 8007298 <__kernel_cos+0x140>)
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	4682      	mov	sl, r0
 800719e:	468b      	mov	fp, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7f9 fa30 	bl	8000608 <__aeabi_dmul>
 80071a8:	a33d      	add	r3, pc, #244	; (adr r3, 80072a0 <__kernel_cos+0x148>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 f875 	bl	800029c <__adddf3>
 80071b2:	4622      	mov	r2, r4
 80071b4:	462b      	mov	r3, r5
 80071b6:	f7f9 fa27 	bl	8000608 <__aeabi_dmul>
 80071ba:	a33b      	add	r3, pc, #236	; (adr r3, 80072a8 <__kernel_cos+0x150>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	f7f9 f86a 	bl	8000298 <__aeabi_dsub>
 80071c4:	4622      	mov	r2, r4
 80071c6:	462b      	mov	r3, r5
 80071c8:	f7f9 fa1e 	bl	8000608 <__aeabi_dmul>
 80071cc:	a338      	add	r3, pc, #224	; (adr r3, 80072b0 <__kernel_cos+0x158>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f7f9 f863 	bl	800029c <__adddf3>
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	f7f9 fa15 	bl	8000608 <__aeabi_dmul>
 80071de:	a336      	add	r3, pc, #216	; (adr r3, 80072b8 <__kernel_cos+0x160>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f9 f858 	bl	8000298 <__aeabi_dsub>
 80071e8:	4622      	mov	r2, r4
 80071ea:	462b      	mov	r3, r5
 80071ec:	f7f9 fa0c 	bl	8000608 <__aeabi_dmul>
 80071f0:	a333      	add	r3, pc, #204	; (adr r3, 80072c0 <__kernel_cos+0x168>)
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f851 	bl	800029c <__adddf3>
 80071fa:	4622      	mov	r2, r4
 80071fc:	462b      	mov	r3, r5
 80071fe:	f7f9 fa03 	bl	8000608 <__aeabi_dmul>
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	f7f9 f9ff 	bl	8000608 <__aeabi_dmul>
 800720a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800720e:	4604      	mov	r4, r0
 8007210:	460d      	mov	r5, r1
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 f9f7 	bl	8000608 <__aeabi_dmul>
 800721a:	460b      	mov	r3, r1
 800721c:	4602      	mov	r2, r0
 800721e:	4629      	mov	r1, r5
 8007220:	4620      	mov	r0, r4
 8007222:	f7f9 f839 	bl	8000298 <__aeabi_dsub>
 8007226:	4b2b      	ldr	r3, [pc, #172]	; (80072d4 <__kernel_cos+0x17c>)
 8007228:	4598      	cmp	r8, r3
 800722a:	4606      	mov	r6, r0
 800722c:	460f      	mov	r7, r1
 800722e:	dc10      	bgt.n	8007252 <__kernel_cos+0xfa>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	f7f9 f82e 	bl	8000298 <__aeabi_dsub>
 800723c:	460b      	mov	r3, r1
 800723e:	4926      	ldr	r1, [pc, #152]	; (80072d8 <__kernel_cos+0x180>)
 8007240:	4602      	mov	r2, r0
 8007242:	2000      	movs	r0, #0
 8007244:	f7f9 f828 	bl	8000298 <__aeabi_dsub>
 8007248:	ec41 0b10 	vmov	d0, r0, r1
 800724c:	b003      	add	sp, #12
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	4b22      	ldr	r3, [pc, #136]	; (80072dc <__kernel_cos+0x184>)
 8007254:	4920      	ldr	r1, [pc, #128]	; (80072d8 <__kernel_cos+0x180>)
 8007256:	4598      	cmp	r8, r3
 8007258:	bfcc      	ite	gt
 800725a:	4d21      	ldrgt	r5, [pc, #132]	; (80072e0 <__kernel_cos+0x188>)
 800725c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007260:	2400      	movs	r4, #0
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	2000      	movs	r0, #0
 8007268:	f7f9 f816 	bl	8000298 <__aeabi_dsub>
 800726c:	4622      	mov	r2, r4
 800726e:	4680      	mov	r8, r0
 8007270:	4689      	mov	r9, r1
 8007272:	462b      	mov	r3, r5
 8007274:	4650      	mov	r0, sl
 8007276:	4659      	mov	r1, fp
 8007278:	f7f9 f80e 	bl	8000298 <__aeabi_dsub>
 800727c:	4632      	mov	r2, r6
 800727e:	463b      	mov	r3, r7
 8007280:	f7f9 f80a 	bl	8000298 <__aeabi_dsub>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4640      	mov	r0, r8
 800728a:	4649      	mov	r1, r9
 800728c:	e7da      	b.n	8007244 <__kernel_cos+0xec>
 800728e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80072c8 <__kernel_cos+0x170>
 8007292:	e7db      	b.n	800724c <__kernel_cos+0xf4>
 8007294:	f3af 8000 	nop.w
 8007298:	be8838d4 	.word	0xbe8838d4
 800729c:	bda8fae9 	.word	0xbda8fae9
 80072a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80072a4:	3e21ee9e 	.word	0x3e21ee9e
 80072a8:	809c52ad 	.word	0x809c52ad
 80072ac:	3e927e4f 	.word	0x3e927e4f
 80072b0:	19cb1590 	.word	0x19cb1590
 80072b4:	3efa01a0 	.word	0x3efa01a0
 80072b8:	16c15177 	.word	0x16c15177
 80072bc:	3f56c16c 	.word	0x3f56c16c
 80072c0:	5555554c 	.word	0x5555554c
 80072c4:	3fa55555 	.word	0x3fa55555
 80072c8:	00000000 	.word	0x00000000
 80072cc:	3ff00000 	.word	0x3ff00000
 80072d0:	3fe00000 	.word	0x3fe00000
 80072d4:	3fd33332 	.word	0x3fd33332
 80072d8:	3ff00000 	.word	0x3ff00000
 80072dc:	3fe90000 	.word	0x3fe90000
 80072e0:	3fd20000 	.word	0x3fd20000
 80072e4:	00000000 	.word	0x00000000

080072e8 <__kernel_rem_pio2>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	ed2d 8b02 	vpush	{d8}
 80072f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80072f4:	f112 0f14 	cmn.w	r2, #20
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	9101      	str	r1, [sp, #4]
 80072fc:	4bc6      	ldr	r3, [pc, #792]	; (8007618 <__kernel_rem_pio2+0x330>)
 80072fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007300:	9009      	str	r0, [sp, #36]	; 0x24
 8007302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007306:	9304      	str	r3, [sp, #16]
 8007308:	9b08      	ldr	r3, [sp, #32]
 800730a:	f103 33ff 	add.w	r3, r3, #4294967295
 800730e:	bfa8      	it	ge
 8007310:	1ed4      	subge	r4, r2, #3
 8007312:	9306      	str	r3, [sp, #24]
 8007314:	bfb2      	itee	lt
 8007316:	2400      	movlt	r4, #0
 8007318:	2318      	movge	r3, #24
 800731a:	fb94 f4f3 	sdivge	r4, r4, r3
 800731e:	f06f 0317 	mvn.w	r3, #23
 8007322:	fb04 3303 	mla	r3, r4, r3, r3
 8007326:	eb03 0a02 	add.w	sl, r3, r2
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	9a06      	ldr	r2, [sp, #24]
 800732e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007608 <__kernel_rem_pio2+0x320>
 8007332:	eb03 0802 	add.w	r8, r3, r2
 8007336:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007338:	1aa7      	subs	r7, r4, r2
 800733a:	ae20      	add	r6, sp, #128	; 0x80
 800733c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007340:	2500      	movs	r5, #0
 8007342:	4545      	cmp	r5, r8
 8007344:	dd18      	ble.n	8007378 <__kernel_rem_pio2+0x90>
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800734c:	aa20      	add	r2, sp, #128	; 0x80
 800734e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007608 <__kernel_rem_pio2+0x320>
 8007352:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007356:	f1c3 0301 	rsb	r3, r3, #1
 800735a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800735e:	9307      	str	r3, [sp, #28]
 8007360:	9b07      	ldr	r3, [sp, #28]
 8007362:	9a04      	ldr	r2, [sp, #16]
 8007364:	4443      	add	r3, r8
 8007366:	429a      	cmp	r2, r3
 8007368:	db2f      	blt.n	80073ca <__kernel_rem_pio2+0xe2>
 800736a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800736e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007372:	462f      	mov	r7, r5
 8007374:	2600      	movs	r6, #0
 8007376:	e01b      	b.n	80073b0 <__kernel_rem_pio2+0xc8>
 8007378:	42ef      	cmn	r7, r5
 800737a:	d407      	bmi.n	800738c <__kernel_rem_pio2+0xa4>
 800737c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007380:	f7f9 f8d8 	bl	8000534 <__aeabi_i2d>
 8007384:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007388:	3501      	adds	r5, #1
 800738a:	e7da      	b.n	8007342 <__kernel_rem_pio2+0x5a>
 800738c:	ec51 0b18 	vmov	r0, r1, d8
 8007390:	e7f8      	b.n	8007384 <__kernel_rem_pio2+0x9c>
 8007392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007396:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800739a:	f7f9 f935 	bl	8000608 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a6:	f7f8 ff79 	bl	800029c <__adddf3>
 80073aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ae:	3601      	adds	r6, #1
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	429e      	cmp	r6, r3
 80073b4:	f1a7 0708 	sub.w	r7, r7, #8
 80073b8:	ddeb      	ble.n	8007392 <__kernel_rem_pio2+0xaa>
 80073ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073be:	3508      	adds	r5, #8
 80073c0:	ecab 7b02 	vstmia	fp!, {d7}
 80073c4:	f108 0801 	add.w	r8, r8, #1
 80073c8:	e7ca      	b.n	8007360 <__kernel_rem_pio2+0x78>
 80073ca:	9b04      	ldr	r3, [sp, #16]
 80073cc:	aa0c      	add	r2, sp, #48	; 0x30
 80073ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073d4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80073da:	9c04      	ldr	r4, [sp, #16]
 80073dc:	930a      	str	r3, [sp, #40]	; 0x28
 80073de:	ab98      	add	r3, sp, #608	; 0x260
 80073e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073e4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80073e8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80073ec:	f8cd b008 	str.w	fp, [sp, #8]
 80073f0:	4625      	mov	r5, r4
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	dc78      	bgt.n	80074e8 <__kernel_rem_pio2+0x200>
 80073f6:	ec47 6b10 	vmov	d0, r6, r7
 80073fa:	4650      	mov	r0, sl
 80073fc:	f000 fbfc 	bl	8007bf8 <scalbn>
 8007400:	ec57 6b10 	vmov	r6, r7, d0
 8007404:	2200      	movs	r2, #0
 8007406:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800740a:	ee10 0a10 	vmov	r0, s0
 800740e:	4639      	mov	r1, r7
 8007410:	f7f9 f8fa 	bl	8000608 <__aeabi_dmul>
 8007414:	ec41 0b10 	vmov	d0, r0, r1
 8007418:	f000 fb6e 	bl	8007af8 <floor>
 800741c:	4b7f      	ldr	r3, [pc, #508]	; (800761c <__kernel_rem_pio2+0x334>)
 800741e:	ec51 0b10 	vmov	r0, r1, d0
 8007422:	2200      	movs	r2, #0
 8007424:	f7f9 f8f0 	bl	8000608 <__aeabi_dmul>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f8 ff32 	bl	8000298 <__aeabi_dsub>
 8007434:	460f      	mov	r7, r1
 8007436:	4606      	mov	r6, r0
 8007438:	f7f9 fb80 	bl	8000b3c <__aeabi_d2iz>
 800743c:	9007      	str	r0, [sp, #28]
 800743e:	f7f9 f879 	bl	8000534 <__aeabi_i2d>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4630      	mov	r0, r6
 8007448:	4639      	mov	r1, r7
 800744a:	f7f8 ff25 	bl	8000298 <__aeabi_dsub>
 800744e:	f1ba 0f00 	cmp.w	sl, #0
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	dd70      	ble.n	800753a <__kernel_rem_pio2+0x252>
 8007458:	1e62      	subs	r2, r4, #1
 800745a:	ab0c      	add	r3, sp, #48	; 0x30
 800745c:	9d07      	ldr	r5, [sp, #28]
 800745e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007462:	f1ca 0118 	rsb	r1, sl, #24
 8007466:	fa40 f301 	asr.w	r3, r0, r1
 800746a:	441d      	add	r5, r3
 800746c:	408b      	lsls	r3, r1
 800746e:	1ac0      	subs	r0, r0, r3
 8007470:	ab0c      	add	r3, sp, #48	; 0x30
 8007472:	9507      	str	r5, [sp, #28]
 8007474:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007478:	f1ca 0317 	rsb	r3, sl, #23
 800747c:	fa40 f303 	asr.w	r3, r0, r3
 8007480:	9302      	str	r3, [sp, #8]
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd66      	ble.n	8007556 <__kernel_rem_pio2+0x26e>
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	2200      	movs	r2, #0
 800748c:	3301      	adds	r3, #1
 800748e:	9307      	str	r3, [sp, #28]
 8007490:	4615      	mov	r5, r2
 8007492:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007496:	4294      	cmp	r4, r2
 8007498:	f300 8099 	bgt.w	80075ce <__kernel_rem_pio2+0x2e6>
 800749c:	f1ba 0f00 	cmp.w	sl, #0
 80074a0:	dd07      	ble.n	80074b2 <__kernel_rem_pio2+0x1ca>
 80074a2:	f1ba 0f01 	cmp.w	sl, #1
 80074a6:	f000 80a5 	beq.w	80075f4 <__kernel_rem_pio2+0x30c>
 80074aa:	f1ba 0f02 	cmp.w	sl, #2
 80074ae:	f000 80c1 	beq.w	8007634 <__kernel_rem_pio2+0x34c>
 80074b2:	9b02      	ldr	r3, [sp, #8]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d14e      	bne.n	8007556 <__kernel_rem_pio2+0x26e>
 80074b8:	4632      	mov	r2, r6
 80074ba:	463b      	mov	r3, r7
 80074bc:	4958      	ldr	r1, [pc, #352]	; (8007620 <__kernel_rem_pio2+0x338>)
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f8 feea 	bl	8000298 <__aeabi_dsub>
 80074c4:	4606      	mov	r6, r0
 80074c6:	460f      	mov	r7, r1
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d044      	beq.n	8007556 <__kernel_rem_pio2+0x26e>
 80074cc:	4650      	mov	r0, sl
 80074ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007610 <__kernel_rem_pio2+0x328>
 80074d2:	f000 fb91 	bl	8007bf8 <scalbn>
 80074d6:	4630      	mov	r0, r6
 80074d8:	4639      	mov	r1, r7
 80074da:	ec53 2b10 	vmov	r2, r3, d0
 80074de:	f7f8 fedb 	bl	8000298 <__aeabi_dsub>
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	e036      	b.n	8007556 <__kernel_rem_pio2+0x26e>
 80074e8:	4b4e      	ldr	r3, [pc, #312]	; (8007624 <__kernel_rem_pio2+0x33c>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 f88a 	bl	8000608 <__aeabi_dmul>
 80074f4:	f7f9 fb22 	bl	8000b3c <__aeabi_d2iz>
 80074f8:	f7f9 f81c 	bl	8000534 <__aeabi_i2d>
 80074fc:	4b4a      	ldr	r3, [pc, #296]	; (8007628 <__kernel_rem_pio2+0x340>)
 80074fe:	2200      	movs	r2, #0
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	f7f9 f880 	bl	8000608 <__aeabi_dmul>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 fec2 	bl	8000298 <__aeabi_dsub>
 8007514:	f7f9 fb12 	bl	8000b3c <__aeabi_d2iz>
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	f843 0b04 	str.w	r0, [r3], #4
 800751e:	3d01      	subs	r5, #1
 8007520:	9302      	str	r3, [sp, #8]
 8007522:	ab70      	add	r3, sp, #448	; 0x1c0
 8007524:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752c:	4640      	mov	r0, r8
 800752e:	4649      	mov	r1, r9
 8007530:	f7f8 feb4 	bl	800029c <__adddf3>
 8007534:	4606      	mov	r6, r0
 8007536:	460f      	mov	r7, r1
 8007538:	e75b      	b.n	80073f2 <__kernel_rem_pio2+0x10a>
 800753a:	d105      	bne.n	8007548 <__kernel_rem_pio2+0x260>
 800753c:	1e63      	subs	r3, r4, #1
 800753e:	aa0c      	add	r2, sp, #48	; 0x30
 8007540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007544:	15c3      	asrs	r3, r0, #23
 8007546:	e79b      	b.n	8007480 <__kernel_rem_pio2+0x198>
 8007548:	4b38      	ldr	r3, [pc, #224]	; (800762c <__kernel_rem_pio2+0x344>)
 800754a:	2200      	movs	r2, #0
 800754c:	f7f9 fae2 	bl	8000b14 <__aeabi_dcmpge>
 8007550:	2800      	cmp	r0, #0
 8007552:	d139      	bne.n	80075c8 <__kernel_rem_pio2+0x2e0>
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	2200      	movs	r2, #0
 8007558:	2300      	movs	r3, #0
 800755a:	4630      	mov	r0, r6
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007562:	2800      	cmp	r0, #0
 8007564:	f000 80b4 	beq.w	80076d0 <__kernel_rem_pio2+0x3e8>
 8007568:	f104 3bff 	add.w	fp, r4, #4294967295
 800756c:	465b      	mov	r3, fp
 800756e:	2200      	movs	r2, #0
 8007570:	9904      	ldr	r1, [sp, #16]
 8007572:	428b      	cmp	r3, r1
 8007574:	da65      	bge.n	8007642 <__kernel_rem_pio2+0x35a>
 8007576:	2a00      	cmp	r2, #0
 8007578:	d07b      	beq.n	8007672 <__kernel_rem_pio2+0x38a>
 800757a:	ab0c      	add	r3, sp, #48	; 0x30
 800757c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007580:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80a0 	beq.w	80076ca <__kernel_rem_pio2+0x3e2>
 800758a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007610 <__kernel_rem_pio2+0x328>
 800758e:	4650      	mov	r0, sl
 8007590:	f000 fb32 	bl	8007bf8 <scalbn>
 8007594:	4f23      	ldr	r7, [pc, #140]	; (8007624 <__kernel_rem_pio2+0x33c>)
 8007596:	ec55 4b10 	vmov	r4, r5, d0
 800759a:	46d8      	mov	r8, fp
 800759c:	2600      	movs	r6, #0
 800759e:	f1b8 0f00 	cmp.w	r8, #0
 80075a2:	f280 80cf 	bge.w	8007744 <__kernel_rem_pio2+0x45c>
 80075a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007608 <__kernel_rem_pio2+0x320>
 80075aa:	465f      	mov	r7, fp
 80075ac:	f04f 0800 	mov.w	r8, #0
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f2c0 80fd 	blt.w	80077b0 <__kernel_rem_pio2+0x4c8>
 80075b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80075b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007630 <__kernel_rem_pio2+0x348>
 80075bc:	ec55 4b18 	vmov	r4, r5, d8
 80075c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80075c4:	2600      	movs	r6, #0
 80075c6:	e0e5      	b.n	8007794 <__kernel_rem_pio2+0x4ac>
 80075c8:	2302      	movs	r3, #2
 80075ca:	9302      	str	r3, [sp, #8]
 80075cc:	e75c      	b.n	8007488 <__kernel_rem_pio2+0x1a0>
 80075ce:	f8db 3000 	ldr.w	r3, [fp]
 80075d2:	b955      	cbnz	r5, 80075ea <__kernel_rem_pio2+0x302>
 80075d4:	b123      	cbz	r3, 80075e0 <__kernel_rem_pio2+0x2f8>
 80075d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80075da:	f8cb 3000 	str.w	r3, [fp]
 80075de:	2301      	movs	r3, #1
 80075e0:	3201      	adds	r2, #1
 80075e2:	f10b 0b04 	add.w	fp, fp, #4
 80075e6:	461d      	mov	r5, r3
 80075e8:	e755      	b.n	8007496 <__kernel_rem_pio2+0x1ae>
 80075ea:	1acb      	subs	r3, r1, r3
 80075ec:	f8cb 3000 	str.w	r3, [fp]
 80075f0:	462b      	mov	r3, r5
 80075f2:	e7f5      	b.n	80075e0 <__kernel_rem_pio2+0x2f8>
 80075f4:	1e62      	subs	r2, r4, #1
 80075f6:	ab0c      	add	r3, sp, #48	; 0x30
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007600:	a90c      	add	r1, sp, #48	; 0x30
 8007602:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007606:	e754      	b.n	80074b2 <__kernel_rem_pio2+0x1ca>
	...
 8007614:	3ff00000 	.word	0x3ff00000
 8007618:	080081d8 	.word	0x080081d8
 800761c:	40200000 	.word	0x40200000
 8007620:	3ff00000 	.word	0x3ff00000
 8007624:	3e700000 	.word	0x3e700000
 8007628:	41700000 	.word	0x41700000
 800762c:	3fe00000 	.word	0x3fe00000
 8007630:	08008198 	.word	0x08008198
 8007634:	1e62      	subs	r2, r4, #1
 8007636:	ab0c      	add	r3, sp, #48	; 0x30
 8007638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007640:	e7de      	b.n	8007600 <__kernel_rem_pio2+0x318>
 8007642:	a90c      	add	r1, sp, #48	; 0x30
 8007644:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007648:	3b01      	subs	r3, #1
 800764a:	430a      	orrs	r2, r1
 800764c:	e790      	b.n	8007570 <__kernel_rem_pio2+0x288>
 800764e:	3301      	adds	r3, #1
 8007650:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007654:	2900      	cmp	r1, #0
 8007656:	d0fa      	beq.n	800764e <__kernel_rem_pio2+0x366>
 8007658:	9a08      	ldr	r2, [sp, #32]
 800765a:	18e3      	adds	r3, r4, r3
 800765c:	18a6      	adds	r6, r4, r2
 800765e:	aa20      	add	r2, sp, #128	; 0x80
 8007660:	1c65      	adds	r5, r4, #1
 8007662:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	9b02      	ldr	r3, [sp, #8]
 800766a:	42ab      	cmp	r3, r5
 800766c:	da04      	bge.n	8007678 <__kernel_rem_pio2+0x390>
 800766e:	461c      	mov	r4, r3
 8007670:	e6b5      	b.n	80073de <__kernel_rem_pio2+0xf6>
 8007672:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007674:	2301      	movs	r3, #1
 8007676:	e7eb      	b.n	8007650 <__kernel_rem_pio2+0x368>
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800767e:	f7f8 ff59 	bl	8000534 <__aeabi_i2d>
 8007682:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	46b3      	mov	fp, r6
 800768a:	461c      	mov	r4, r3
 800768c:	2700      	movs	r7, #0
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	9b06      	ldr	r3, [sp, #24]
 8007698:	429f      	cmp	r7, r3
 800769a:	dd06      	ble.n	80076aa <__kernel_rem_pio2+0x3c2>
 800769c:	ab70      	add	r3, sp, #448	; 0x1c0
 800769e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80076a2:	e9c3 8900 	strd	r8, r9, [r3]
 80076a6:	3501      	adds	r5, #1
 80076a8:	e7de      	b.n	8007668 <__kernel_rem_pio2+0x380>
 80076aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80076ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80076b2:	f7f8 ffa9 	bl	8000608 <__aeabi_dmul>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fded 	bl	800029c <__adddf3>
 80076c2:	3701      	adds	r7, #1
 80076c4:	4680      	mov	r8, r0
 80076c6:	4689      	mov	r9, r1
 80076c8:	e7e5      	b.n	8007696 <__kernel_rem_pio2+0x3ae>
 80076ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076ce:	e754      	b.n	800757a <__kernel_rem_pio2+0x292>
 80076d0:	ec47 6b10 	vmov	d0, r6, r7
 80076d4:	f1ca 0000 	rsb	r0, sl, #0
 80076d8:	f000 fa8e 	bl	8007bf8 <scalbn>
 80076dc:	ec57 6b10 	vmov	r6, r7, d0
 80076e0:	4b9f      	ldr	r3, [pc, #636]	; (8007960 <__kernel_rem_pio2+0x678>)
 80076e2:	ee10 0a10 	vmov	r0, s0
 80076e6:	2200      	movs	r2, #0
 80076e8:	4639      	mov	r1, r7
 80076ea:	f7f9 fa13 	bl	8000b14 <__aeabi_dcmpge>
 80076ee:	b300      	cbz	r0, 8007732 <__kernel_rem_pio2+0x44a>
 80076f0:	4b9c      	ldr	r3, [pc, #624]	; (8007964 <__kernel_rem_pio2+0x67c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	4630      	mov	r0, r6
 80076f6:	4639      	mov	r1, r7
 80076f8:	f7f8 ff86 	bl	8000608 <__aeabi_dmul>
 80076fc:	f7f9 fa1e 	bl	8000b3c <__aeabi_d2iz>
 8007700:	4605      	mov	r5, r0
 8007702:	f7f8 ff17 	bl	8000534 <__aeabi_i2d>
 8007706:	4b96      	ldr	r3, [pc, #600]	; (8007960 <__kernel_rem_pio2+0x678>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 ff7d 	bl	8000608 <__aeabi_dmul>
 800770e:	460b      	mov	r3, r1
 8007710:	4602      	mov	r2, r0
 8007712:	4639      	mov	r1, r7
 8007714:	4630      	mov	r0, r6
 8007716:	f7f8 fdbf 	bl	8000298 <__aeabi_dsub>
 800771a:	f7f9 fa0f 	bl	8000b3c <__aeabi_d2iz>
 800771e:	f104 0b01 	add.w	fp, r4, #1
 8007722:	ab0c      	add	r3, sp, #48	; 0x30
 8007724:	f10a 0a18 	add.w	sl, sl, #24
 8007728:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800772c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007730:	e72b      	b.n	800758a <__kernel_rem_pio2+0x2a2>
 8007732:	4630      	mov	r0, r6
 8007734:	4639      	mov	r1, r7
 8007736:	f7f9 fa01 	bl	8000b3c <__aeabi_d2iz>
 800773a:	ab0c      	add	r3, sp, #48	; 0x30
 800773c:	46a3      	mov	fp, r4
 800773e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007742:	e722      	b.n	800758a <__kernel_rem_pio2+0x2a2>
 8007744:	ab70      	add	r3, sp, #448	; 0x1c0
 8007746:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800774a:	ab0c      	add	r3, sp, #48	; 0x30
 800774c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007750:	f7f8 fef0 	bl	8000534 <__aeabi_i2d>
 8007754:	4622      	mov	r2, r4
 8007756:	462b      	mov	r3, r5
 8007758:	f7f8 ff56 	bl	8000608 <__aeabi_dmul>
 800775c:	4632      	mov	r2, r6
 800775e:	e9c9 0100 	strd	r0, r1, [r9]
 8007762:	463b      	mov	r3, r7
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 ff4e 	bl	8000608 <__aeabi_dmul>
 800776c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	e713      	b.n	800759e <__kernel_rem_pio2+0x2b6>
 8007776:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800777a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800777e:	f7f8 ff43 	bl	8000608 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	f7f8 fd87 	bl	800029c <__adddf3>
 800778e:	3601      	adds	r6, #1
 8007790:	4604      	mov	r4, r0
 8007792:	460d      	mov	r5, r1
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	429e      	cmp	r6, r3
 8007798:	dc01      	bgt.n	800779e <__kernel_rem_pio2+0x4b6>
 800779a:	45b0      	cmp	r8, r6
 800779c:	daeb      	bge.n	8007776 <__kernel_rem_pio2+0x48e>
 800779e:	ab48      	add	r3, sp, #288	; 0x120
 80077a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80077a4:	e9c3 4500 	strd	r4, r5, [r3]
 80077a8:	3f01      	subs	r7, #1
 80077aa:	f108 0801 	add.w	r8, r8, #1
 80077ae:	e6ff      	b.n	80075b0 <__kernel_rem_pio2+0x2c8>
 80077b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	dc0b      	bgt.n	80077ce <__kernel_rem_pio2+0x4e6>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dc6e      	bgt.n	8007898 <__kernel_rem_pio2+0x5b0>
 80077ba:	d045      	beq.n	8007848 <__kernel_rem_pio2+0x560>
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	f003 0007 	and.w	r0, r3, #7
 80077c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80077c6:	ecbd 8b02 	vpop	{d8}
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d1f3      	bne.n	80077bc <__kernel_rem_pio2+0x4d4>
 80077d4:	ab48      	add	r3, sp, #288	; 0x120
 80077d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80077da:	46d0      	mov	r8, sl
 80077dc:	46d9      	mov	r9, fp
 80077de:	f1b9 0f00 	cmp.w	r9, #0
 80077e2:	f1a8 0808 	sub.w	r8, r8, #8
 80077e6:	dc64      	bgt.n	80078b2 <__kernel_rem_pio2+0x5ca>
 80077e8:	465c      	mov	r4, fp
 80077ea:	2c01      	cmp	r4, #1
 80077ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80077f0:	dc7e      	bgt.n	80078f0 <__kernel_rem_pio2+0x608>
 80077f2:	2000      	movs	r0, #0
 80077f4:	2100      	movs	r1, #0
 80077f6:	f1bb 0f01 	cmp.w	fp, #1
 80077fa:	f300 8097 	bgt.w	800792c <__kernel_rem_pio2+0x644>
 80077fe:	9b02      	ldr	r3, [sp, #8]
 8007800:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8007804:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007808:	2b00      	cmp	r3, #0
 800780a:	f040 8099 	bne.w	8007940 <__kernel_rem_pio2+0x658>
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	e9c3 5600 	strd	r5, r6, [r3]
 8007814:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007818:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800781c:	e7ce      	b.n	80077bc <__kernel_rem_pio2+0x4d4>
 800781e:	ab48      	add	r3, sp, #288	; 0x120
 8007820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fd38 	bl	800029c <__adddf3>
 800782c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007830:	f1bb 0f00 	cmp.w	fp, #0
 8007834:	daf3      	bge.n	800781e <__kernel_rem_pio2+0x536>
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	b113      	cbz	r3, 8007840 <__kernel_rem_pio2+0x558>
 800783a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800783e:	4619      	mov	r1, r3
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	e9c3 0100 	strd	r0, r1, [r3]
 8007846:	e7b9      	b.n	80077bc <__kernel_rem_pio2+0x4d4>
 8007848:	2000      	movs	r0, #0
 800784a:	2100      	movs	r1, #0
 800784c:	e7f0      	b.n	8007830 <__kernel_rem_pio2+0x548>
 800784e:	ab48      	add	r3, sp, #288	; 0x120
 8007850:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007858:	f7f8 fd20 	bl	800029c <__adddf3>
 800785c:	3c01      	subs	r4, #1
 800785e:	2c00      	cmp	r4, #0
 8007860:	daf5      	bge.n	800784e <__kernel_rem_pio2+0x566>
 8007862:	9b02      	ldr	r3, [sp, #8]
 8007864:	b1e3      	cbz	r3, 80078a0 <__kernel_rem_pio2+0x5b8>
 8007866:	4602      	mov	r2, r0
 8007868:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800786c:	9c01      	ldr	r4, [sp, #4]
 800786e:	e9c4 2300 	strd	r2, r3, [r4]
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800787a:	f7f8 fd0d 	bl	8000298 <__aeabi_dsub>
 800787e:	ad4a      	add	r5, sp, #296	; 0x128
 8007880:	2401      	movs	r4, #1
 8007882:	45a3      	cmp	fp, r4
 8007884:	da0f      	bge.n	80078a6 <__kernel_rem_pio2+0x5be>
 8007886:	9b02      	ldr	r3, [sp, #8]
 8007888:	b113      	cbz	r3, 8007890 <__kernel_rem_pio2+0x5a8>
 800788a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788e:	4619      	mov	r1, r3
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007896:	e791      	b.n	80077bc <__kernel_rem_pio2+0x4d4>
 8007898:	465c      	mov	r4, fp
 800789a:	2000      	movs	r0, #0
 800789c:	2100      	movs	r1, #0
 800789e:	e7de      	b.n	800785e <__kernel_rem_pio2+0x576>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	e7e2      	b.n	800786c <__kernel_rem_pio2+0x584>
 80078a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80078aa:	f7f8 fcf7 	bl	800029c <__adddf3>
 80078ae:	3401      	adds	r4, #1
 80078b0:	e7e7      	b.n	8007882 <__kernel_rem_pio2+0x59a>
 80078b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80078b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80078ba:	4620      	mov	r0, r4
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fceb 	bl	800029c <__adddf3>
 80078c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 fce1 	bl	8000298 <__aeabi_dsub>
 80078d6:	4632      	mov	r2, r6
 80078d8:	463b      	mov	r3, r7
 80078da:	f7f8 fcdf 	bl	800029c <__adddf3>
 80078de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80078e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80078e6:	ed88 7b00 	vstr	d7, [r8]
 80078ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80078ee:	e776      	b.n	80077de <__kernel_rem_pio2+0x4f6>
 80078f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80078f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80078f8:	4640      	mov	r0, r8
 80078fa:	4632      	mov	r2, r6
 80078fc:	463b      	mov	r3, r7
 80078fe:	4649      	mov	r1, r9
 8007900:	f7f8 fccc 	bl	800029c <__adddf3>
 8007904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f8 fcc2 	bl	8000298 <__aeabi_dsub>
 8007914:	4632      	mov	r2, r6
 8007916:	463b      	mov	r3, r7
 8007918:	f7f8 fcc0 	bl	800029c <__adddf3>
 800791c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007920:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007924:	ed8a 7b00 	vstr	d7, [sl]
 8007928:	3c01      	subs	r4, #1
 800792a:	e75e      	b.n	80077ea <__kernel_rem_pio2+0x502>
 800792c:	ab48      	add	r3, sp, #288	; 0x120
 800792e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fcb1 	bl	800029c <__adddf3>
 800793a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800793e:	e75a      	b.n	80077f6 <__kernel_rem_pio2+0x50e>
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	9a01      	ldr	r2, [sp, #4]
 8007944:	601d      	str	r5, [r3, #0]
 8007946:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800794a:	605c      	str	r4, [r3, #4]
 800794c:	609f      	str	r7, [r3, #8]
 800794e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007952:	60d3      	str	r3, [r2, #12]
 8007954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007958:	6110      	str	r0, [r2, #16]
 800795a:	6153      	str	r3, [r2, #20]
 800795c:	e72e      	b.n	80077bc <__kernel_rem_pio2+0x4d4>
 800795e:	bf00      	nop
 8007960:	41700000 	.word	0x41700000
 8007964:	3e700000 	.word	0x3e700000

08007968 <__kernel_sin>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ed2d 8b04 	vpush	{d8-d9}
 8007970:	eeb0 8a41 	vmov.f32	s16, s2
 8007974:	eef0 8a61 	vmov.f32	s17, s3
 8007978:	ec55 4b10 	vmov	r4, r5, d0
 800797c:	b083      	sub	sp, #12
 800797e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007982:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007986:	9001      	str	r0, [sp, #4]
 8007988:	da06      	bge.n	8007998 <__kernel_sin+0x30>
 800798a:	ee10 0a10 	vmov	r0, s0
 800798e:	4629      	mov	r1, r5
 8007990:	f7f9 f8d4 	bl	8000b3c <__aeabi_d2iz>
 8007994:	2800      	cmp	r0, #0
 8007996:	d051      	beq.n	8007a3c <__kernel_sin+0xd4>
 8007998:	4622      	mov	r2, r4
 800799a:	462b      	mov	r3, r5
 800799c:	4620      	mov	r0, r4
 800799e:	4629      	mov	r1, r5
 80079a0:	f7f8 fe32 	bl	8000608 <__aeabi_dmul>
 80079a4:	4682      	mov	sl, r0
 80079a6:	468b      	mov	fp, r1
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fe2a 	bl	8000608 <__aeabi_dmul>
 80079b4:	a341      	add	r3, pc, #260	; (adr r3, 8007abc <__kernel_sin+0x154>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	4680      	mov	r8, r0
 80079bc:	4689      	mov	r9, r1
 80079be:	4650      	mov	r0, sl
 80079c0:	4659      	mov	r1, fp
 80079c2:	f7f8 fe21 	bl	8000608 <__aeabi_dmul>
 80079c6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ac4 <__kernel_sin+0x15c>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f7f8 fc64 	bl	8000298 <__aeabi_dsub>
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	f7f8 fe18 	bl	8000608 <__aeabi_dmul>
 80079d8:	a33c      	add	r3, pc, #240	; (adr r3, 8007acc <__kernel_sin+0x164>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fc5d 	bl	800029c <__adddf3>
 80079e2:	4652      	mov	r2, sl
 80079e4:	465b      	mov	r3, fp
 80079e6:	f7f8 fe0f 	bl	8000608 <__aeabi_dmul>
 80079ea:	a33a      	add	r3, pc, #232	; (adr r3, 8007ad4 <__kernel_sin+0x16c>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fc52 	bl	8000298 <__aeabi_dsub>
 80079f4:	4652      	mov	r2, sl
 80079f6:	465b      	mov	r3, fp
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	a337      	add	r3, pc, #220	; (adr r3, 8007adc <__kernel_sin+0x174>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fc4b 	bl	800029c <__adddf3>
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	4606      	mov	r6, r0
 8007a0a:	460f      	mov	r7, r1
 8007a0c:	b9eb      	cbnz	r3, 8007a4a <__kernel_sin+0xe2>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	460b      	mov	r3, r1
 8007a12:	4650      	mov	r0, sl
 8007a14:	4659      	mov	r1, fp
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	a325      	add	r3, pc, #148	; (adr r3, 8007ab0 <__kernel_sin+0x148>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f7f8 fc3a 	bl	8000298 <__aeabi_dsub>
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	f7f8 fdee 	bl	8000608 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4620      	mov	r0, r4
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7f8 fc32 	bl	800029c <__adddf3>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	460d      	mov	r5, r1
 8007a3c:	ec45 4b10 	vmov	d0, r4, r5
 8007a40:	b003      	add	sp, #12
 8007a42:	ecbd 8b04 	vpop	{d8-d9}
 8007a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a4a:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <__kernel_sin+0x150>)
 8007a4c:	ec51 0b18 	vmov	r0, r1, d8
 8007a50:	2200      	movs	r2, #0
 8007a52:	f7f8 fdd9 	bl	8000608 <__aeabi_dmul>
 8007a56:	4632      	mov	r2, r6
 8007a58:	ec41 0b19 	vmov	d9, r0, r1
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f8 fdd1 	bl	8000608 <__aeabi_dmul>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	ec51 0b19 	vmov	r0, r1, d9
 8007a6e:	f7f8 fc13 	bl	8000298 <__aeabi_dsub>
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	f7f8 fdc7 	bl	8000608 <__aeabi_dmul>
 8007a7a:	ec53 2b18 	vmov	r2, r3, d8
 8007a7e:	f7f8 fc0b 	bl	8000298 <__aeabi_dsub>
 8007a82:	a30b      	add	r3, pc, #44	; (adr r3, 8007ab0 <__kernel_sin+0x148>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7f8 fdba 	bl	8000608 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4630      	mov	r0, r6
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	f7f8 fbfe 	bl	800029c <__adddf3>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fbf6 	bl	8000298 <__aeabi_dsub>
 8007aac:	e7c4      	b.n	8007a38 <__kernel_sin+0xd0>
 8007aae:	bf00      	nop
 8007ab0:	55555549 	.word	0x55555549
 8007ab4:	3fc55555 	.word	0x3fc55555
 8007ab8:	3fe00000 	.word	0x3fe00000
 8007abc:	5acfd57c 	.word	0x5acfd57c
 8007ac0:	3de5d93a 	.word	0x3de5d93a
 8007ac4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ac8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007acc:	57b1fe7d 	.word	0x57b1fe7d
 8007ad0:	3ec71de3 	.word	0x3ec71de3
 8007ad4:	19c161d5 	.word	0x19c161d5
 8007ad8:	3f2a01a0 	.word	0x3f2a01a0
 8007adc:	1110f8a6 	.word	0x1110f8a6
 8007ae0:	3f811111 	.word	0x3f811111

08007ae4 <fabs>:
 8007ae4:	ec51 0b10 	vmov	r0, r1, d0
 8007ae8:	ee10 2a10 	vmov	r2, s0
 8007aec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007af0:	ec43 2b10 	vmov	d0, r2, r3
 8007af4:	4770      	bx	lr
	...

08007af8 <floor>:
 8007af8:	ec51 0b10 	vmov	r0, r1, d0
 8007afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007b04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007b08:	2e13      	cmp	r6, #19
 8007b0a:	ee10 5a10 	vmov	r5, s0
 8007b0e:	ee10 8a10 	vmov	r8, s0
 8007b12:	460c      	mov	r4, r1
 8007b14:	dc32      	bgt.n	8007b7c <floor+0x84>
 8007b16:	2e00      	cmp	r6, #0
 8007b18:	da14      	bge.n	8007b44 <floor+0x4c>
 8007b1a:	a333      	add	r3, pc, #204	; (adr r3, 8007be8 <floor+0xf0>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fbbc 	bl	800029c <__adddf3>
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	f7f8 fffe 	bl	8000b28 <__aeabi_dcmpgt>
 8007b2c:	b138      	cbz	r0, 8007b3e <floor+0x46>
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	da57      	bge.n	8007be2 <floor+0xea>
 8007b32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007b36:	431d      	orrs	r5, r3
 8007b38:	d001      	beq.n	8007b3e <floor+0x46>
 8007b3a:	4c2d      	ldr	r4, [pc, #180]	; (8007bf0 <floor+0xf8>)
 8007b3c:	2500      	movs	r5, #0
 8007b3e:	4621      	mov	r1, r4
 8007b40:	4628      	mov	r0, r5
 8007b42:	e025      	b.n	8007b90 <floor+0x98>
 8007b44:	4f2b      	ldr	r7, [pc, #172]	; (8007bf4 <floor+0xfc>)
 8007b46:	4137      	asrs	r7, r6
 8007b48:	ea01 0307 	and.w	r3, r1, r7
 8007b4c:	4303      	orrs	r3, r0
 8007b4e:	d01f      	beq.n	8007b90 <floor+0x98>
 8007b50:	a325      	add	r3, pc, #148	; (adr r3, 8007be8 <floor+0xf0>)
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fba1 	bl	800029c <__adddf3>
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f7f8 ffe3 	bl	8000b28 <__aeabi_dcmpgt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d0eb      	beq.n	8007b3e <floor+0x46>
 8007b66:	2c00      	cmp	r4, #0
 8007b68:	bfbe      	ittt	lt
 8007b6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007b6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007b72:	19a4      	addlt	r4, r4, r6
 8007b74:	ea24 0407 	bic.w	r4, r4, r7
 8007b78:	2500      	movs	r5, #0
 8007b7a:	e7e0      	b.n	8007b3e <floor+0x46>
 8007b7c:	2e33      	cmp	r6, #51	; 0x33
 8007b7e:	dd0b      	ble.n	8007b98 <floor+0xa0>
 8007b80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b84:	d104      	bne.n	8007b90 <floor+0x98>
 8007b86:	ee10 2a10 	vmov	r2, s0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	f7f8 fb86 	bl	800029c <__adddf3>
 8007b90:	ec41 0b10 	vmov	d0, r0, r1
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba0:	fa23 f707 	lsr.w	r7, r3, r7
 8007ba4:	4207      	tst	r7, r0
 8007ba6:	d0f3      	beq.n	8007b90 <floor+0x98>
 8007ba8:	a30f      	add	r3, pc, #60	; (adr r3, 8007be8 <floor+0xf0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fb75 	bl	800029c <__adddf3>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f7f8 ffb7 	bl	8000b28 <__aeabi_dcmpgt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0bf      	beq.n	8007b3e <floor+0x46>
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	da02      	bge.n	8007bc8 <floor+0xd0>
 8007bc2:	2e14      	cmp	r6, #20
 8007bc4:	d103      	bne.n	8007bce <floor+0xd6>
 8007bc6:	3401      	adds	r4, #1
 8007bc8:	ea25 0507 	bic.w	r5, r5, r7
 8007bcc:	e7b7      	b.n	8007b3e <floor+0x46>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007bd4:	fa03 f606 	lsl.w	r6, r3, r6
 8007bd8:	4435      	add	r5, r6
 8007bda:	4545      	cmp	r5, r8
 8007bdc:	bf38      	it	cc
 8007bde:	18e4      	addcc	r4, r4, r3
 8007be0:	e7f2      	b.n	8007bc8 <floor+0xd0>
 8007be2:	2500      	movs	r5, #0
 8007be4:	462c      	mov	r4, r5
 8007be6:	e7aa      	b.n	8007b3e <floor+0x46>
 8007be8:	8800759c 	.word	0x8800759c
 8007bec:	7e37e43c 	.word	0x7e37e43c
 8007bf0:	bff00000 	.word	0xbff00000
 8007bf4:	000fffff 	.word	0x000fffff

08007bf8 <scalbn>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	ec55 4b10 	vmov	r4, r5, d0
 8007bfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c02:	4606      	mov	r6, r0
 8007c04:	462b      	mov	r3, r5
 8007c06:	b99a      	cbnz	r2, 8007c30 <scalbn+0x38>
 8007c08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c0c:	4323      	orrs	r3, r4
 8007c0e:	d036      	beq.n	8007c7e <scalbn+0x86>
 8007c10:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <scalbn+0x100>)
 8007c12:	4629      	mov	r1, r5
 8007c14:	ee10 0a10 	vmov	r0, s0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f7f8 fcf5 	bl	8000608 <__aeabi_dmul>
 8007c1e:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <scalbn+0x104>)
 8007c20:	429e      	cmp	r6, r3
 8007c22:	4604      	mov	r4, r0
 8007c24:	460d      	mov	r5, r1
 8007c26:	da10      	bge.n	8007c4a <scalbn+0x52>
 8007c28:	a32b      	add	r3, pc, #172	; (adr r3, 8007cd8 <scalbn+0xe0>)
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	e03a      	b.n	8007ca6 <scalbn+0xae>
 8007c30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c34:	428a      	cmp	r2, r1
 8007c36:	d10c      	bne.n	8007c52 <scalbn+0x5a>
 8007c38:	ee10 2a10 	vmov	r2, s0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fb2c 	bl	800029c <__adddf3>
 8007c44:	4604      	mov	r4, r0
 8007c46:	460d      	mov	r5, r1
 8007c48:	e019      	b.n	8007c7e <scalbn+0x86>
 8007c4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c4e:	460b      	mov	r3, r1
 8007c50:	3a36      	subs	r2, #54	; 0x36
 8007c52:	4432      	add	r2, r6
 8007c54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c58:	428a      	cmp	r2, r1
 8007c5a:	dd08      	ble.n	8007c6e <scalbn+0x76>
 8007c5c:	2d00      	cmp	r5, #0
 8007c5e:	a120      	add	r1, pc, #128	; (adr r1, 8007ce0 <scalbn+0xe8>)
 8007c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c64:	da1c      	bge.n	8007ca0 <scalbn+0xa8>
 8007c66:	a120      	add	r1, pc, #128	; (adr r1, 8007ce8 <scalbn+0xf0>)
 8007c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c6c:	e018      	b.n	8007ca0 <scalbn+0xa8>
 8007c6e:	2a00      	cmp	r2, #0
 8007c70:	dd08      	ble.n	8007c84 <scalbn+0x8c>
 8007c72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c7e:	ec45 4b10 	vmov	d0, r4, r5
 8007c82:	bd70      	pop	{r4, r5, r6, pc}
 8007c84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c88:	da19      	bge.n	8007cbe <scalbn+0xc6>
 8007c8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007c94:	dd0a      	ble.n	8007cac <scalbn+0xb4>
 8007c96:	a112      	add	r1, pc, #72	; (adr r1, 8007ce0 <scalbn+0xe8>)
 8007c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e2      	bne.n	8007c66 <scalbn+0x6e>
 8007ca0:	a30f      	add	r3, pc, #60	; (adr r3, 8007ce0 <scalbn+0xe8>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fcaf 	bl	8000608 <__aeabi_dmul>
 8007caa:	e7cb      	b.n	8007c44 <scalbn+0x4c>
 8007cac:	a10a      	add	r1, pc, #40	; (adr r1, 8007cd8 <scalbn+0xe0>)
 8007cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0b8      	beq.n	8007c28 <scalbn+0x30>
 8007cb6:	a10e      	add	r1, pc, #56	; (adr r1, 8007cf0 <scalbn+0xf8>)
 8007cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cbc:	e7b4      	b.n	8007c28 <scalbn+0x30>
 8007cbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cc2:	3236      	adds	r2, #54	; 0x36
 8007cc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ccc:	4620      	mov	r0, r4
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <scalbn+0x108>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	e7e8      	b.n	8007ca6 <scalbn+0xae>
 8007cd4:	f3af 8000 	nop.w
 8007cd8:	c2f8f359 	.word	0xc2f8f359
 8007cdc:	01a56e1f 	.word	0x01a56e1f
 8007ce0:	8800759c 	.word	0x8800759c
 8007ce4:	7e37e43c 	.word	0x7e37e43c
 8007ce8:	8800759c 	.word	0x8800759c
 8007cec:	fe37e43c 	.word	0xfe37e43c
 8007cf0:	c2f8f359 	.word	0xc2f8f359
 8007cf4:	81a56e1f 	.word	0x81a56e1f
 8007cf8:	43500000 	.word	0x43500000
 8007cfc:	ffff3cb0 	.word	0xffff3cb0
 8007d00:	3c900000 	.word	0x3c900000

08007d04 <_init>:
 8007d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d06:	bf00      	nop
 8007d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d0a:	bc08      	pop	{r3}
 8007d0c:	469e      	mov	lr, r3
 8007d0e:	4770      	bx	lr

08007d10 <_fini>:
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d12:	bf00      	nop
 8007d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d16:	bc08      	pop	{r3}
 8007d18:	469e      	mov	lr, r3
 8007d1a:	4770      	bx	lr

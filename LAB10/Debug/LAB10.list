
LAB10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007be4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08007d88  08007d88  00017d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08008250  08008250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00018258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08008260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000098  080082f4  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080082f4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ce  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002396  00000000  00000000  00031792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111fd  00000000  00000000  0004dce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c57b  00000000  00000000  0005eee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b88  00000000  00000000  000fb4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d6c 	.word	0x08007d6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08007d6c 	.word	0x08007d6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b96e 	b.w	8000f60 <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8083 	bne.w	8000db2 <__udivmoddi4+0x116>
 8000cac:	428a      	cmp	r2, r1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	d947      	bls.n	8000d42 <__udivmoddi4+0xa6>
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b142      	cbz	r2, 8000cca <__udivmoddi4+0x2e>
 8000cb8:	f1c2 0020 	rsb	r0, r2, #32
 8000cbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc0:	4091      	lsls	r1, r2
 8000cc2:	4097      	lsls	r7, r2
 8000cc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000cc8:	4094      	lsls	r4, r2
 8000cca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cce:	0c23      	lsrs	r3, r4, #16
 8000cd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cd4:	fa1f fe87 	uxth.w	lr, r7
 8000cd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x60>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 8119 	bcs.w	8000f24 <__udivmoddi4+0x288>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 8116 	bls.w	8000f24 <__udivmoddi4+0x288>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	443b      	add	r3, r7
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x8c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	f080 8105 	bcs.w	8000f28 <__udivmoddi4+0x28c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8102 	bls.w	8000f28 <__udivmoddi4+0x28c>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa0>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	b902      	cbnz	r2, 8000d46 <__udivmoddi4+0xaa>
 8000d44:	deff      	udf	#255	; 0xff
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d150      	bne.n	8000df0 <__udivmoddi4+0x154>
 8000d4e:	1bcb      	subs	r3, r1, r7
 8000d50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d54:	fa1f f887 	uxth.w	r8, r7
 8000d58:	2601      	movs	r6, #1
 8000d5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d68:	fb08 f30c 	mul.w	r3, r8, ip
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d907      	bls.n	8000d80 <__udivmoddi4+0xe4>
 8000d70:	1879      	adds	r1, r7, r1
 8000d72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0xe2>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	f200 80e9 	bhi.w	8000f50 <__udivmoddi4+0x2b4>
 8000d7e:	4684      	mov	ip, r0
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	b2a3      	uxth	r3, r4
 8000d84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d90:	fb08 f800 	mul.w	r8, r8, r0
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0x10c>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9e:	d202      	bcs.n	8000da6 <__udivmoddi4+0x10a>
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	f200 80d9 	bhi.w	8000f58 <__udivmoddi4+0x2bc>
 8000da6:	4618      	mov	r0, r3
 8000da8:	eba4 0408 	sub.w	r4, r4, r8
 8000dac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db0:	e7bf      	b.n	8000d32 <__udivmoddi4+0x96>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x12e>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80b1 	beq.w	8000f1e <__udivmoddi4+0x282>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x1cc>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0x140>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80b8 	bhi.w	8000f4c <__udivmoddi4+0x2b0>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0103 	sbc.w	r1, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	468c      	mov	ip, r1
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0a8      	beq.n	8000d3c <__udivmoddi4+0xa0>
 8000dea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dee:	e7a5      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f603 	lsr.w	r6, r0, r3
 8000df8:	4097      	lsls	r7, r2
 8000dfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e02:	40d9      	lsrs	r1, r3
 8000e04:	4330      	orrs	r0, r6
 8000e06:	0c03      	lsrs	r3, r0, #16
 8000e08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb06 f108 	mul.w	r1, r6, r8
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x19c>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e2a:	f080 808d 	bcs.w	8000f48 <__udivmoddi4+0x2ac>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 808a 	bls.w	8000f48 <__udivmoddi4+0x2ac>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b281      	uxth	r1, r0
 8000e3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb00 f308 	mul.w	r3, r0, r8
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x1c4>
 8000e50:	1879      	adds	r1, r7, r1
 8000e52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e56:	d273      	bcs.n	8000f40 <__udivmoddi4+0x2a4>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d971      	bls.n	8000f40 <__udivmoddi4+0x2a4>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4439      	add	r1, r7
 8000e60:	1acb      	subs	r3, r1, r3
 8000e62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e66:	e778      	b.n	8000d5a <__udivmoddi4+0xbe>
 8000e68:	f1c6 0c20 	rsb	ip, r6, #32
 8000e6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e74:	431c      	orrs	r4, r3
 8000e76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e86:	431f      	orrs	r7, r3
 8000e88:	0c3b      	lsrs	r3, r7, #16
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fa1f f884 	uxth.w	r8, r4
 8000e92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x220>
 8000eaa:	1861      	adds	r1, r4, r1
 8000eac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eb0:	d248      	bcs.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb2:	458a      	cmp	sl, r1
 8000eb4:	d946      	bls.n	8000f44 <__udivmoddi4+0x2a8>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4421      	add	r1, r4
 8000ebc:	eba1 010a 	sub.w	r1, r1, sl
 8000ec0:	b2bf      	uxth	r7, r7
 8000ec2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ece:	fb00 f808 	mul.w	r8, r0, r8
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x24a>
 8000ed6:	19e7      	adds	r7, r4, r7
 8000ed8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000edc:	d22e      	bcs.n	8000f3c <__udivmoddi4+0x2a0>
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d92c      	bls.n	8000f3c <__udivmoddi4+0x2a0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4427      	add	r7, r4
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	eba7 0708 	sub.w	r7, r7, r8
 8000eee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	46c6      	mov	lr, r8
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	d31a      	bcc.n	8000f30 <__udivmoddi4+0x294>
 8000efa:	d017      	beq.n	8000f2c <__udivmoddi4+0x290>
 8000efc:	b15d      	cbz	r5, 8000f16 <__udivmoddi4+0x27a>
 8000efe:	ebb3 020e 	subs.w	r2, r3, lr
 8000f02:	eb67 0701 	sbc.w	r7, r7, r1
 8000f06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f0a:	40f2      	lsrs	r2, r6
 8000f0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f10:	40f7      	lsrs	r7, r6
 8000f12:	e9c5 2700 	strd	r2, r7, [r5]
 8000f16:	2600      	movs	r6, #0
 8000f18:	4631      	mov	r1, r6
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	462e      	mov	r6, r5
 8000f20:	4628      	mov	r0, r5
 8000f22:	e70b      	b.n	8000d3c <__udivmoddi4+0xa0>
 8000f24:	4606      	mov	r6, r0
 8000f26:	e6e9      	b.n	8000cfc <__udivmoddi4+0x60>
 8000f28:	4618      	mov	r0, r3
 8000f2a:	e6fd      	b.n	8000d28 <__udivmoddi4+0x8c>
 8000f2c:	4543      	cmp	r3, r8
 8000f2e:	d2e5      	bcs.n	8000efc <__udivmoddi4+0x260>
 8000f30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f34:	eb69 0104 	sbc.w	r1, r9, r4
 8000f38:	3801      	subs	r0, #1
 8000f3a:	e7df      	b.n	8000efc <__udivmoddi4+0x260>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e7d2      	b.n	8000ee6 <__udivmoddi4+0x24a>
 8000f40:	4660      	mov	r0, ip
 8000f42:	e78d      	b.n	8000e60 <__udivmoddi4+0x1c4>
 8000f44:	4681      	mov	r9, r0
 8000f46:	e7b9      	b.n	8000ebc <__udivmoddi4+0x220>
 8000f48:	4666      	mov	r6, ip
 8000f4a:	e775      	b.n	8000e38 <__udivmoddi4+0x19c>
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e74a      	b.n	8000de6 <__udivmoddi4+0x14a>
 8000f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f54:	4439      	add	r1, r7
 8000f56:	e713      	b.n	8000d80 <__udivmoddi4+0xe4>
 8000f58:	3802      	subs	r0, #2
 8000f5a:	443c      	add	r4, r7
 8000f5c:	e724      	b.n	8000da8 <__udivmoddi4+0x10c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	0000      	movs	r0, r0
	...

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f6c:	b0c2      	sub	sp, #264	; 0x108
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f70:	f001 fab6 	bl	80024e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f74:	f000 fd52 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f78:	f000 fefc 	bl	8001d74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7c:	f000 feda 	bl	8001d34 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f80:	f000 feae 	bl	8001ce0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000f84:	f000 fe04 	bl	8001b90 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000f88:	f000 fdb0 	bl	8001aec <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f8c:	f000 fe38 	bl	8001c00 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000f90:	f000 fe82 	bl	8001c98 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000f94:	489c      	ldr	r0, [pc, #624]	; (8001208 <main+0x2a0>)
 8000f96:	f003 ff9d 	bl	8004ed4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim11);
 8000f9a:	489c      	ldr	r0, [pc, #624]	; (800120c <main+0x2a4>)
 8000f9c:	f003 fff4 	bl	8004f88 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	499b      	ldr	r1, [pc, #620]	; (8001210 <main+0x2a8>)
 8000fa4:	489b      	ldr	r0, [pc, #620]	; (8001214 <main+0x2ac>)
 8000fa6:	f001 fc91 	bl	80028cc <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb0:	4899      	ldr	r0, [pc, #612]	; (8001218 <main+0x2b0>)
 8000fb2:	f002 ff0d 	bl	8003dd0 <HAL_GPIO_WritePin>
	{
		char temp[]="NOW LOADING... \r\nLAB10 is now operating \r\n\r\n";
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4a98      	ldr	r2, [pc, #608]	; (800121c <main+0x2b4>)
 8000fbc:	461c      	mov	r4, r3
 8000fbe:	4615      	mov	r5, r2
 8000fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fcc:	c407      	stmia	r4!, {r0, r1, r2}
 8000fce:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff f903 	bl	80001e0 <strlen>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f107 0108 	add.w	r1, r7, #8
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	488e      	ldr	r0, [pc, #568]	; (8001220 <main+0x2b8>)
 8000fe8:	f004 fc0d 	bl	8005806 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		static uint64_t timestamp = 0;
		if (micros() - timestamp >= 100) //100
 8000fec:	f000 ffbc 	bl	8001f68 <micros>
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <main+0x2bc>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	ebb0 0802 	subs.w	r8, r0, r2
 8000ffa:	eb61 0903 	sbc.w	r9, r1, r3
 8000ffe:	f1b9 0f00 	cmp.w	r9, #0
 8001002:	bf08      	it	eq
 8001004:	f1b8 0f64 	cmpeq.w	r8, #100	; 0x64
 8001008:	f0c0 8213 	bcc.w	8001432 <main+0x4ca>
		{
			timepass = micros() - timestamp;
 800100c:	f000 ffac 	bl	8001f68 <micros>
 8001010:	4b84      	ldr	r3, [pc, #528]	; (8001224 <main+0x2bc>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	ebb0 0a02 	subs.w	sl, r0, r2
 800101a:	eb61 0b03 	sbc.w	fp, r1, r3
 800101e:	4b82      	ldr	r3, [pc, #520]	; (8001228 <main+0x2c0>)
 8001020:	e9c3 ab00 	strd	sl, fp, [r3]
			timestamp = micros();
 8001024:	f000 ffa0 	bl	8001f68 <micros>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	497d      	ldr	r1, [pc, #500]	; (8001224 <main+0x2bc>)
 800102e:	e9c1 2300 	strd	r2, r3, [r1]
			counter += (timepass/100.0)*(frequency/10.0)*(4096.0/10000.0);   	//ตัว�?�?ร float //�?ว�?เ�?�?�?�?�?าที�?เ�?ิ�?ม�?ึ�?�? �?ดย�?ะเ�?ิ�?ม�?ึ�?�?เท�?า�?ั�? 4096/10000
 8001032:	4b7e      	ldr	r3, [pc, #504]	; (800122c <main+0x2c4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fa8e 	bl	8000558 <__aeabi_f2d>
 800103c:	4604      	mov	r4, r0
 800103e:	460d      	mov	r5, r1
 8001040:	4b79      	ldr	r3, [pc, #484]	; (8001228 <main+0x2c0>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff faa7 	bl	800059c <__aeabi_ul2d>
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b77      	ldr	r3, [pc, #476]	; (8001230 <main+0x2c8>)
 8001054:	f7ff fc02 	bl	800085c <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	e9c7 2300 	strd	r2, r3, [r7]
 8001060:	4b74      	ldr	r3, [pc, #464]	; (8001234 <main+0x2cc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fa65 	bl	8000534 <__aeabi_i2d>
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b72      	ldr	r3, [pc, #456]	; (8001238 <main+0x2d0>)
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9d7 0100 	ldrd	r0, r1, [r7]
 800107c:	f7ff fac4 	bl	8000608 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	a35d      	add	r3, pc, #372	; (adr r3, 8001200 <main+0x298>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fabb 	bl	8000608 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff f8ff 	bl	800029c <__adddf3>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd91 	bl	8000bcc <__aeabi_d2f>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a5f      	ldr	r2, [pc, #380]	; (800122c <main+0x2c4>)
 80010ae:	6013      	str	r3, [r2, #0]
																				//เ�?ื�?อ�?�?า�? 1 s = 1,000,000 us //ดั�?�?ั�?�?ระ�?�?ที�?ทำ�?า�?ทุ�?�? 100 us //ต�?อ�?ทำ�?า�? 10000 //รอ�?ถึ�?�?ะ�?ร�? 1 s
																				//�?ต�?หา�?เ�?ิ�?ม�?ึ�?�? 4096/10000 //อย�?า�?เดียว�?ะสามารถ�?�?�?�?ด�?�?�?�?ตอ�?ที�? �?วามถี�?เ�?�?�? 1
																				//ดั�?�?ั�?�?ต�?อ�?�?ำ�?�?า�?วามถี�?�?�?�?ูณด�?วย
																				//�?ละ�?า�?ระ�?�?�?�?มี�?อ�?าสที�?�?ารเ�?�?าสู�?เ�?ื�?อ�?�?�?�?ี�?�?ะมี�?อ�?าสที�?�?�?�?เวลามา�?�?ว�?า 100 us //ดั�?�?ั�?�?ต�?อ�?เอาตัว�?�?ร timepass
																				//มาหารด�?วยเวลา 100 us //�?ล�?ว�?ำมา�?ูณทำ�?ห�?ระ�?�?เ�?�?�?�?�?ตามเวลาที�?�?�?า�?�?�?
			if(counter > 4096.0)
 80010b0:	4b5e      	ldr	r3, [pc, #376]	; (800122c <main+0x2c4>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800123c <main+0x2d4>
 80010ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	dd09      	ble.n	80010d8 <main+0x170>
			{
				counter += -4096.0;
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <main+0x2c4>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800123c <main+0x2d4>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	4b56      	ldr	r3, [pc, #344]	; (800122c <main+0x2c4>)
 80010d4:	edc3 7a00 	vstr	s15, [r3]
			}
			switch(wave)
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <main+0x2d8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b06      	cmp	r3, #6
 80010de:	f000 8129 	beq.w	8001334 <main+0x3cc>
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	f300 818f 	bgt.w	8001406 <main+0x49e>
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d003      	beq.n	80010f4 <main+0x18c>
 80010ec:	2b05      	cmp	r3, #5
 80010ee:	f000 80b5 	beq.w	800125c <main+0x2f4>
 80010f2:	e188      	b.n	8001406 <main+0x49e>
			{
				case SAWTOOTH:
				{
					if(slope) //slope //�?ือตัว�?�?รสำหรั�?�?าร�?�?�?�?เ�?�?�? �?ึ�?�?�?ละล�? �?ดย 1 //�?ะเ�?�?�?�?ึ�?�? �?ละ 0 //�?ะเ�?�?�?ล�?
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <main+0x2dc>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d040      	beq.n	800117e <main+0x216>
					{
						dataOut = (LowVolt + (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;	; //ระ�?�?�?ะเริ�?มต�?�?ที�? LowVolt //ดั�?�?ั�?�?ต�?อ�?�?ว�? Low Volt //�?�?อ�?�?ะ�?ำ�?�?�?ว�?�?ั�?
 80010fc:	4b52      	ldr	r3, [pc, #328]	; (8001248 <main+0x2e0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa17 	bl	8000534 <__aeabi_i2d>
 8001106:	4604      	mov	r4, r0
 8001108:	460d      	mov	r5, r1
 800110a:	4b50      	ldr	r3, [pc, #320]	; (800124c <main+0x2e4>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <main+0x2e0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <main+0x2c4>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	ee17 0a90 	vmov	r0, s15
 800112a:	f7ff fa15 	bl	8000558 <__aeabi_f2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b47      	ldr	r3, [pc, #284]	; (8001250 <main+0x2e8>)
 8001134:	f7ff fb92 	bl	800085c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f8ac 	bl	800029c <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <main+0x2e8>)
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <main+0x2ec>)
 8001164:	f7ff fb7a 	bl	800085c <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	f7ff fd0c 	bl	8000b8c <__aeabi_d2uiz>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <main+0x2f0>)
 800117a:	801a      	strh	r2, [r3, #0]
					{
						dataOut = (HighVolt - (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;	//�?ล�?ายด�?า�?�?�?�?ต�?เริ�?ม�?า�? HighVolt
																								//�?ละ�?ำ�?�?ล�?�?ั�? counter*(HighVolt - LowVolt)/4096
					}
				}
				break;
 800117c:	e143      	b.n	8001406 <main+0x49e>
						dataOut = (HighVolt - (counter*(HighVolt-LowVolt)/4096.0))*4096.0/33.0;	//�?ล�?ายด�?า�?�?�?�?ต�?เริ�?ม�?า�? HighVolt
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <main+0x2e4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9d6 	bl	8000534 <__aeabi_i2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	4b2f      	ldr	r3, [pc, #188]	; (800124c <main+0x2e4>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <main+0x2e0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <main+0x2c4>)
 80011a0:	edd3 7a00 	vldr	s15, [r3]
 80011a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a8:	ee17 0a90 	vmov	r0, s15
 80011ac:	f7ff f9d4 	bl	8000558 <__aeabi_f2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <main+0x2e8>)
 80011b6:	f7ff fb51 	bl	800085c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f869 	bl	8000298 <__aeabi_dsub>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <main+0x2e8>)
 80011d4:	f7ff fa18 	bl	8000608 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <main+0x2ec>)
 80011e6:	f7ff fb39 	bl	800085c <__aeabi_ddiv>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fccb 	bl	8000b8c <__aeabi_d2uiz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <main+0x2f0>)
 80011fc:	801a      	strh	r2, [r3, #0]
				break;
 80011fe:	e102      	b.n	8001406 <main+0x49e>
 8001200:	eb1c432d 	.word	0xeb1c432d
 8001204:	3fda36e2 	.word	0x3fda36e2
 8001208:	20000138 	.word	0x20000138
 800120c:	20000224 	.word	0x20000224
 8001210:	2000010e 	.word	0x2000010e
 8001214:	200001dc 	.word	0x200001dc
 8001218:	40020000 	.word	0x40020000
 800121c:	08007df8 	.word	0x08007df8
 8001220:	200002cc 	.word	0x200002cc
 8001224:	20000120 	.word	0x20000120
 8001228:	20000100 	.word	0x20000100
 800122c:	20000108 	.word	0x20000108
 8001230:	40590000 	.word	0x40590000
 8001234:	20000014 	.word	0x20000014
 8001238:	40240000 	.word	0x40240000
 800123c:	45800000 	.word	0x45800000
 8001240:	20000000 	.word	0x20000000
 8001244:	2000010c 	.word	0x2000010c
 8001248:	200000fc 	.word	0x200000fc
 800124c:	2000001c 	.word	0x2000001c
 8001250:	40b00000 	.word	0x40b00000
 8001254:	40408000 	.word	0x40408000
 8001258:	20000118 	.word	0x20000118
				case SINE_WAVE:
				{
					dataOut = ((HighVolt - LowVolt)*4096.0/66.0)*(sin(2*M_PI*counter/4096.0)+1.0) + (LowVolt*4096.0/33.0);	//(sin(2*M_PI*counter/4096.0)+1.0)
 800125c:	4bb8      	ldr	r3, [pc, #736]	; (8001540 <main+0x5d8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4bb8      	ldr	r3, [pc, #736]	; (8001544 <main+0x5dc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f964 	bl	8000534 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4bb5      	ldr	r3, [pc, #724]	; (8001548 <main+0x5e0>)
 8001272:	f7ff f9c9 	bl	8000608 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4bb2      	ldr	r3, [pc, #712]	; (800154c <main+0x5e4>)
 8001284:	f7ff faea 	bl	800085c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4614      	mov	r4, r2
 800128e:	461d      	mov	r5, r3
 8001290:	4baf      	ldr	r3, [pc, #700]	; (8001550 <main+0x5e8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f95f 	bl	8000558 <__aeabi_f2d>
 800129a:	a3a7      	add	r3, pc, #668	; (adr r3, 8001538 <main+0x5d0>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	f7ff f9b2 	bl	8000608 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4ba5      	ldr	r3, [pc, #660]	; (8001548 <main+0x5e0>)
 80012b2:	f7ff fad3 	bl	800085c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	ec43 2b17 	vmov	d7, r2, r3
 80012be:	eeb0 0a47 	vmov.f32	s0, s14
 80012c2:	eef0 0a67 	vmov.f32	s1, s15
 80012c6:	f005 fd1b 	bl	8006d00 <sin>
 80012ca:	ec51 0b10 	vmov	r0, r1, d0
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <main+0x5ec>)
 80012d4:	f7fe ffe2 	bl	800029c <__adddf3>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7ff f992 	bl	8000608 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	4b95      	ldr	r3, [pc, #596]	; (8001544 <main+0x5dc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff f91f 	bl	8000534 <__aeabi_i2d>
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b93      	ldr	r3, [pc, #588]	; (8001548 <main+0x5e0>)
 80012fc:	f7ff f984 	bl	8000608 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <main+0x5f0>)
 800130e:	f7ff faa5 	bl	800085c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	f7fe ffbf 	bl	800029c <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fc31 	bl	8000b8c <__aeabi_d2uiz>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	4b8b      	ldr	r3, [pc, #556]	; (800155c <main+0x5f4>)
 8001330:	801a      	strh	r2, [r3, #0]
																															//�?ดยเราต�?อ�?�?�?ล�? HighVolt LowVolt //�?ห�?เ�?�?�? 4096 //ดั�?�?ั�?�?�?ึ�?ต�?อ�?�?ูณด�?วย 4096/33
																															//�?ต�?เ�?ื�?อ�?�?า�? ต�?อ�?�?าร�?ห�? 0 - 2 //มี�?�?าสู�?สุดที�? HighVolt - LowVolt
																															//�?ึ�?ต�?อ�?�?ำ 2 //�?�?หารอี�?ทีเ�?ื�?อ�?ห�? 0 //�?�?ถึ�? HighVolt - LowVolt
																															//�?า�?�?ั�?�?�?�?อย�?ำ LowVolt //�?�?�?ว�?อี�?ทีทำ�?ห�? dataOut //อยู�?�?�?�?�?ว�? LowVolt //ถึ�? HighVolt
				}
				break;
 8001332:	e068      	b.n	8001406 <main+0x49e>
				case SQUARE_WAVE:
				{
					if(duty*4096.0/100.0 >= counter) 	//�?ำ�?�?า dutyCycle //มาหาร 100 //�?ล�?ว�?ำ�?�?�?ูณ 4096 //�?ะ�?ด�?�?�?าที�?อยู�?ระหว�?า�? 0 - 4096
 8001334:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <main+0x5f8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f8fb 	bl	8000534 <__aeabi_i2d>
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	4b81      	ldr	r3, [pc, #516]	; (8001548 <main+0x5e0>)
 8001344:	f7ff f960 	bl	8000608 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	4b83      	ldr	r3, [pc, #524]	; (8001564 <main+0x5fc>)
 8001356:	f7ff fa81 	bl	800085c <__aeabi_ddiv>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4614      	mov	r4, r2
 8001360:	461d      	mov	r5, r3
 8001362:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <main+0x5e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8f6 	bl	8000558 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4620      	mov	r0, r4
 8001372:	4629      	mov	r1, r5
 8001374:	f7ff fbce 	bl	8000b14 <__aeabi_dcmpge>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d025      	beq.n	80013ca <main+0x462>
														//ถ�?า�?�?าดั�?�?ล�?าวมา�?�?ว�?า counter //dataOut = HighVolt
					{
						dataOut = HighVolt*4096.0/33.0;
 800137e:	4b70      	ldr	r3, [pc, #448]	; (8001540 <main+0x5d8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8d6 	bl	8000534 <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b6e      	ldr	r3, [pc, #440]	; (8001548 <main+0x5e0>)
 800138e:	f7ff f93b 	bl	8000608 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <main+0x5f0>)
 80013a0:	f7ff fa5c 	bl	800085c <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fbee 	bl	8000b8c <__aeabi_d2uiz>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b69      	ldr	r3, [pc, #420]	; (800155c <main+0x5f4>)
 80013b6:	801a      	strh	r2, [r3, #0]
						if(HighVolt == 33)
 80013b8:	4b61      	ldr	r3, [pc, #388]	; (8001540 <main+0x5d8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b21      	cmp	r3, #33	; 0x21
 80013be:	d121      	bne.n	8001404 <main+0x49c>
						{
							dataOut = 4095;
 80013c0:	4b66      	ldr	r3, [pc, #408]	; (800155c <main+0x5f4>)
 80013c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80013c6:	801a      	strh	r2, [r3, #0]
					else								//ถ�?า�?�?อย�?ว�?า dataOut = LowVolt
					{
						dataOut = LowVolt*4096.0/33.0;
					}
				}
				break;
 80013c8:	e01c      	b.n	8001404 <main+0x49c>
						dataOut = LowVolt*4096.0/33.0;
 80013ca:	4b5e      	ldr	r3, [pc, #376]	; (8001544 <main+0x5dc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f8b0 	bl	8000534 <__aeabi_i2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b5b      	ldr	r3, [pc, #364]	; (8001548 <main+0x5e0>)
 80013da:	f7ff f915 	bl	8000608 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b5b      	ldr	r3, [pc, #364]	; (8001558 <main+0x5f0>)
 80013ec:	f7ff fa36 	bl	800085c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbc8 	bl	8000b8c <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b56      	ldr	r3, [pc, #344]	; (800155c <main+0x5f4>)
 8001402:	801a      	strh	r2, [r3, #0]
				break;
 8001404:	bf00      	nop
			}
			if (hspi3.State == HAL_SPI_STATE_READY
 8001406:	4b58      	ldr	r3, [pc, #352]	; (8001568 <main+0x600>)
 8001408:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10f      	bne.n	8001432 <main+0x4ca>
					&& HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)
 8001412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001416:	4855      	ldr	r0, [pc, #340]	; (800156c <main+0x604>)
 8001418:	f002 fcc2 	bl	8003da0 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d107      	bne.n	8001432 <main+0x4ca>
							== GPIO_PIN_SET)
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8001422:	4b53      	ldr	r3, [pc, #332]	; (8001570 <main+0x608>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	4a4d      	ldr	r2, [pc, #308]	; (800155c <main+0x5f4>)
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fd41 	bl	8001eb4 <MCP4922SetOutput>
			}
		}

		char Frequencyline[] = "Frequency is";
 8001432:	4b50      	ldr	r3, [pc, #320]	; (8001574 <main+0x60c>)
 8001434:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8001438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143a:	c407      	stmia	r4!, {r0, r1, r2}
 800143c:	7023      	strb	r3, [r4, #0]
		char Dutyline[] = "Duty is";
 800143e:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <main+0x610>)
 8001440:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001444:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001448:	e883 0003 	stmia.w	r3, {r0, r1}
		char HighVoltline[] = "High Volt is";
 800144c:	4b4b      	ldr	r3, [pc, #300]	; (800157c <main+0x614>)
 800144e:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8001452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001454:	c407      	stmia	r4!, {r0, r1, r2}
 8001456:	7023      	strb	r3, [r4, #0]
		char LowVoltline[] = "Low Volt is";
 8001458:	4a49      	ldr	r2, [pc, #292]	; (8001580 <main+0x618>)
 800145a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800145e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001460:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 8001464:	2220      	movs	r2, #32
 8001466:	4947      	ldr	r1, [pc, #284]	; (8001584 <main+0x61c>)
 8001468:	4847      	ldr	r0, [pc, #284]	; (8001588 <main+0x620>)
 800146a:	f004 fa5e 	bl	800592a <HAL_UART_Receive_IT>

		int16_t inputchar = UARTRecieveIT();
 800146e:	f000 fd95 	bl	8001f9c <UARTRecieveIT>
 8001472:	4603      	mov	r3, r0
 8001474:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
		if(inputchar!= -1)
 8001478:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	; 0x106
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d00e      	beq.n	80014a0 <main+0x538>
		{
			//sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n\r\n", inputchar);
			HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8001482:	4842      	ldr	r0, [pc, #264]	; (800158c <main+0x624>)
 8001484:	f7fe feac 	bl	80001e0 <strlen>
 8001488:	4603      	mov	r3, r0
 800148a:	b29a      	uxth	r2, r3
 800148c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001490:	493e      	ldr	r1, [pc, #248]	; (800158c <main+0x624>)
 8001492:	483d      	ldr	r0, [pc, #244]	; (8001588 <main+0x620>)
 8001494:	f004 f9b7 	bl	8005806 <HAL_UART_Transmit>
			Input = 1;
 8001498:	4b3d      	ldr	r3, [pc, #244]	; (8001590 <main+0x628>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e002      	b.n	80014a6 <main+0x53e>
		}
		else
		{
			Input = 0;
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <main+0x628>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
		}

		switch(state)
 80014a6:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <main+0x62c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	f63f ad9e 	bhi.w	8000fec <main+0x84>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <main+0x550>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014c9 	.word	0x080014c9
 80014bc:	080014ff 	.word	0x080014ff
 80014c0:	0800177b 	.word	0x0800177b
 80014c4:	080017b1 	.word	0x080017b1
		{
			case START: //0 start
			{
				char temp[] = " 1. Select Mode \r\n 2. Increase Frequency \r\n 3. Decrease Frequency \r\n 4. Increase High Volt \r\n 5. Decrease High Volt \r\n 6. Increase Low Volt \r\n 7. Decrease Low Volt \r\n\r\n";
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <main+0x630>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	4611      	mov	r1, r2
 80014d2:	23a9      	movs	r3, #169	; 0xa9
 80014d4:	461a      	mov	r2, r3
 80014d6:	f004 ffdb 	bl	8006490 <memcpy>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe fe7e 	bl	80001e0 <strlen>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	f107 0108 	add.w	r1, r7, #8
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	4825      	ldr	r0, [pc, #148]	; (8001588 <main+0x620>)
 80014f2:	f004 f988 	bl	8005806 <HAL_UART_Transmit>
				state = WAIT;
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <main+0x62c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80014fc:	e279      	b.n	80019f2 <main+0xa8a>
			case WAIT:
			{
				switch(inputchar)
 80014fe:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	; 0x106
 8001502:	3b31      	subs	r3, #49	; 0x31
 8001504:	2b06      	cmp	r3, #6
 8001506:	f200 8123 	bhi.w	8001750 <main+0x7e8>
 800150a:	a201      	add	r2, pc, #4	; (adr r2, 8001510 <main+0x5a8>)
 800150c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001510:	0800152d 	.word	0x0800152d
 8001514:	0800159d 	.word	0x0800159d
 8001518:	080015e3 	.word	0x080015e3
 800151c:	08001629 	.word	0x08001629
 8001520:	0800166f 	.word	0x0800166f
 8001524:	080016b9 	.word	0x080016b9
 8001528:	0800170b 	.word	0x0800170b
				{
					case '1':
					{
						state = SELECTMODE;
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <main+0x62c>)
 800152e:	2202      	movs	r2, #2
 8001530:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001532:	e121      	b.n	8001778 <main+0x810>
 8001534:	f3af 8000 	nop.w
 8001538:	54442d18 	.word	0x54442d18
 800153c:	401921fb 	.word	0x401921fb
 8001540:	2000001c 	.word	0x2000001c
 8001544:	200000fc 	.word	0x200000fc
 8001548:	40b00000 	.word	0x40b00000
 800154c:	40508000 	.word	0x40508000
 8001550:	20000108 	.word	0x20000108
 8001554:	3ff00000 	.word	0x3ff00000
 8001558:	40408000 	.word	0x40408000
 800155c:	20000118 	.word	0x20000118
 8001560:	20000018 	.word	0x20000018
 8001564:	40590000 	.word	0x40590000
 8001568:	20000184 	.word	0x20000184
 800156c:	40020400 	.word	0x40020400
 8001570:	20000020 	.word	0x20000020
 8001574:	08007e28 	.word	0x08007e28
 8001578:	08007e38 	.word	0x08007e38
 800157c:	08007e40 	.word	0x08007e40
 8001580:	08007e50 	.word	0x08007e50
 8001584:	200000d4 	.word	0x200000d4
 8001588:	200002cc 	.word	0x200002cc
 800158c:	200000b4 	.word	0x200000b4
 8001590:	200000f8 	.word	0x200000f8
 8001594:	200000f4 	.word	0x200000f4
 8001598:	08007e5c 	.word	0x08007e5c
					case '2':
					{
						if(frequency < 100)
 800159c:	4bb5      	ldr	r3, [pc, #724]	; (8001874 <main+0x90c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b63      	cmp	r3, #99	; 0x63
 80015a2:	dc04      	bgt.n	80015ae <main+0x646>
						{
							frequency += 1;
 80015a4:	4bb3      	ldr	r3, [pc, #716]	; (8001874 <main+0x90c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	3301      	adds	r3, #1
 80015aa:	4ab2      	ldr	r2, [pc, #712]	; (8001874 <main+0x90c>)
 80015ac:	6013      	str	r3, [r2, #0]
						}
						sprintf(Frequencyline, "Frequency is [%d]/10 Hz\r\n\r\n", frequency);
 80015ae:	4bb1      	ldr	r3, [pc, #708]	; (8001874 <main+0x90c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015b6:	49b0      	ldr	r1, [pc, #704]	; (8001878 <main+0x910>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 ff7f 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),1000);
 80015be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe0c 	bl	80001e0 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	48a9      	ldr	r0, [pc, #676]	; (800187c <main+0x914>)
 80015d6:	f004 f916 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 80015da:	4ba9      	ldr	r3, [pc, #676]	; (8001880 <main+0x918>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
					}
					break;
 80015e0:	e0ca      	b.n	8001778 <main+0x810>
					case '3':
					{
						if(frequency > 0)
 80015e2:	4ba4      	ldr	r3, [pc, #656]	; (8001874 <main+0x90c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	dd04      	ble.n	80015f4 <main+0x68c>
						{
							frequency += -1;
 80015ea:	4ba2      	ldr	r3, [pc, #648]	; (8001874 <main+0x90c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4aa0      	ldr	r2, [pc, #640]	; (8001874 <main+0x90c>)
 80015f2:	6013      	str	r3, [r2, #0]
						}
						sprintf(Frequencyline, "Frequency is [%d]/10 Hz\r\n\r\n", frequency);
 80015f4:	4b9f      	ldr	r3, [pc, #636]	; (8001874 <main+0x90c>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80015fc:	499e      	ldr	r1, [pc, #632]	; (8001878 <main+0x910>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 ff5c 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Frequencyline, strlen(Frequencyline),1000);
 8001604:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fde9 	bl	80001e0 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	b29a      	uxth	r2, r3
 8001612:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8001616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161a:	4898      	ldr	r0, [pc, #608]	; (800187c <main+0x914>)
 800161c:	f004 f8f3 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 8001620:	4b97      	ldr	r3, [pc, #604]	; (8001880 <main+0x918>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001626:	e0a7      	b.n	8001778 <main+0x810>
					case '4':
					{
						if(HighVolt < 33)
 8001628:	4b96      	ldr	r3, [pc, #600]	; (8001884 <main+0x91c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b20      	cmp	r3, #32
 800162e:	dc04      	bgt.n	800163a <main+0x6d2>
						{
							HighVolt += 1;
 8001630:	4b94      	ldr	r3, [pc, #592]	; (8001884 <main+0x91c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a93      	ldr	r2, [pc, #588]	; (8001884 <main+0x91c>)
 8001638:	6013      	str	r3, [r2, #0]
						}
						sprintf(HighVoltline, "High Volt is [%d]/10 V\r\n\r\n", HighVolt);
 800163a:	4b92      	ldr	r3, [pc, #584]	; (8001884 <main+0x91c>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001642:	4991      	ldr	r1, [pc, #580]	; (8001888 <main+0x920>)
 8001644:	4618      	mov	r0, r3
 8001646:	f004 ff39 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)HighVoltline, strlen(HighVoltline),1000);
 800164a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdc6 	bl	80001e0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	4886      	ldr	r0, [pc, #536]	; (800187c <main+0x914>)
 8001662:	f004 f8d0 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 8001666:	4b86      	ldr	r3, [pc, #536]	; (8001880 <main+0x918>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
					}
					break;
 800166c:	e084      	b.n	8001778 <main+0x810>
					case '5':
					{
						if(HighVolt > LowVolt)
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <main+0x91c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b86      	ldr	r3, [pc, #536]	; (800188c <main+0x924>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	dd04      	ble.n	8001684 <main+0x71c>
						{
							HighVolt += -1;
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <main+0x91c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3b01      	subs	r3, #1
 8001680:	4a80      	ldr	r2, [pc, #512]	; (8001884 <main+0x91c>)
 8001682:	6013      	str	r3, [r2, #0]
						}
						sprintf(HighVoltline, "High Volt is [%d]/10 V\r\n\r\n", HighVolt);
 8001684:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <main+0x91c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800168c:	497e      	ldr	r1, [pc, #504]	; (8001888 <main+0x920>)
 800168e:	4618      	mov	r0, r3
 8001690:	f004 ff14 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)HighVoltline, strlen(HighVoltline),1000);
 8001694:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe fda1 	bl	80001e0 <strlen>
 800169e:	4603      	mov	r3, r0
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80016a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016aa:	4874      	ldr	r0, [pc, #464]	; (800187c <main+0x914>)
 80016ac:	f004 f8ab 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 80016b0:	4b73      	ldr	r3, [pc, #460]	; (8001880 <main+0x918>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80016b6:	e05f      	b.n	8001778 <main+0x810>
					case '6':
					{
						if(LowVolt < 33 && LowVolt < HighVolt)
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <main+0x924>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b20      	cmp	r3, #32
 80016be:	dc0a      	bgt.n	80016d6 <main+0x76e>
 80016c0:	4b72      	ldr	r3, [pc, #456]	; (800188c <main+0x924>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <main+0x91c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	da04      	bge.n	80016d6 <main+0x76e>
						{
							LowVolt += 1;
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <main+0x924>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	4a6e      	ldr	r2, [pc, #440]	; (800188c <main+0x924>)
 80016d4:	6013      	str	r3, [r2, #0]
						}
						sprintf(LowVoltline, "Low Volt is [%d]/10 V\r\n\r\n", LowVolt);
 80016d6:	4b6d      	ldr	r3, [pc, #436]	; (800188c <main+0x924>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016de:	496c      	ldr	r1, [pc, #432]	; (8001890 <main+0x928>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f004 feeb 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)LowVoltline, strlen(LowVoltline),1000);
 80016e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd78 	bl	80001e0 <strlen>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80016f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fc:	485f      	ldr	r0, [pc, #380]	; (800187c <main+0x914>)
 80016fe:	f004 f882 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 8001702:	4b5f      	ldr	r3, [pc, #380]	; (8001880 <main+0x918>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001708:	e036      	b.n	8001778 <main+0x810>
					case '7':
					{
						if(LowVolt > 0)
 800170a:	4b60      	ldr	r3, [pc, #384]	; (800188c <main+0x924>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	dd04      	ble.n	800171c <main+0x7b4>
						{
							LowVolt += -1;
 8001712:	4b5e      	ldr	r3, [pc, #376]	; (800188c <main+0x924>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3b01      	subs	r3, #1
 8001718:	4a5c      	ldr	r2, [pc, #368]	; (800188c <main+0x924>)
 800171a:	6013      	str	r3, [r2, #0]
						}
						sprintf(LowVoltline, "Low Volt is [%d]/10 V\r\n\r\n", LowVolt);
 800171c:	4b5b      	ldr	r3, [pc, #364]	; (800188c <main+0x924>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001724:	495a      	ldr	r1, [pc, #360]	; (8001890 <main+0x928>)
 8001726:	4618      	mov	r0, r3
 8001728:	f004 fec8 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)LowVoltline, strlen(LowVoltline),1000);
 800172c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fd55 	bl	80001e0 <strlen>
 8001736:	4603      	mov	r3, r0
 8001738:	b29a      	uxth	r2, r3
 800173a:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	484e      	ldr	r0, [pc, #312]	; (800187c <main+0x914>)
 8001744:	f004 f85f 	bl	8005806 <HAL_UART_Transmit>
						state = START;
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <main+0x918>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800174e:	e013      	b.n	8001778 <main+0x810>
					default:
					{
						if(Input != 0)
 8001750:	4b50      	ldr	r3, [pc, #320]	; (8001894 <main+0x92c>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 814b 	beq.w	80019f0 <main+0xa88>
						{
							state = START;
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <main+0x918>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),1000);
 8001760:	484d      	ldr	r0, [pc, #308]	; (8001898 <main+0x930>)
 8001762:	f7fe fd3d 	bl	80001e0 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	494a      	ldr	r1, [pc, #296]	; (8001898 <main+0x930>)
 8001770:	4842      	ldr	r0, [pc, #264]	; (800187c <main+0x914>)
 8001772:	f004 f848 	bl	8005806 <HAL_UART_Transmit>
						}
					}
				}
			}
			break;
 8001776:	e13b      	b.n	80019f0 <main+0xa88>
 8001778:	e13a      	b.n	80019f0 <main+0xa88>
			case SELECTMODE:
			{
				char temp[] = " 1. Sawtooth up \r\n 2. Sawtooth down \r\n 3. Sine Wave \r\n 4. Square Wave \r\n 5. increase duty cycle \r\n 6. decrease duty cycle \r\n 7. Back \r\n\r\n";
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	4a47      	ldr	r2, [pc, #284]	; (800189c <main+0x934>)
 8001780:	4618      	mov	r0, r3
 8001782:	4611      	mov	r1, r2
 8001784:	238a      	movs	r3, #138	; 0x8a
 8001786:	461a      	mov	r2, r3
 8001788:	f004 fe82 	bl	8006490 <memcpy>
				HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fd25 	bl	80001e0 <strlen>
 8001796:	4603      	mov	r3, r0
 8001798:	b29a      	uxth	r2, r3
 800179a:	f107 0108 	add.w	r1, r7, #8
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	4836      	ldr	r0, [pc, #216]	; (800187c <main+0x914>)
 80017a4:	f004 f82f 	bl	8005806 <HAL_UART_Transmit>
				state = SELECTMODE_WAIT;
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <main+0x918>)
 80017aa:	2203      	movs	r2, #3
 80017ac:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017ae:	e120      	b.n	80019f2 <main+0xa8a>
			case SELECTMODE_WAIT:
			{
				switch(inputchar)
 80017b0:	f9b7 3106 	ldrsh.w	r3, [r7, #262]	; 0x106
 80017b4:	3b31      	subs	r3, #49	; 0x31
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	f200 8106 	bhi.w	80019c8 <main+0xa60>
 80017bc:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <main+0x85c>)
 80017be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c2:	bf00      	nop
 80017c4:	080017e1 	.word	0x080017e1
 80017c8:	08001827 	.word	0x08001827
 80017cc:	080018b1 	.word	0x080018b1
 80017d0:	080018f5 	.word	0x080018f5
 80017d4:	08001935 	.word	0x08001935
 80017d8:	0800197b 	.word	0x0800197b
 80017dc:	080019c1 	.word	0x080019c1
				{
					case '1':
					{
						wave = SAWTOOTH;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <main+0x938>)
 80017e2:	2204      	movs	r2, #4
 80017e4:	701a      	strb	r2, [r3, #0]
						slope = 1;
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <main+0x93c>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	801a      	strh	r2, [r3, #0]
						char temp[] = "SAWTOOTH up is now selected \r\n\r\n";
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <main+0x940>)
 80017f2:	461c      	mov	r4, r3
 80017f4:	4615      	mov	r5, r2
 80017f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fe:	682b      	ldr	r3, [r5, #0]
 8001800:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe fcea 	bl	80001e0 <strlen>
 800180c:	4603      	mov	r3, r0
 800180e:	b29a      	uxth	r2, r3
 8001810:	f107 0108 	add.w	r1, r7, #8
 8001814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <main+0x914>)
 800181a:	f003 fff4 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <main+0x918>)
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001824:	e0e3      	b.n	80019ee <main+0xa86>
					case '2':
					{
						wave = SAWTOOTH;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <main+0x938>)
 8001828:	2204      	movs	r2, #4
 800182a:	701a      	strb	r2, [r3, #0]
						slope = 0;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <main+0x93c>)
 800182e:	2200      	movs	r2, #0
 8001830:	801a      	strh	r2, [r3, #0]
						char temp[] = "SAWTOOTH down is now selected \r\n\r\n";
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <main+0x944>)
 8001838:	461c      	mov	r4, r3
 800183a:	4615      	mov	r5, r2
 800183c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001844:	682b      	ldr	r3, [r5, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	8022      	strh	r2, [r4, #0]
 800184a:	3402      	adds	r4, #2
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fcc3 	bl	80001e0 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	f107 0108 	add.w	r1, r7, #8
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <main+0x914>)
 8001868:	f003 ffcd 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <main+0x918>)
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001872:	e0bc      	b.n	80019ee <main+0xa86>
 8001874:	20000014 	.word	0x20000014
 8001878:	08007d88 	.word	0x08007d88
 800187c:	200002cc 	.word	0x200002cc
 8001880:	200000f4 	.word	0x200000f4
 8001884:	2000001c 	.word	0x2000001c
 8001888:	08007da4 	.word	0x08007da4
 800188c:	200000fc 	.word	0x200000fc
 8001890:	08007dc0 	.word	0x08007dc0
 8001894:	200000f8 	.word	0x200000f8
 8001898:	20000004 	.word	0x20000004
 800189c:	08007f08 	.word	0x08007f08
 80018a0:	20000000 	.word	0x20000000
 80018a4:	2000010c 	.word	0x2000010c
 80018a8:	08007f94 	.word	0x08007f94
 80018ac:	08007fb8 	.word	0x08007fb8
					case '3':
					{
						wave = SINE_WAVE;
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <main+0xa90>)
 80018b2:	2205      	movs	r2, #5
 80018b4:	701a      	strb	r2, [r3, #0]
						char temp[] = "Sine wave is now selected \r\n\r\n";
 80018b6:	4b51      	ldr	r3, [pc, #324]	; (80019fc <main+0xa94>)
 80018b8:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80018bc:	461d      	mov	r5, r3
 80018be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018c6:	c407      	stmia	r4!, {r0, r1, r2}
 80018c8:	8023      	strh	r3, [r4, #0]
 80018ca:	3402      	adds	r4, #2
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 80018d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fc83 	bl	80001e0 <strlen>
 80018da:	4603      	mov	r3, r0
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	4846      	ldr	r0, [pc, #280]	; (8001a00 <main+0xa98>)
 80018e8:	f003 ff8d 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <main+0xa9c>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80018f2:	e07c      	b.n	80019ee <main+0xa86>
					case '4':
					{
						wave = SQUARE_WAVE;
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <main+0xa90>)
 80018f6:	2206      	movs	r2, #6
 80018f8:	701a      	strb	r2, [r3, #0]
						char temp[] = "Square wave is now selected \r\n\r\n";
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <main+0xaa0>)
 8001900:	461c      	mov	r4, r3
 8001902:	4615      	mov	r5, r2
 8001904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	7023      	strb	r3, [r4, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),1000);
 8001910:	f107 0308 	add.w	r3, r7, #8
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fc63 	bl	80001e0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	f107 0108 	add.w	r1, r7, #8
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	4836      	ldr	r0, [pc, #216]	; (8001a00 <main+0xa98>)
 8001928:	f003 ff6d 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <main+0xa9c>)
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001932:	e05c      	b.n	80019ee <main+0xa86>
					case '5':
					{
						if(duty < 100)
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <main+0xaa4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b63      	cmp	r3, #99	; 0x63
 800193a:	dc04      	bgt.n	8001946 <main+0x9de>
						{
							duty += 1;
 800193c:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <main+0xaa4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3301      	adds	r3, #1
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <main+0xaa4>)
 8001944:	6013      	str	r3, [r2, #0]
						}
						sprintf(Dutyline, "Duty is [%d] percent\r\n\r\n", duty);
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <main+0xaa4>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800194e:	4930      	ldr	r1, [pc, #192]	; (8001a10 <main+0xaa8>)
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fdb3 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Dutyline, strlen(Dutyline),1000);
 8001956:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fc40 	bl	80001e0 <strlen>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8001968:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196c:	4824      	ldr	r0, [pc, #144]	; (8001a00 <main+0xa98>)
 800196e:	f003 ff4a 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <main+0xa9c>)
 8001974:	2202      	movs	r2, #2
 8001976:	701a      	strb	r2, [r3, #0]
					}
					break;
 8001978:	e039      	b.n	80019ee <main+0xa86>
					case '6':
					{
						if(duty > 0)
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <main+0xaa4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	dd04      	ble.n	800198c <main+0xa24>
						{
							duty += -1;
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <main+0xaa4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3b01      	subs	r3, #1
 8001988:	4a20      	ldr	r2, [pc, #128]	; (8001a0c <main+0xaa4>)
 800198a:	6013      	str	r3, [r2, #0]
						}
						sprintf(Dutyline, "Duty is [%d] percent\r\n\r\n", duty);
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <main+0xaa4>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001994:	491e      	ldr	r1, [pc, #120]	; (8001a10 <main+0xaa8>)
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fd90 	bl	80064bc <siprintf>
						HAL_UART_Transmit(&huart2, (uint8_t*)Dutyline, strlen(Dutyline),1000);
 800199c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fc1d 	bl	80001e0 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 80019ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <main+0xa98>)
 80019b4:	f003 ff27 	bl	8005806 <HAL_UART_Transmit>
						state = SELECTMODE;
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <main+0xa9c>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019be:	e016      	b.n	80019ee <main+0xa86>
					case '7':
					{
						state = START;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <main+0xa9c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80019c6:	e012      	b.n	80019ee <main+0xa86>
					default:
					{
						if(Input != 0)
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <main+0xaac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <main+0xa84>
						{
							state = SELECTMODE;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <main+0xa9c>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart2, (uint8_t*)error, strlen(error),1000);
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <main+0xab0>)
 80019d8:	f7fe fc02 	bl	80001e0 <strlen>
 80019dc:	4603      	mov	r3, r0
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <main+0xab0>)
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <main+0xa98>)
 80019e8:	f003 ff0d 	bl	8005806 <HAL_UART_Transmit>
						}
					}
					break;
 80019ec:	bf00      	nop
				}
			}
			break;
 80019ee:	e000      	b.n	80019f2 <main+0xa8a>
			break;
 80019f0:	bf00      	nop
	{
 80019f2:	f7ff bafb 	b.w	8000fec <main+0x84>
 80019f6:	bf00      	nop
 80019f8:	20000000 	.word	0x20000000
 80019fc:	08007fdc 	.word	0x08007fdc
 8001a00:	200002cc 	.word	0x200002cc
 8001a04:	200000f4 	.word	0x200000f4
 8001a08:	08007ffc 	.word	0x08007ffc
 8001a0c:	20000018 	.word	0x20000018
 8001a10:	08007ddc 	.word	0x08007ddc
 8001a14:	200000f8 	.word	0x200000f8
 8001a18:	20000004 	.word	0x20000004

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2230      	movs	r2, #48	; 0x30
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fd3e 	bl	80064ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <SystemClock_Config+0xc8>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <SystemClock_Config+0xcc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a80:	2310      	movs	r3, #16
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a84:	2302      	movs	r3, #2
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a94:	2302      	movs	r3, #2
 8001a96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 0320 	add.w	r3, r7, #32
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 f9af 	bl	8003e04 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aac:	f000 fabe 	bl	800202c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2103      	movs	r1, #3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fc11 	bl	80042f4 <HAL_RCC_ClockConfig>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ad8:	f000 faa8 	bl	800202c <Error_Handler>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000

08001aec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <MX_ADC1_Init+0xa0>)
 8001b02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b52:	f000 fd37 	bl	80025c4 <HAL_ADC_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b5c:	f000 fa66 	bl	800202c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b64:	2301      	movs	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_ADC1_Init+0x9c>)
 8001b72:	f000 ffc3 	bl	8002afc <HAL_ADC_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b7c:	f000 fa56 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200001dc 	.word	0x200001dc
 8001b8c:	40012000 	.word	0x40012000

08001b90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <MX_SPI3_Init+0x6c>)
 8001b98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001bde:	220a      	movs	r2, #10
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_SPI3_Init+0x68>)
 8001be4:	f002 fd82 	bl	80046ec <HAL_SPI_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001bee:	f000 fa1d 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000184 	.word	0x20000184
 8001bfc:	40003c00 	.word	0x40003c00

08001c00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	463b      	mov	r3, r7
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <MX_TIM3_Init+0x94>)
 8001c20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c24:	2263      	movs	r2, #99	; 0x63
 8001c26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c30:	2264      	movs	r2, #100	; 0x64
 8001c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c40:	4813      	ldr	r0, [pc, #76]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c42:	f003 f8f7 	bl	8004e34 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001c4c:	f000 f9ee 	bl	800202c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0308 	add.w	r3, r7, #8
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	480c      	ldr	r0, [pc, #48]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c5e:	f003 fafd 	bl	800525c <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001c68:	f000 f9e0 	bl	800202c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c74:	463b      	mov	r3, r7
 8001c76:	4619      	mov	r1, r3
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_TIM3_Init+0x90>)
 8001c7a:	f003 fcf5 	bl	8005668 <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001c84:	f000 f9d2 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000138 	.word	0x20000138
 8001c94:	40000400 	.word	0x40000400

08001c98 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001c9e:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <MX_TIM11_Init+0x44>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001ca4:	2263      	movs	r2, #99	; 0x63
 8001ca6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_TIM11_Init+0x40>)
 8001cc4:	f003 f8b6 	bl	8004e34 <HAL_TIM_Base_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001cce:	f000 f9ad 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000224 	.word	0x20000224
 8001cdc:	40014800 	.word	0x40014800

08001ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <MX_USART2_UART_Init+0x50>)
 8001ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d06:	220c      	movs	r2, #12
 8001d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_USART2_UART_Init+0x4c>)
 8001d18:	f003 fd28 	bl	800576c <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d22:	f000 f983 	bl	800202c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200002cc 	.word	0x200002cc
 8001d30:	40004400 	.word	0x40004400

08001d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_DMA_Init+0x3c>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <MX_DMA_Init+0x3c>)
 8001d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_DMA_Init+0x3c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2038      	movs	r0, #56	; 0x38
 8001d5c:	f001 fa63 	bl	8003226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d60:	2038      	movs	r0, #56	; 0x38
 8001d62:	f001 fa7c 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a43      	ldr	r2, [pc, #268]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b41      	ldr	r3, [pc, #260]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a3c      	ldr	r2, [pc, #240]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b36      	ldr	r3, [pc, #216]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <MX_GPIO_Init+0x12c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	4829      	ldr	r0, [pc, #164]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e00:	f001 ffe6 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	4827      	ldr	r0, [pc, #156]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e0c:	f001 ffe0 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	4825      	ldr	r0, [pc, #148]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e16:	f001 ffdb 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e20:	4820      	ldr	r0, [pc, #128]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e22:	f001 ffd5 	bl	8003dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <MX_GPIO_Init+0x13c>)
 8001e2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	481c      	ldr	r0, [pc, #112]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e3c:	f001 fe2c 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8001e40:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <MX_GPIO_Init+0x130>)
 8001e5a:	f001 fe1d 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 8001e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <MX_GPIO_Init+0x134>)
 8001e78:	f001 fe0e 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4806      	ldr	r0, [pc, #24]	; (8001eac <MX_GPIO_Init+0x138>)
 8001e94:	f001 fe00 	bl	8003a98 <HAL_GPIO_Init>

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	10210000 	.word	0x10210000

08001eb4 <MCP4922SetOutput>:

/* USER CODE BEGIN 4 */
void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460a      	mov	r2, r1
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8001ec4:	88bb      	ldrh	r3, [r7, #4]
 8001ec6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	031b      	lsls	r3, r3, #12
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eda:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MCP4922SetOutput+0x44>)
 8001edc:	f001 ff78 	bl	8003dd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4804      	ldr	r0, [pc, #16]	; (8001efc <MCP4922SetOutput+0x48>)
 8001eea:	f002 fc89 	bl	8004800 <HAL_SPI_Transmit_IT>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	20000184 	.word	0x20000184

08001f00 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <HAL_SPI_TxCpltCallback+0x24>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d105      	bne.n	8001f1c <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8001f10:	2201      	movs	r2, #1
 8001f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <HAL_SPI_TxCpltCallback+0x28>)
 8001f18:	f001 ff5a 	bl	8003dd0 <HAL_GPIO_WritePin>
	}
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000184 	.word	0x20000184
 8001f28:	40020400 	.word	0x40020400

08001f2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b4b0      	push	{r4, r5, r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	if (htim == &htim11)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10c      	bne.n	8001f56 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micro += 65535;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	1814      	adds	r4, r2, r0
 8001f4c:	eb43 0501 	adc.w	r5, r3, r1
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001f52:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bcb0      	pop	{r4, r5, r7}
 8001f5e:	4770      	bx	lr
 8001f60:	20000224 	.word	0x20000224
 8001f64:	20000110 	.word	0x20000110

08001f68 <micros>:

inline uint64_t micros()
{
 8001f68:	b4b0      	push	{r4, r5, r7}
 8001f6a:	af00      	add	r7, sp, #0
	return htim11.Instance->CNT + _micro;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <micros+0x2c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	4618      	mov	r0, r3
 8001f74:	f04f 0100 	mov.w	r1, #0
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <micros+0x30>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	1884      	adds	r4, r0, r2
 8001f80:	eb41 0503 	adc.w	r5, r1, r3
 8001f84:	4622      	mov	r2, r4
 8001f86:	462b      	mov	r3, r5
}
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bcb0      	pop	{r4, r5, r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000224 	.word	0x20000224
 8001f98:	20000110 	.word	0x20000110

08001f9c <UARTRecieveIT>:

int16_t UARTRecieveIT()
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 8001fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa6:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <UARTRecieveIT+0x54>)
 8001faa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <UARTRecieveIT+0x54>)
 8001fb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <UARTRecieveIT+0x58>)
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d010      	beq.n	8001fe0 <UARTRecieveIT+0x44>
	{
		data = RxDataBuffer[dataPos];
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <UARTRecieveIT+0x58>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <UARTRecieveIT+0x5c>)
 8001fc4:	5cd3      	ldrb	r3, [r2, r3]
 8001fc6:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <UARTRecieveIT+0x58>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <UARTRecieveIT+0x54>)
 8001fd0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001fd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fd6:	fb02 f201 	mul.w	r2, r2, r1
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <UARTRecieveIT+0x58>)
 8001fde:	6013      	str	r3, [r2, #0]
	}
	return data;
 8001fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	200002cc 	.word	0x200002cc
 8001ff4:	20000128 	.word	0x20000128
 8001ff8:	200000d4 	.word	0x200000d4

08001ffc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <HAL_UART_RxCpltCallback+0x28>)
 8002006:	f7fe f8eb 	bl	80001e0 <strlen>
 800200a:	4603      	mov	r3, r0
 800200c:	b29a      	uxth	r2, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	4904      	ldr	r1, [pc, #16]	; (8002024 <HAL_UART_RxCpltCallback+0x28>)
 8002014:	4804      	ldr	r0, [pc, #16]	; (8002028 <HAL_UART_RxCpltCallback+0x2c>)
 8002016:	f003 fbf6 	bl	8005806 <HAL_UART_Transmit>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200000b4 	.word	0x200000b4
 8002028:	200002cc 	.word	0x200002cc

0800202c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002030:	b672      	cpsid	i
}
 8002032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002034:	e7fe      	b.n	8002034 <Error_Handler+0x8>
	...

08002038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_MspInit+0x4c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a0f      	ldr	r2, [pc, #60]	; (8002084 <HAL_MspInit+0x4c>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_MspInit+0x4c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_MspInit+0x4c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	; (8002084 <HAL_MspInit+0x4c>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_MspInit+0x4c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002076:	2007      	movs	r0, #7
 8002078:	f001 f8ca 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800

08002088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a33      	ldr	r2, [pc, #204]	; (8002174 <HAL_ADC_MspInit+0xec>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d15f      	bne.n	800216a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b32      	ldr	r3, [pc, #200]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a31      	ldr	r2, [pc, #196]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a2a      	ldr	r2, [pc, #168]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_ADC_MspInit+0xf0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020e2:	2301      	movs	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e6:	2303      	movs	r3, #3
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4821      	ldr	r0, [pc, #132]	; (800217c <HAL_ADC_MspInit+0xf4>)
 80020f6:	f001 fccf 	bl	8003a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020fa:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 80020fc:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_ADC_MspInit+0xfc>)
 80020fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 800211c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 800213a:	2200      	movs	r2, #0
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800213e:	4810      	ldr	r0, [pc, #64]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002140:	f001 f8a8 	bl	8003294 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800214a:	f7ff ff6f 	bl	800202c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002152:	639a      	str	r2, [r3, #56]	; 0x38
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <HAL_ADC_MspInit+0xf8>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2012      	movs	r0, #18
 8002160:	f001 f861 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002164:	2012      	movs	r0, #18
 8002166:	f001 f87a 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3728      	adds	r7, #40	; 0x28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40012000 	.word	0x40012000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	2000026c 	.word	0x2000026c
 8002184:	40026410 	.word	0x40026410

08002188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08a      	sub	sp, #40	; 0x28
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_SPI_MspInit+0x94>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d133      	bne.n	8002212 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_SPI_MspInit+0x98>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80021e2:	2338      	movs	r3, #56	; 0x38
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f2:	2306      	movs	r3, #6
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f6:	f107 0314 	add.w	r3, r7, #20
 80021fa:	4619      	mov	r1, r3
 80021fc:	4809      	ldr	r0, [pc, #36]	; (8002224 <HAL_SPI_MspInit+0x9c>)
 80021fe:	f001 fc4b 	bl	8003a98 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2033      	movs	r0, #51	; 0x33
 8002208:	f001 f80d 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800220c:	2033      	movs	r0, #51	; 0x33
 800220e:	f001 f826 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40003c00 	.word	0x40003c00
 8002220:	40023800 	.word	0x40023800
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_TIM_Base_MspInit+0x70>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 8002244:	f043 0302 	orr.w	r3, r3, #2
 8002248:	6413      	str	r3, [r2, #64]	; 0x40
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002256:	e01a      	b.n	800228e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM11)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_TIM_Base_MspInit+0x78>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d115      	bne.n	800228e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b0d      	ldr	r3, [pc, #52]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_TIM_Base_MspInit+0x74>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	201a      	movs	r0, #26
 8002284:	f000 ffcf 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002288:	201a      	movs	r0, #26
 800228a:	f000 ffe8 	bl	800325e <HAL_NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40000400 	.word	0x40000400
 800229c:	40023800 	.word	0x40023800
 80022a0:	40014800 	.word	0x40014800

080022a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_UART_MspInit+0x94>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d133      	bne.n	800232e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_UART_MspInit+0x98>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a1b      	ldr	r2, [pc, #108]	; (800233c <HAL_UART_MspInit+0x98>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_UART_MspInit+0x98>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <HAL_UART_MspInit+0x98>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_UART_MspInit+0x98>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_UART_MspInit+0x98>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022fe:	230c      	movs	r3, #12
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4809      	ldr	r0, [pc, #36]	; (8002340 <HAL_UART_MspInit+0x9c>)
 800231a:	f001 fbbd 	bl	8003a98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2026      	movs	r0, #38	; 0x26
 8002324:	f000 ff7f 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002328:	2026      	movs	r0, #38	; 0x26
 800232a:	f000 ff98 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	; 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40004400 	.word	0x40004400
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000

08002344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002348:	e7fe      	b.n	8002348 <NMI_Handler+0x4>

0800234a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234e:	e7fe      	b.n	800234e <HardFault_Handler+0x4>

08002350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <MemManage_Handler+0x4>

08002356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <BusFault_Handler+0x4>

0800235c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <UsageFault_Handler+0x4>

08002362 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002390:	f000 f8f8 	bl	8002584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <ADC_IRQHandler+0x10>)
 800239e:	f000 f954 	bl	800264a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200001dc 	.word	0x200001dc

080023ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80023b2:	f002 fe4b 	bl	800504c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000224 	.word	0x20000224

080023c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <USART2_IRQHandler+0x10>)
 80023c6:	f003 fae1 	bl	800598c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200002cc 	.word	0x200002cc

080023d4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <SPI3_IRQHandler+0x10>)
 80023da:	f002 fa9b 	bl	8004914 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000184 	.word	0x20000184

080023e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA2_Stream0_IRQHandler+0x10>)
 80023ee:	f001 f8e9 	bl	80035c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000026c 	.word	0x2000026c

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f004 f806 	bl	800643c <__errno>
 8002430:	4603      	mov	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <_sbrk+0x64>)
 800244c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20020000 	.word	0x20020000
 800245c:	00000400 	.word	0x00000400
 8002460:	2000012c 	.word	0x2000012c
 8002464:	20000328 	.word	0x20000328

08002468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <SystemInit+0x20>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <SystemInit+0x20>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800248c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002490:	480d      	ldr	r0, [pc, #52]	; (80024c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002492:	490e      	ldr	r1, [pc, #56]	; (80024cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002498:	e002      	b.n	80024a0 <LoopCopyDataInit>

0800249a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800249a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800249c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249e:	3304      	adds	r3, #4

080024a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a4:	d3f9      	bcc.n	800249a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a6:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a8:	4c0b      	ldr	r4, [pc, #44]	; (80024d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ac:	e001      	b.n	80024b2 <LoopFillZerobss>

080024ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b0:	3204      	adds	r2, #4

080024b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b4:	d3fb      	bcc.n	80024ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024b6:	f7ff ffd7 	bl	8002468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ba:	f003 ffc5 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024be:	f7fe fd53 	bl	8000f68 <main>
  bx  lr    
 80024c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024cc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80024d0:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 80024d4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80024d8:	20000324 	.word	0x20000324

080024dc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024dc:	e7fe      	b.n	80024dc <DMA1_Stream0_IRQHandler>
	...

080024e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e4:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <HAL_Init+0x40>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_Init+0x40>)
 80024ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <HAL_Init+0x40>)
 80024f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_Init+0x40>)
 8002502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f000 fe81 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f808 	bl	8002524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002514:	f7ff fd90 	bl	8002038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40023c00 	.word	0x40023c00

08002524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x54>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x58>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253a:	fbb3 f3f1 	udiv	r3, r3, r1
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe99 	bl	800327a <HAL_SYSTICK_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00e      	b.n	8002570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0f      	cmp	r3, #15
 8002556:	d80a      	bhi.n	800256e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002558:	2200      	movs	r2, #0
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f000 fe61 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <HAL_InitTick+0x5c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000024 	.word	0x20000024
 800257c:	2000002c 	.word	0x2000002c
 8002580:	20000028 	.word	0x20000028

08002584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2000002c 	.word	0x2000002c
 80025a8:	20000310 	.word	0x20000310

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	20000310 	.word	0x20000310

080025c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e033      	b.n	8002642 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff fd50 	bl	8002088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d118      	bne.n	8002634 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800260a:	f023 0302 	bic.w	r3, r3, #2
 800260e:	f043 0202 	orr.w	r2, r3, #2
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fba2 	bl	8002d60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f023 0303 	bic.w	r3, r3, #3
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
 8002632:	e001      	b.n	8002638 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002640:	7bfb      	ldrb	r3, [r7, #15]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b02      	cmp	r3, #2
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b20      	cmp	r3, #32
 800267c:	bf0c      	ite	eq
 800267e:	2301      	moveq	r3, #1
 8002680:	2300      	movne	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d049      	beq.n	8002720 <HAL_ADC_IRQHandler+0xd6>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d046      	beq.n	8002720 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d12b      	bne.n	8002710 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d127      	bne.n	8002710 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d119      	bne.n	8002710 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685a      	ldr	r2, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0220 	bic.w	r2, r2, #32
 80026ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f9cb 	bl	8002aac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0212 	mvn.w	r2, #18
 800271e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d057      	beq.n	8002802 <HAL_ADC_IRQHandler+0x1b8>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d054      	beq.n	8002802 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d139      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d006      	beq.n	800279a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002796:	2b00      	cmp	r3, #0
 8002798:	d12b      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d124      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d11d      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d105      	bne.n	80027f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fc32 	bl	800305c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 020c 	mvn.w	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <HAL_ADC_IRQHandler+0x21a>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d014      	beq.n	8002864 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d10d      	bne.n	8002864 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f93d 	bl	8002ad4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f06f 0201 	mvn.w	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b20      	cmp	r3, #32
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d015      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x27a>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0220 	mvn.w	r2, #32
 80028b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f917 	bl	8002ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0220 	mvn.w	r2, #32
 80028c2:	601a      	str	r2, [r3, #0]
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Start_DMA+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e0ce      	b.n	8002a88 <HAL_ADC_Start_DMA+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d018      	beq.n	8002932 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002910:	4b5f      	ldr	r3, [pc, #380]	; (8002a90 <HAL_ADC_Start_DMA+0x1c4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a5f      	ldr	r2, [pc, #380]	; (8002a94 <HAL_ADC_Start_DMA+0x1c8>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0c9a      	lsrs	r2, r3, #18
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002924:	e002      	b.n	800292c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	3b01      	subs	r3, #1
 800292a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f9      	bne.n	8002926 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002940:	d107      	bne.n	8002952 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002950:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	f040 8086 	bne.w	8002a6e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800298c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800299c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f023 0206 	bic.w	r2, r3, #6
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
 80029ae:	e002      	b.n	80029b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029be:	4b36      	ldr	r3, [pc, #216]	; (8002a98 <HAL_ADC_Start_DMA+0x1cc>)
 80029c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <HAL_ADC_Start_DMA+0x1d0>)
 80029c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_ADC_Start_DMA+0x1d4>)
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	4a33      	ldr	r2, [pc, #204]	; (8002aa4 <HAL_ADC_Start_DMA+0x1d8>)
 80029d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80029f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a02:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	334c      	adds	r3, #76	; 0x4c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f000 fcec 	bl	80033f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10f      	bne.n	8002a44 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d129      	bne.n	8002a86 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	e020      	b.n	8002a86 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_ADC_Start_DMA+0x1dc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d11b      	bne.n	8002a86 <HAL_ADC_Start_DMA+0x1ba>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d114      	bne.n	8002a86 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	e00b      	b.n	8002a86 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0210 	orr.w	r2, r3, #16
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f043 0201 	orr.w	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000024 	.word	0x20000024
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	40012300 	.word	0x40012300
 8002a9c:	08002f59 	.word	0x08002f59
 8002aa0:	08003013 	.word	0x08003013
 8002aa4:	0800302f 	.word	0x0800302f
 8002aa8:	40012000 	.word	0x40012000

08002aac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x1c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e113      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x244>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b09      	cmp	r3, #9
 8002b26:	d925      	bls.n	8002b74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68d9      	ldr	r1, [r3, #12]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4613      	mov	r3, r2
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3b1e      	subs	r3, #30
 8002b3e:	2207      	movs	r2, #7
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43da      	mvns	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	400a      	ands	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68d9      	ldr	r1, [r3, #12]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4403      	add	r3, r0
 8002b66:	3b1e      	subs	r3, #30
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	e022      	b.n	8002bba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	2207      	movs	r2, #7
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	400a      	ands	r2, r1
 8002b96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6919      	ldr	r1, [r3, #16]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4403      	add	r3, r0
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d824      	bhi.n	8002c0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b05      	subs	r3, #5
 8002bd4:	221f      	movs	r2, #31
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	400a      	ands	r2, r1
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b05      	subs	r3, #5
 8002bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34
 8002c0a:	e04c      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d824      	bhi.n	8002c5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	3b23      	subs	r3, #35	; 0x23
 8002c26:	221f      	movs	r2, #31
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	400a      	ands	r2, r1
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3b23      	subs	r3, #35	; 0x23
 8002c50:	fa00 f203 	lsl.w	r2, r0, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c5c:	e023      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b41      	subs	r3, #65	; 0x41
 8002c70:	221f      	movs	r2, #31
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	3b41      	subs	r3, #65	; 0x41
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <HAL_ADC_ConfigChannel+0x250>)
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <HAL_ADC_ConfigChannel+0x254>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1d8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b12      	cmp	r3, #18
 8002cba:	d10b      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_ADC_ConfigChannel+0x254>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12b      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x23a>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1c      	ldr	r2, [pc, #112]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_ADC_ConfigChannel+0x1f4>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b11      	cmp	r3, #17
 8002cee:	d122      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <HAL_ADC_ConfigChannel+0x258>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_ADC_ConfigChannel+0x25c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_ADC_ConfigChannel+0x260>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	0c9a      	lsrs	r2, r3, #18
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d28:	e002      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f9      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40012300 	.word	0x40012300
 8002d50:	40012000 	.word	0x40012000
 8002d54:	10000012 	.word	0x10000012
 8002d58:	20000024 	.word	0x20000024
 8002d5c:	431bde83 	.word	0x431bde83

08002d60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d68:	4b79      	ldr	r3, [pc, #484]	; (8002f50 <ADC_Init+0x1f0>)
 8002d6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	021a      	lsls	r2, r3, #8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002db8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <ADC_Init+0x1f4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6899      	ldr	r1, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	e00f      	b.n	8002e5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0202 	bic.w	r2, r2, #2
 8002e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7e1b      	ldrb	r3, [r3, #24]
 8002e78:	005a      	lsls	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01b      	beq.n	8002ec4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	035a      	lsls	r2, r3, #13
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	e007      	b.n	8002ed4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	051a      	lsls	r2, r3, #20
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6899      	ldr	r1, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f16:	025a      	lsls	r2, r3, #9
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6899      	ldr	r1, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	029a      	lsls	r2, r3, #10
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40012300 	.word	0x40012300
 8002f54:	0f000001 	.word	0x0f000001

08002f58 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d13c      	bne.n	8002fec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12b      	bne.n	8002fe4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d127      	bne.n	8002fe4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d119      	bne.n	8002fe4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0220 	bic.w	r2, r2, #32
 8002fbe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff fd61 	bl	8002aac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fea:	e00e      	b.n	800300a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fd75 	bl	8002ae8 <HAL_ADC_ErrorCallback>
}
 8002ffe:	e004      	b.n	800300a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fd4d 	bl	8002ac0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	f043 0204 	orr.w	r2, r3, #4
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f7ff fd4a 	bl	8002ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003054:	bf00      	nop
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032a0:	f7ff f984 	bl	80025ac <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e099      	b.n	80033e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e00f      	b.n	80032f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff f96b 	bl	80025ac <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d908      	bls.n	80032f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e078      	b.n	80033e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e8      	bne.n	80032d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_DMA_Init+0x158>)
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800331e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800332a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b04      	cmp	r3, #4
 800334a:	d107      	bne.n	800335c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4313      	orrs	r3, r2
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2b04      	cmp	r3, #4
 8003384:	d117      	bne.n	80033b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00e      	beq.n	80033b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fb01 	bl	80039a0 <DMA_CheckFifoParam>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033b2:	2301      	movs	r3, #1
 80033b4:	e016      	b.n	80033e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fab8 	bl	8003934 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	f010803f 	.word	0xf010803f

080033f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800340e:	2b01      	cmp	r3, #1
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Start_IT+0x26>
 8003412:	2302      	movs	r3, #2
 8003414:	e040      	b.n	8003498 <HAL_DMA_Start_IT+0xa8>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12f      	bne.n	800348a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68b9      	ldr	r1, [r7, #8]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa4a 	bl	80038d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0216 	orr.w	r2, r2, #22
 800345e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0201 	orr.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e005      	b.n	8003496 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003496:	7dfb      	ldrb	r3, [r7, #23]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034ae:	f7ff f87d 	bl	80025ac <HAL_GetTick>
 80034b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e052      	b.n	8003578 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0216 	bic.w	r2, r2, #22
 80034e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_DMA_Abort+0x62>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0208 	bic.w	r2, r2, #8
 8003510:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003522:	e013      	b.n	800354c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003524:	f7ff f842 	bl	80025ac <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b05      	cmp	r3, #5
 8003530:	d90c      	bls.n	800354c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e015      	b.n	8003578 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e4      	bne.n	8003524 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	223f      	movs	r2, #63	; 0x3f
 8003560:	409a      	lsls	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d004      	beq.n	800359e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e00c      	b.n	80035b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2205      	movs	r2, #5
 80035a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035d0:	4b92      	ldr	r3, [pc, #584]	; (800381c <HAL_DMA_IRQHandler+0x258>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a92      	ldr	r2, [pc, #584]	; (8003820 <HAL_DMA_IRQHandler+0x25c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	0a9b      	lsrs	r3, r3, #10
 80035dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ee:	2208      	movs	r2, #8
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01a      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0204 	bic.w	r2, r2, #4
 8003616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2201      	movs	r2, #1
 8003636:	409a      	lsls	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	2201      	movs	r2, #1
 8003654:	409a      	lsls	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2204      	movs	r2, #4
 800366c:	409a      	lsls	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d012      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	2210      	movs	r2, #16
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d043      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d03c      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036be:	2210      	movs	r2, #16
 80036c0:	409a      	lsls	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d018      	beq.n	8003706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d108      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d024      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
 80036f2:	e01f      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01b      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
 8003704:	e016      	b.n	8003734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d107      	bne.n	8003724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0208 	bic.w	r2, r2, #8
 8003722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2220      	movs	r2, #32
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 808e 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8086 	beq.w	8003862 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2220      	movs	r2, #32
 800375c:	409a      	lsls	r2, r3
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b05      	cmp	r3, #5
 800376c:	d136      	bne.n	80037dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0216 	bic.w	r2, r2, #22
 800377c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800378c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <HAL_DMA_IRQHandler+0x1da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0208 	bic.w	r2, r2, #8
 80037ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d07d      	beq.n	80038ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
        }
        return;
 80037da:	e078      	b.n	80038ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01c      	beq.n	8003824 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d030      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	4798      	blx	r3
 8003808:	e02b      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d027      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
 800381a:	e022      	b.n	8003862 <HAL_DMA_IRQHandler+0x29e>
 800381c:	20000024 	.word	0x20000024
 8003820:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	2b00      	cmp	r3, #0
 8003868:	d032      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2205      	movs	r2, #5
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0201 	bic.w	r2, r2, #1
 800388c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	429a      	cmp	r2, r3
 8003898:	d307      	bcc.n	80038aa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f2      	bne.n	800388e <HAL_DMA_IRQHandler+0x2ca>
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80038ce:	bf00      	nop
    }
  }
}
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop

080038d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d108      	bne.n	8003918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003916:	e007      	b.n	8003928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3b10      	subs	r3, #16
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <DMA_CalcBaseAndBitshift+0x64>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800394e:	4a13      	ldr	r2, [pc, #76]	; (800399c <DMA_CalcBaseAndBitshift+0x68>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d909      	bls.n	8003976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	1d1a      	adds	r2, r3, #4
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	; 0x58
 8003974:	e007      	b.n	8003986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800397e:	f023 0303 	bic.w	r3, r3, #3
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	aaaaaaab 	.word	0xaaaaaaab
 800399c:	08008038 	.word	0x08008038

080039a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0x5a>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d856      	bhi.n	8003a6e <DMA_CheckFifoParam+0xce>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x28>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	08003a6f 	.word	0x08003a6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d046      	beq.n	8003a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e043      	b.n	8003a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f2:	d140      	bne.n	8003a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e03d      	b.n	8003a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d121      	bne.n	8003a48 <DMA_CheckFifoParam+0xa8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d837      	bhi.n	8003a7a <DMA_CheckFifoParam+0xda>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x70>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a27 	.word	0x08003a27
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003a39 	.word	0x08003a39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e030      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d025      	beq.n	8003a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a36:	e022      	b.n	8003a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a40:	d11f      	bne.n	8003a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a46:	e01c      	b.n	8003a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d903      	bls.n	8003a56 <DMA_CheckFifoParam+0xb6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a54:	e018      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5a:	e015      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e00b      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e00a      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e008      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e006      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
    }
  } 
  
  return status; 
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e159      	b.n	8003d68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f040 8148 	bne.w	8003d62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d005      	beq.n	8003aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d130      	bne.n	8003b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b20:	2201      	movs	r2, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43db      	mvns	r3, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	091b      	lsrs	r3, r3, #4
 8003b36:	f003 0201 	and.w	r2, r3, #1
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d017      	beq.n	8003b88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d123      	bne.n	8003bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	220f      	movs	r2, #15
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80a2 	beq.w	8003d62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4b57      	ldr	r3, [pc, #348]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a56      	ldr	r2, [pc, #344]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b54      	ldr	r3, [pc, #336]	; (8003d80 <HAL_GPIO_Init+0x2e8>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c3a:	4a52      	ldr	r2, [pc, #328]	; (8003d84 <HAL_GPIO_Init+0x2ec>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a49      	ldr	r2, [pc, #292]	; (8003d88 <HAL_GPIO_Init+0x2f0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x202>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a48      	ldr	r2, [pc, #288]	; (8003d8c <HAL_GPIO_Init+0x2f4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x1fe>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a47      	ldr	r2, [pc, #284]	; (8003d90 <HAL_GPIO_Init+0x2f8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x1fa>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a46      	ldr	r2, [pc, #280]	; (8003d94 <HAL_GPIO_Init+0x2fc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x1f6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a45      	ldr	r2, [pc, #276]	; (8003d98 <HAL_GPIO_Init+0x300>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x1f2>
 8003c86:	2304      	movs	r3, #4
 8003c88:	e008      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c8a:	2307      	movs	r3, #7
 8003c8c:	e006      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e004      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e002      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_GPIO_Init+0x204>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f002 0203 	and.w	r2, r2, #3
 8003ca2:	0092      	lsls	r2, r2, #2
 8003ca4:	4093      	lsls	r3, r2
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cac:	4935      	ldr	r1, [pc, #212]	; (8003d84 <HAL_GPIO_Init+0x2ec>)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	3302      	adds	r3, #2
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cba:	4b38      	ldr	r3, [pc, #224]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d08:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0e:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d32:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d5c:	4a0f      	ldr	r2, [pc, #60]	; (8003d9c <HAL_GPIO_Init+0x304>)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3301      	adds	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	f67f aea2 	bls.w	8003ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	40020800 	.word	0x40020800
 8003d94:	40020c00 	.word	0x40020c00
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40013c00 	.word	0x40013c00

08003da0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	887b      	ldrh	r3, [r7, #2]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e001      	b.n	8003dc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	807b      	strh	r3, [r7, #2]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003de0:	787b      	ldrb	r3, [r7, #1]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003de6:	887a      	ldrh	r2, [r7, #2]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dec:	e003      	b.n	8003df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dee:	887b      	ldrh	r3, [r7, #2]
 8003df0:	041a      	lsls	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	619a      	str	r2, [r3, #24]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e264      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d075      	beq.n	8003f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e22:	4ba3      	ldr	r3, [pc, #652]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d00c      	beq.n	8003e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e2e:	4ba0      	ldr	r3, [pc, #640]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d112      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3a:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e48:	4b99      	ldr	r3, [pc, #612]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d05b      	beq.n	8003f0c <HAL_RCC_OscConfig+0x108>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d157      	bne.n	8003f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e23f      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x74>
 8003e6a:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a90      	ldr	r2, [pc, #576]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e01d      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x98>
 8003e82:	4b8b      	ldr	r3, [pc, #556]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a8a      	ldr	r2, [pc, #552]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b88      	ldr	r3, [pc, #544]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a87      	ldr	r2, [pc, #540]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0xb0>
 8003e9c:	4b84      	ldr	r3, [pc, #528]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a83      	ldr	r2, [pc, #524]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b81      	ldr	r3, [pc, #516]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a80      	ldr	r2, [pc, #512]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d013      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fb76 	bl	80025ac <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fb72 	bl	80025ac <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	; 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e204      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed6:	4b76      	ldr	r3, [pc, #472]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0xc0>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fb62 	bl	80025ac <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fb5e 	bl	80025ac <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1f0      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efe:	4b6c      	ldr	r3, [pc, #432]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0xe8>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d063      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f1a:	4b65      	ldr	r3, [pc, #404]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f26:	4b62      	ldr	r3, [pc, #392]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d11c      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f32:	4b5f      	ldr	r3, [pc, #380]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d116      	bne.n	8003f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d001      	beq.n	8003f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e1c4      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4952      	ldr	r1, [pc, #328]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f6a:	e03a      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d020      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f74:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCC_OscConfig+0x2b0>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fb17 	bl	80025ac <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fe fb13 	bl	80025ac <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1a5      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4940      	ldr	r1, [pc, #256]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b3f      	ldr	r3, [pc, #252]	; (80040b4 <HAL_RCC_OscConfig+0x2b0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fe faf6 	bl	80025ac <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc4:	f7fe faf2 	bl	80025ac <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e184      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d030      	beq.n	8004050 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ff6:	4b30      	ldr	r3, [pc, #192]	; (80040b8 <HAL_RCC_OscConfig+0x2b4>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fad6 	bl	80025ac <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fe fad2 	bl	80025ac <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e164      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCC_OscConfig+0x200>
 8004022:	e015      	b.n	8004050 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004024:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <HAL_RCC_OscConfig+0x2b4>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fe fabf 	bl	80025ac <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fabb 	bl	80025ac <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e14d      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a0 	beq.w	800419e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10f      	bne.n	800408e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a0e      	ldr	r2, [pc, #56]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800408a:	2301      	movs	r3, #1
 800408c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	4b0b      	ldr	r3, [pc, #44]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409a:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_RCC_OscConfig+0x2b8>)
 80040a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a6:	f7fe fa81 	bl	80025ac <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ac:	e011      	b.n	80040d2 <HAL_RCC_OscConfig+0x2ce>
 80040ae:	bf00      	nop
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
 80040bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fe fa74 	bl	80025ac <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e106      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d2:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_OscConfig+0x4e4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x2f0>
 80040e6:	4b81      	ldr	r3, [pc, #516]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a80      	ldr	r2, [pc, #512]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	e01c      	b.n	800412e <HAL_RCC_OscConfig+0x32a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d10c      	bne.n	8004116 <HAL_RCC_OscConfig+0x312>
 80040fc:	4b7b      	ldr	r3, [pc, #492]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a7a      	ldr	r2, [pc, #488]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	4b78      	ldr	r3, [pc, #480]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	4a77      	ldr	r2, [pc, #476]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6713      	str	r3, [r2, #112]	; 0x70
 8004114:	e00b      	b.n	800412e <HAL_RCC_OscConfig+0x32a>
 8004116:	4b75      	ldr	r3, [pc, #468]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a74      	ldr	r2, [pc, #464]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
 8004122:	4b72      	ldr	r3, [pc, #456]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	4a71      	ldr	r2, [pc, #452]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d015      	beq.n	8004162 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fe fa39 	bl	80025ac <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413c:	e00a      	b.n	8004154 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800413e:	f7fe fa35 	bl	80025ac <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f241 3288 	movw	r2, #5000	; 0x1388
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e0c5      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004154:	4b65      	ldr	r3, [pc, #404]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0ee      	beq.n	800413e <HAL_RCC_OscConfig+0x33a>
 8004160:	e014      	b.n	800418c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004162:	f7fe fa23 	bl	80025ac <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004168:	e00a      	b.n	8004180 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe fa1f 	bl	80025ac <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	f241 3288 	movw	r2, #5000	; 0x1388
 8004178:	4293      	cmp	r3, r2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e0af      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	4b5a      	ldr	r3, [pc, #360]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ee      	bne.n	800416a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418c:	7dfb      	ldrb	r3, [r7, #23]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d105      	bne.n	800419e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004192:	4b56      	ldr	r3, [pc, #344]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a55      	ldr	r2, [pc, #340]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 809b 	beq.w	80042de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041a8:	4b50      	ldr	r3, [pc, #320]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d05c      	beq.n	800426e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d141      	bne.n	8004240 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041bc:	4b4c      	ldr	r3, [pc, #304]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c2:	f7fe f9f3 	bl	80025ac <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ca:	f7fe f9ef 	bl	80025ac <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e081      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041dc:	4b43      	ldr	r3, [pc, #268]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1f0      	bne.n	80041ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	019b      	lsls	r3, r3, #6
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	085b      	lsrs	r3, r3, #1
 8004200:	3b01      	subs	r3, #1
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	061b      	lsls	r3, r3, #24
 800420c:	4937      	ldr	r1, [pc, #220]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe f9c8 	bl	80025ac <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe f9c4 	bl	80025ac <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e056      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x41c>
 800423e:	e04e      	b.n	80042de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x4ec>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fe f9b1 	bl	80025ac <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fe f9ad 	bl	80025ac <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e03f      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x44a>
 800426c:	e037      	b.n	80042de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e032      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800427a:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <HAL_RCC_OscConfig+0x4e8>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d028      	beq.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d121      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d11a      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d111      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	085b      	lsrs	r3, r3, #1
 80042c2:	3b01      	subs	r3, #1
 80042c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40007000 	.word	0x40007000
 80042ec:	40023800 	.word	0x40023800
 80042f0:	42470060 	.word	0x42470060

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cc      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d90c      	bls.n	8004330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b8      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a58      	ldr	r2, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004360:	4b53      	ldr	r3, [pc, #332]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	494d      	ldr	r1, [pc, #308]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d044      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d119      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e067      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4934      	ldr	r1, [pc, #208]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fe f8e2 	bl	80025ac <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fe f8de 	bl	80025ac <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e04f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20c      	bcs.n	800443c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e032      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	490e      	ldr	r1, [pc, #56]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447a:	f000 f821 	bl	80044c0 <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe f842 	bl	8002524 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	08008020 	.word	0x08008020
 80044b8:	20000024 	.word	0x20000024
 80044bc:	20000028 	.word	0x20000028

080044c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	2300      	movs	r3, #0
 80044d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d8:	4b67      	ldr	r3, [pc, #412]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d00d      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x40>
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	f200 80bd 	bhi.w	8004664 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d003      	beq.n	80044fa <HAL_RCC_GetSysClockFreq+0x3a>
 80044f2:	e0b7      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b61      	ldr	r3, [pc, #388]	; (800467c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044f6:	60bb      	str	r3, [r7, #8]
       break;
 80044f8:	e0b7      	b.n	800466a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044fa:	4b61      	ldr	r3, [pc, #388]	; (8004680 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044fc:	60bb      	str	r3, [r7, #8]
      break;
 80044fe:	e0b4      	b.n	800466a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004500:	4b5d      	ldr	r3, [pc, #372]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004508:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800450a:	4b5b      	ldr	r3, [pc, #364]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d04d      	beq.n	80045b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004516:	4b58      	ldr	r3, [pc, #352]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	099b      	lsrs	r3, r3, #6
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	ea02 0800 	and.w	r8, r2, r0
 800452e:	ea03 0901 	and.w	r9, r3, r1
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	014b      	lsls	r3, r1, #5
 8004540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004544:	0142      	lsls	r2, r0, #5
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	ebb0 0008 	subs.w	r0, r0, r8
 800454e:	eb61 0109 	sbc.w	r1, r1, r9
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	018b      	lsls	r3, r1, #6
 800455c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004560:	0182      	lsls	r2, r0, #6
 8004562:	1a12      	subs	r2, r2, r0
 8004564:	eb63 0301 	sbc.w	r3, r3, r1
 8004568:	f04f 0000 	mov.w	r0, #0
 800456c:	f04f 0100 	mov.w	r1, #0
 8004570:	00d9      	lsls	r1, r3, #3
 8004572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004576:	00d0      	lsls	r0, r2, #3
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	eb12 0208 	adds.w	r2, r2, r8
 8004580:	eb43 0309 	adc.w	r3, r3, r9
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	0259      	lsls	r1, r3, #9
 800458e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004592:	0250      	lsls	r0, r2, #9
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	461a      	mov	r2, r3
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	f7fc fb62 	bl	8000c6c <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e04a      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	461a      	mov	r2, r3
 80045ba:	f04f 0300 	mov.w	r3, #0
 80045be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	ea02 0400 	and.w	r4, r2, r0
 80045ca:	ea03 0501 	and.w	r5, r3, r1
 80045ce:	4620      	mov	r0, r4
 80045d0:	4629      	mov	r1, r5
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	014b      	lsls	r3, r1, #5
 80045dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045e0:	0142      	lsls	r2, r0, #5
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	1b00      	subs	r0, r0, r4
 80045e8:	eb61 0105 	sbc.w	r1, r1, r5
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	018b      	lsls	r3, r1, #6
 80045f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045fa:	0182      	lsls	r2, r0, #6
 80045fc:	1a12      	subs	r2, r2, r0
 80045fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	00d9      	lsls	r1, r3, #3
 800460c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004610:	00d0      	lsls	r0, r2, #3
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	1912      	adds	r2, r2, r4
 8004618:	eb45 0303 	adc.w	r3, r5, r3
 800461c:	f04f 0000 	mov.w	r0, #0
 8004620:	f04f 0100 	mov.w	r1, #0
 8004624:	0299      	lsls	r1, r3, #10
 8004626:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800462a:	0290      	lsls	r0, r2, #10
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	461a      	mov	r2, r3
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	f7fc fb16 	bl	8000c6c <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4613      	mov	r3, r2
 8004646:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	3301      	adds	r3, #1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004660:	60bb      	str	r3, [r7, #8]
      break;
 8004662:	e002      	b.n	800466a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004666:	60bb      	str	r3, [r7, #8]
      break;
 8004668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466a:	68bb      	ldr	r3, [r7, #8]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	00f42400 	.word	0x00f42400
 8004680:	007a1200 	.word	0x007a1200

08004684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004688:	4b03      	ldr	r3, [pc, #12]	; (8004698 <HAL_RCC_GetHCLKFreq+0x14>)
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	20000024 	.word	0x20000024

0800469c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a0:	f7ff fff0 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0a9b      	lsrs	r3, r3, #10
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	08008030 	.word	0x08008030

080046c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c8:	f7ff ffdc 	bl	8004684 <HAL_RCC_GetHCLKFreq>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	0b5b      	lsrs	r3, r3, #13
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	4903      	ldr	r1, [pc, #12]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046da:	5ccb      	ldrb	r3, [r1, r3]
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40023800 	.word	0x40023800
 80046e8:	08008030 	.word	0x08008030

080046ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e07b      	b.n	80047f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	d108      	bne.n	8004718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e005      	b.n	8004724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd fd22 	bl	8002188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	ea42 0103 	orr.w	r1, r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f003 0104 	and.w	r1, r3, #4
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	f003 0210 	and.w	r2, r3, #16
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_SPI_Transmit_IT+0x20>
 800481c:	2302      	movs	r3, #2
 800481e:	e06f      	b.n	8004900 <HAL_SPI_Transmit_IT+0x100>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <HAL_SPI_Transmit_IT+0x34>
 800482e:	88fb      	ldrh	r3, [r7, #6]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d102      	bne.n	800483a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004838:	e05d      	b.n	80048f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004846:	2302      	movs	r3, #2
 8004848:	75fb      	strb	r3, [r7, #23]
    goto error;
 800484a:	e054      	b.n	80048f6 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2203      	movs	r2, #3
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a1f      	ldr	r2, [pc, #124]	; (800490c <HAL_SPI_Transmit_IT+0x10c>)
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
 8004892:	e002      	b.n	800489a <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a1e      	ldr	r2, [pc, #120]	; (8004910 <HAL_SPI_Transmit_IT+0x110>)
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a2:	d10f      	bne.n	80048c4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80048d2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b40      	cmp	r3, #64	; 0x40
 80048e0:	d008      	beq.n	80048f4 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e000      	b.n	80048f6 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80048f4:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	08004b97 	.word	0x08004b97
 8004910:	08004b51 	.word	0x08004b51

08004914 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	099b      	lsrs	r3, r3, #6
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10f      	bne.n	8004958 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d004      	beq.n	8004958 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	4798      	blx	r3
    return;
 8004956:	e0d7      	b.n	8004b08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_SPI_IRQHandler+0x66>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	09db      	lsrs	r3, r3, #7
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
    return;
 8004978:	e0c6      	b.n	8004b08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_SPI_IRQHandler+0x8c>
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	0a1b      	lsrs	r3, r3, #8
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 80b4 	beq.w	8004b08 <HAL_SPI_IRQHandler+0x1f4>
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80ad 	beq.w	8004b08 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d023      	beq.n	8004a02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d011      	beq.n	80049ea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f043 0204 	orr.w	r2, r3, #4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	e00b      	b.n	8004a02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	693b      	ldr	r3, [r7, #16]
        return;
 8004a00:	e082      	b.n	8004b08 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d014      	beq.n	8004a38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	f043 0201 	orr.w	r2, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f043 0208 	orr.w	r2, r3, #8
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d04f      	beq.n	8004b06 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_SPI_IRQHandler+0x17e>
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d034      	beq.n	8004afc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0203 	bic.w	r2, r2, #3
 8004aa0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	4a18      	ldr	r2, [pc, #96]	; (8004b10 <HAL_SPI_IRQHandler+0x1fc>)
 8004ab0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fd62 	bl	8003580 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ada:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <HAL_SPI_IRQHandler+0x1fc>)
 8004adc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fd4c 	bl	8003580 <HAL_DMA_Abort_IT>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004afa:	e003      	b.n	8004b04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f809 	bl	8004b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b02:	e000      	b.n	8004b06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004b04:	bf00      	nop
    return;
 8004b06:	bf00      	nop
  }
}
 8004b08:	3720      	adds	r7, #32
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	08004b29 	.word	0x08004b29

08004b14 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff ffe6 	bl	8004b14 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	330c      	adds	r3, #12
 8004b62:	7812      	ldrb	r2, [r2, #0]
 8004b64:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8f1 	bl	8004d70 <SPI_CloseTx_ISR>
  }
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	1c9a      	adds	r2, r3, #2
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8cf 	bl	8004d70 <SPI_CloseTx_ISR>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bec:	f7fd fcde 	bl	80025ac <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bfc:	f7fd fcd6 	bl	80025ac <HAL_GetTick>
 8004c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c02:	4b39      	ldr	r3, [pc, #228]	; (8004ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	015b      	lsls	r3, r3, #5
 8004c08:	0d1b      	lsrs	r3, r3, #20
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	fb02 f303 	mul.w	r3, r2, r3
 8004c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c12:	e054      	b.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d050      	beq.n	8004cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c1c:	f7fd fcc6 	bl	80025ac <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d902      	bls.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d13d      	bne.n	8004cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d111      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d004      	beq.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5e:	d107      	bne.n	8004c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	d10f      	bne.n	8004c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e017      	b.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	bf0c      	ite	eq
 8004cce:	2301      	moveq	r3, #1
 8004cd0:	2300      	movne	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	79fb      	ldrb	r3, [r7, #7]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d19b      	bne.n	8004c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000024 	.word	0x20000024

08004cec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <SPI_EndRxTxTransaction+0x7c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <SPI_EndRxTxTransaction+0x80>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	0d5b      	lsrs	r3, r3, #21
 8004d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d112      	bne.n	8004d3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2180      	movs	r1, #128	; 0x80
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff5a 	bl	8004bdc <SPI_WaitFlagStateUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f043 0220 	orr.w	r2, r3, #32
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e00f      	b.n	8004d5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00a      	beq.n	8004d5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	2b80      	cmp	r3, #128	; 0x80
 8004d56:	d0f2      	beq.n	8004d3e <SPI_EndRxTxTransaction+0x52>
 8004d58:	e000      	b.n	8004d5c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d5a:	bf00      	nop
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000024 	.word	0x20000024
 8004d6c:	165e9f81 	.word	0x165e9f81

08004d70 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <SPI_CloseTx_ISR+0xbc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <SPI_CloseTx_ISR+0xc0>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0a5b      	lsrs	r3, r3, #9
 8004d84:	2264      	movs	r2, #100	; 0x64
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d8c:	f7fd fc0e 	bl	80025ac <HAL_GetTick>
 8004d90:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004da4:	e009      	b.n	8004dba <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0eb      	beq.n	8004d92 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dc8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	2164      	movs	r1, #100	; 0x64
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff8c 	bl	8004cec <SPI_EndRxTxTransaction>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dee:	2300      	movs	r3, #0
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fe7d 	bl	8004b14 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8004e1a:	e002      	b.n	8004e22 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fd f86f 	bl	8001f00 <HAL_SPI_TxCpltCallback>
}
 8004e22:	bf00      	nop
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000024 	.word	0x20000024
 8004e30:	057619f1 	.word	0x057619f1

08004e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e041      	b.n	8004eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd f9e4 	bl	8002228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 fade 	bl	8005434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d001      	beq.n	8004eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e03c      	b.n	8004f66 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_TIM_Base_Start+0xa0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIM_Base_Start+0x5c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d013      	beq.n	8004f30 <HAL_TIM_Base_Start+0x5c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_TIM_Base_Start+0xa4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_Base_Start+0x5c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <HAL_TIM_Base_Start+0xa8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_Base_Start+0x5c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <HAL_TIM_Base_Start+0xac>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_Base_Start+0x5c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_Base_Start+0xb0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d010      	beq.n	8004f64 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	e007      	b.n	8004f64 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40010000 	.word	0x40010000
 8004f78:	40000400 	.word	0x40000400
 8004f7c:	40000800 	.word	0x40000800
 8004f80:	40000c00 	.word	0x40000c00
 8004f84:	40014000 	.word	0x40014000

08004f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d001      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e044      	b.n	800502a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1e      	ldr	r2, [pc, #120]	; (8005038 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fca:	d013      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a1a      	ldr	r2, [pc, #104]	; (800503c <HAL_TIM_Base_Start_IT+0xb4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a19      	ldr	r2, [pc, #100]	; (8005040 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_TIM_Base_Start_IT+0xbc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_TIM_Base_Start_IT+0x6c>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d111      	bne.n	8005018 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d010      	beq.n	8005028 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005016:	e007      	b.n	8005028 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40014000 	.word	0x40014000

0800504c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b02      	cmp	r3, #2
 8005060:	d122      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d11b      	bne.n	80050a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0202 	mvn.w	r2, #2
 8005078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9b2 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
 8005094:	e005      	b.n	80050a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f9a4 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f9b5 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d122      	bne.n	80050fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d11b      	bne.n	80050fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0204 	mvn.w	r2, #4
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f988 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f97a 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f98b 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b08      	cmp	r3, #8
 8005108:	d122      	bne.n	8005150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b08      	cmp	r3, #8
 8005116:	d11b      	bne.n	8005150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0208 	mvn.w	r2, #8
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2204      	movs	r2, #4
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f95e 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f950 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f961 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	2b10      	cmp	r3, #16
 800515c:	d122      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	d11b      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0210 	mvn.w	r2, #16
 8005174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2208      	movs	r2, #8
 800517a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f934 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
 8005190:	e005      	b.n	800519e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f926 	bl	80053e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f937 	bl	800540c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10e      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f06f 0201 	mvn.w	r2, #1
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fc feae 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051da:	2b80      	cmp	r3, #128	; 0x80
 80051dc:	d10e      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	d107      	bne.n	80051fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 faae 	bl	8005758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b40      	cmp	r3, #64	; 0x40
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8fc 	bl	8005420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b20      	cmp	r3, #32
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0320 	and.w	r3, r3, #32
 8005240:	2b20      	cmp	r3, #32
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0220 	mvn.w	r2, #32
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fa78 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_TIM_ConfigClockSource+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e0b3      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x180>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ac:	d03e      	beq.n	800532c <HAL_TIM_ConfigClockSource+0xd0>
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	f200 8087 	bhi.w	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ba:	f000 8085 	beq.w	80053c8 <HAL_TIM_ConfigClockSource+0x16c>
 80052be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c2:	d87f      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052c4:	2b70      	cmp	r3, #112	; 0x70
 80052c6:	d01a      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0xa2>
 80052c8:	2b70      	cmp	r3, #112	; 0x70
 80052ca:	d87b      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052cc:	2b60      	cmp	r3, #96	; 0x60
 80052ce:	d050      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x116>
 80052d0:	2b60      	cmp	r3, #96	; 0x60
 80052d2:	d877      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052d4:	2b50      	cmp	r3, #80	; 0x50
 80052d6:	d03c      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0xf6>
 80052d8:	2b50      	cmp	r3, #80	; 0x50
 80052da:	d873      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d058      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x136>
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d86f      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052e4:	2b30      	cmp	r3, #48	; 0x30
 80052e6:	d064      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x156>
 80052e8:	2b30      	cmp	r3, #48	; 0x30
 80052ea:	d86b      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d060      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x156>
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d867      	bhi.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d05c      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x156>
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d05a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052fc:	e062      	b.n	80053c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f000 f98b 	bl	8005628 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
      break;
 800532a:	e04e      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6899      	ldr	r1, [r3, #8]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f000 f974 	bl	8005628 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534e:	609a      	str	r2, [r3, #8]
      break;
 8005350:	e03b      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	461a      	mov	r2, r3
 8005360:	f000 f8e8 	bl	8005534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2150      	movs	r1, #80	; 0x50
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f941 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005370:	e02b      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	461a      	mov	r2, r3
 8005380:	f000 f907 	bl	8005592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2160      	movs	r1, #96	; 0x60
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f931 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 8005390:	e01b      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 f8c8 	bl	8005534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f921 	bl	80055f2 <TIM_ITRx_SetConfig>
      break;
 80053b0:	e00b      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f000 f918 	bl	80055f2 <TIM_ITRx_SetConfig>
        break;
 80053c2:	e002      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053c4:	bf00      	nop
 80053c6:	e000      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80053c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a34      	ldr	r2, [pc, #208]	; (8005518 <TIM_Base_SetConfig+0xe4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_Base_SetConfig+0x38>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005452:	d00b      	beq.n	800546c <TIM_Base_SetConfig+0x38>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a31      	ldr	r2, [pc, #196]	; (800551c <TIM_Base_SetConfig+0xe8>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_Base_SetConfig+0x38>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a30      	ldr	r2, [pc, #192]	; (8005520 <TIM_Base_SetConfig+0xec>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_Base_SetConfig+0x38>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <TIM_Base_SetConfig+0xf0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d108      	bne.n	800547e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a25      	ldr	r2, [pc, #148]	; (8005518 <TIM_Base_SetConfig+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01b      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d017      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a22      	ldr	r2, [pc, #136]	; (800551c <TIM_Base_SetConfig+0xe8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <TIM_Base_SetConfig+0xec>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00f      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a20      	ldr	r2, [pc, #128]	; (8005524 <TIM_Base_SetConfig+0xf0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00b      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <TIM_Base_SetConfig+0xf4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d007      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1e      	ldr	r2, [pc, #120]	; (800552c <TIM_Base_SetConfig+0xf8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d003      	beq.n	80054be <TIM_Base_SetConfig+0x8a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	; (8005530 <TIM_Base_SetConfig+0xfc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d108      	bne.n	80054d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <TIM_Base_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d103      	bne.n	8005504 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	615a      	str	r2, [r3, #20]
}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800

08005534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0201 	bic.w	r2, r3, #1
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800555e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 030a 	bic.w	r3, r3, #10
 8005570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	621a      	str	r2, [r3, #32]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005592:	b480      	push	{r7}
 8005594:	b087      	sub	sp, #28
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0210 	bic.w	r2, r3, #16
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	031b      	lsls	r3, r3, #12
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	011b      	lsls	r3, r3, #4
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	f043 0307 	orr.w	r3, r3, #7
 8005614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	609a      	str	r2, [r3, #8]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	021a      	lsls	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	431a      	orrs	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800567c:	2302      	movs	r3, #2
 800567e:	e050      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2202      	movs	r2, #2
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d013      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a15      	ldr	r2, [pc, #84]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a13      	ldr	r2, [pc, #76]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40014000 	.word	0x40014000

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e03f      	b.n	80057fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7fc fd86 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2224      	movs	r2, #36	; 0x24
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fc7b 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b08a      	sub	sp, #40	; 0x28
 800580a:	af02      	add	r7, sp, #8
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d17c      	bne.n	8005920 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit+0x2c>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e075      	b.n	8005922 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit+0x3e>
 8005840:	2302      	movs	r3, #2
 8005842:	e06e      	b.n	8005922 <HAL_UART_Transmit+0x11c>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2221      	movs	r2, #33	; 0x21
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800585a:	f7fc fea7 	bl	80025ac <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	88fa      	ldrh	r2, [r7, #6]
 8005864:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d108      	bne.n	8005888 <HAL_UART_Transmit+0x82>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e003      	b.n	8005890 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005898:	e02a      	b.n	80058f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2180      	movs	r1, #128	; 0x80
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fa3d 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e036      	b.n	8005922 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10b      	bne.n	80058d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3302      	adds	r3, #2
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e007      	b.n	80058e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	781a      	ldrb	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3301      	adds	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1cf      	bne.n	800589a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2200      	movs	r2, #0
 8005902:	2140      	movs	r1, #64	; 0x40
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 fa0d 	bl	8005d24 <UART_WaitOnFlagUntilTimeout>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e006      	b.n	8005922 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3720      	adds	r7, #32
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b20      	cmp	r3, #32
 8005942:	d11d      	bne.n	8005980 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_UART_Receive_IT+0x26>
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e016      	b.n	8005982 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800595a:	2b01      	cmp	r3, #1
 800595c:	d101      	bne.n	8005962 <HAL_UART_Receive_IT+0x38>
 800595e:	2302      	movs	r3, #2
 8005960:	e00f      	b.n	8005982 <HAL_UART_Receive_IT+0x58>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	461a      	mov	r2, r3
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa1e 	bl	8005db8 <UART_Start_Receive_IT>
 800597c:	4603      	mov	r3, r0
 800597e:	e000      	b.n	8005982 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	; 0x28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_UART_IRQHandler+0x52>
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fad1 	bl	8005f7e <UART_Receive_IT>
      return;
 80059dc:	e17c      	b.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 80b1 	beq.w	8005b48 <HAL_UART_IRQHandler+0x1bc>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <HAL_UART_IRQHandler+0x70>
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80a6 	beq.w	8005b48 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_UART_IRQHandler+0x90>
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	f043 0201 	orr.w	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <HAL_UART_IRQHandler+0xb0>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d005      	beq.n	8005a3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a34:	f043 0202 	orr.w	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_UART_IRQHandler+0xd0>
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	f043 0204 	orr.w	r2, r3, #4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5e:	f003 0308 	and.w	r3, r3, #8
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00f      	beq.n	8005a86 <HAL_UART_IRQHandler+0xfa>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <HAL_UART_IRQHandler+0xee>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f043 0208 	orr.w	r2, r3, #8
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 811f 	beq.w	8005cce <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	f003 0320 	and.w	r3, r3, #32
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_UART_IRQHandler+0x11e>
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fa6a 	bl	8005f7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x146>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d031      	beq.n	8005b36 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9aa 	bl	8005e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae2:	2b40      	cmp	r3, #64	; 0x40
 8005ae4:	d123      	bne.n	8005b2e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	4a77      	ldr	r2, [pc, #476]	; (8005ce0 <HAL_UART_IRQHandler+0x354>)
 8005b04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fd fd38 	bl	8003580 <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00e      	b.n	8005b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8e6 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e00a      	b.n	8005b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f8e2 	bl	8005cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e006      	b.n	8005b44 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f8de 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005b42:	e0c4      	b.n	8005cce <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	bf00      	nop
    return;
 8005b46:	e0c2      	b.n	8005cce <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	f040 80a2 	bne.w	8005c96 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f003 0310 	and.w	r3, r3, #16
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 809c 	beq.w	8005c96 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8096 	beq.w	8005c96 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b40      	cmp	r3, #64	; 0x40
 8005b8c:	d14f      	bne.n	8005c2e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b98:	8a3b      	ldrh	r3, [r7, #16]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 8099 	beq.w	8005cd2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba4:	8a3a      	ldrh	r2, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	f080 8093 	bcs.w	8005cd2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8a3a      	ldrh	r2, [r7, #16]
 8005bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbc:	d02b      	beq.n	8005c16 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bcc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bec:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0210 	bic.w	r2, r2, #16
 8005c0a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fd fc45 	bl	80034a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f870 	bl	8005d0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c2c:	e051      	b.n	8005cd2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d047      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005c46:	8a7b      	ldrh	r3, [r7, #18]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d044      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c5a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0210 	bic.w	r2, r2, #16
 8005c88:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c8a:	8a7b      	ldrh	r3, [r7, #18]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f83c 	bl	8005d0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c94:	e01f      	b.n	8005cd6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x326>
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8ff 	bl	8005eae <UART_Transmit_IT>
    return;
 8005cb0:	e012      	b.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f941 	bl	8005f4e <UART_EndTransmit_IT>
    return;
 8005ccc:	e004      	b.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
    return;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <HAL_UART_IRQHandler+0x34c>
      return;
 8005cd6:	bf00      	nop
  }
}
 8005cd8:	3728      	adds	r7, #40	; 0x28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	08005e87 	.word	0x08005e87

08005ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d34:	e02c      	b.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d028      	beq.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d44:	f7fc fc32 	bl	80025ac <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d21d      	bcs.n	8005d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e00f      	b.n	8005db0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4013      	ands	r3, r2
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bf0c      	ite	eq
 8005da0:	2301      	moveq	r3, #1
 8005da2:	2300      	movne	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	461a      	mov	r2, r3
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d0c3      	beq.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	88fa      	ldrh	r2, [r7, #6]
 8005dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2222      	movs	r2, #34	; 0x22
 8005de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e42:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d107      	bne.n	8005e6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0210 	bic.w	r2, r2, #16
 8005e6a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7ff ff29 	bl	8005cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b21      	cmp	r3, #33	; 0x21
 8005ec0:	d13e      	bne.n	8005f40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d114      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d110      	bne.n	8005ef6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a1b      	ldr	r3, [r3, #32]
 8005ed8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	1c9a      	adds	r2, r3, #2
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	621a      	str	r2, [r3, #32]
 8005ef4:	e008      	b.n	8005f08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6211      	str	r1, [r2, #32]
 8005f00:	781a      	ldrb	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	e000      	b.n	8005f42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff feb8 	bl	8005ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b22      	cmp	r3, #34	; 0x22
 8005f90:	f040 8087 	bne.w	80060a2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d117      	bne.n	8005fce <UART_Receive_IT+0x50>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d113      	bne.n	8005fce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28
 8005fcc:	e026      	b.n	800601c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe0:	d007      	beq.n	8005ff2 <UART_Receive_IT+0x74>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10a      	bne.n	8006000 <UART_Receive_IT+0x82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e008      	b.n	8006012 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600c:	b2da      	uxtb	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4619      	mov	r1, r3
 800602a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800602c:	2b00      	cmp	r3, #0
 800602e:	d136      	bne.n	800609e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0220 	bic.w	r2, r2, #32
 800603e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800604e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695a      	ldr	r2, [r3, #20]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0201 	bic.w	r2, r2, #1
 800605e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	2b01      	cmp	r3, #1
 800606e:	d10e      	bne.n	800608e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0210 	bic.w	r2, r2, #16
 800607e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe40 	bl	8005d0c <HAL_UARTEx_RxEventCallback>
 800608c:	e002      	b.n	8006094 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fb ffb4 	bl	8001ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e002      	b.n	80060a4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	b09f      	sub	sp, #124	; 0x7c
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	68d9      	ldr	r1, [r3, #12]
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	ea40 0301 	orr.w	r3, r0, r1
 80060cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	431a      	orrs	r2, r3
 80060de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80060e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060f0:	f021 010c 	bic.w	r1, r1, #12
 80060f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060fa:	430b      	orrs	r3, r1
 80060fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610a:	6999      	ldr	r1, [r3, #24]
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	ea40 0301 	orr.w	r3, r0, r1
 8006114:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	4bc5      	ldr	r3, [pc, #788]	; (8006430 <UART_SetConfig+0x384>)
 800611c:	429a      	cmp	r2, r3
 800611e:	d004      	beq.n	800612a <UART_SetConfig+0x7e>
 8006120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4bc3      	ldr	r3, [pc, #780]	; (8006434 <UART_SetConfig+0x388>)
 8006126:	429a      	cmp	r2, r3
 8006128:	d103      	bne.n	8006132 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800612a:	f7fe facb 	bl	80046c4 <HAL_RCC_GetPCLK2Freq>
 800612e:	6778      	str	r0, [r7, #116]	; 0x74
 8006130:	e002      	b.n	8006138 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006132:	f7fe fab3 	bl	800469c <HAL_RCC_GetPCLK1Freq>
 8006136:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006140:	f040 80b6 	bne.w	80062b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006146:	461c      	mov	r4, r3
 8006148:	f04f 0500 	mov.w	r5, #0
 800614c:	4622      	mov	r2, r4
 800614e:	462b      	mov	r3, r5
 8006150:	1891      	adds	r1, r2, r2
 8006152:	6439      	str	r1, [r7, #64]	; 0x40
 8006154:	415b      	adcs	r3, r3
 8006156:	647b      	str	r3, [r7, #68]	; 0x44
 8006158:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800615c:	1912      	adds	r2, r2, r4
 800615e:	eb45 0303 	adc.w	r3, r5, r3
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f04f 0100 	mov.w	r1, #0
 800616a:	00d9      	lsls	r1, r3, #3
 800616c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006170:	00d0      	lsls	r0, r2, #3
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	1911      	adds	r1, r2, r4
 8006178:	6639      	str	r1, [r7, #96]	; 0x60
 800617a:	416b      	adcs	r3, r5
 800617c:	667b      	str	r3, [r7, #100]	; 0x64
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	461a      	mov	r2, r3
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	1891      	adds	r1, r2, r2
 800618a:	63b9      	str	r1, [r7, #56]	; 0x38
 800618c:	415b      	adcs	r3, r3
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006194:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006198:	f7fa fd68 	bl	8000c6c <__aeabi_uldivmod>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4ba5      	ldr	r3, [pc, #660]	; (8006438 <UART_SetConfig+0x38c>)
 80061a2:	fba3 2302 	umull	r2, r3, r3, r2
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	011e      	lsls	r6, r3, #4
 80061aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ac:	461c      	mov	r4, r3
 80061ae:	f04f 0500 	mov.w	r5, #0
 80061b2:	4622      	mov	r2, r4
 80061b4:	462b      	mov	r3, r5
 80061b6:	1891      	adds	r1, r2, r2
 80061b8:	6339      	str	r1, [r7, #48]	; 0x30
 80061ba:	415b      	adcs	r3, r3
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
 80061be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061c2:	1912      	adds	r2, r2, r4
 80061c4:	eb45 0303 	adc.w	r3, r5, r3
 80061c8:	f04f 0000 	mov.w	r0, #0
 80061cc:	f04f 0100 	mov.w	r1, #0
 80061d0:	00d9      	lsls	r1, r3, #3
 80061d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061d6:	00d0      	lsls	r0, r2, #3
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	1911      	adds	r1, r2, r4
 80061de:	65b9      	str	r1, [r7, #88]	; 0x58
 80061e0:	416b      	adcs	r3, r5
 80061e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	461a      	mov	r2, r3
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	1891      	adds	r1, r2, r2
 80061f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80061f2:	415b      	adcs	r3, r3
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061fe:	f7fa fd35 	bl	8000c6c <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4b8c      	ldr	r3, [pc, #560]	; (8006438 <UART_SetConfig+0x38c>)
 8006208:	fba3 1302 	umull	r1, r3, r3, r2
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	2164      	movs	r1, #100	; 0x64
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	3332      	adds	r3, #50	; 0x32
 800621a:	4a87      	ldr	r2, [pc, #540]	; (8006438 <UART_SetConfig+0x38c>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006228:	441e      	add	r6, r3
 800622a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800622c:	4618      	mov	r0, r3
 800622e:	f04f 0100 	mov.w	r1, #0
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	1894      	adds	r4, r2, r2
 8006238:	623c      	str	r4, [r7, #32]
 800623a:	415b      	adcs	r3, r3
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
 800623e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006242:	1812      	adds	r2, r2, r0
 8006244:	eb41 0303 	adc.w	r3, r1, r3
 8006248:	f04f 0400 	mov.w	r4, #0
 800624c:	f04f 0500 	mov.w	r5, #0
 8006250:	00dd      	lsls	r5, r3, #3
 8006252:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006256:	00d4      	lsls	r4, r2, #3
 8006258:	4622      	mov	r2, r4
 800625a:	462b      	mov	r3, r5
 800625c:	1814      	adds	r4, r2, r0
 800625e:	653c      	str	r4, [r7, #80]	; 0x50
 8006260:	414b      	adcs	r3, r1
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
 8006264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	461a      	mov	r2, r3
 800626a:	f04f 0300 	mov.w	r3, #0
 800626e:	1891      	adds	r1, r2, r2
 8006270:	61b9      	str	r1, [r7, #24]
 8006272:	415b      	adcs	r3, r3
 8006274:	61fb      	str	r3, [r7, #28]
 8006276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800627a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800627e:	f7fa fcf5 	bl	8000c6c <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4b6c      	ldr	r3, [pc, #432]	; (8006438 <UART_SetConfig+0x38c>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a67      	ldr	r2, [pc, #412]	; (8006438 <UART_SetConfig+0x38c>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f003 0207 	and.w	r2, r3, #7
 80062a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4432      	add	r2, r6
 80062ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062ae:	e0b9      	b.n	8006424 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b2:	461c      	mov	r4, r3
 80062b4:	f04f 0500 	mov.w	r5, #0
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	1891      	adds	r1, r2, r2
 80062be:	6139      	str	r1, [r7, #16]
 80062c0:	415b      	adcs	r3, r3
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80062c8:	1912      	adds	r2, r2, r4
 80062ca:	eb45 0303 	adc.w	r3, r5, r3
 80062ce:	f04f 0000 	mov.w	r0, #0
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	00d9      	lsls	r1, r3, #3
 80062d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062dc:	00d0      	lsls	r0, r2, #3
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	eb12 0804 	adds.w	r8, r2, r4
 80062e6:	eb43 0905 	adc.w	r9, r3, r5
 80062ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	008b      	lsls	r3, r1, #2
 80062fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006302:	0082      	lsls	r2, r0, #2
 8006304:	4640      	mov	r0, r8
 8006306:	4649      	mov	r1, r9
 8006308:	f7fa fcb0 	bl	8000c6c <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4b49      	ldr	r3, [pc, #292]	; (8006438 <UART_SetConfig+0x38c>)
 8006312:	fba3 2302 	umull	r2, r3, r3, r2
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	011e      	lsls	r6, r3, #4
 800631a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800631c:	4618      	mov	r0, r3
 800631e:	f04f 0100 	mov.w	r1, #0
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	1894      	adds	r4, r2, r2
 8006328:	60bc      	str	r4, [r7, #8]
 800632a:	415b      	adcs	r3, r3
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006332:	1812      	adds	r2, r2, r0
 8006334:	eb41 0303 	adc.w	r3, r1, r3
 8006338:	f04f 0400 	mov.w	r4, #0
 800633c:	f04f 0500 	mov.w	r5, #0
 8006340:	00dd      	lsls	r5, r3, #3
 8006342:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006346:	00d4      	lsls	r4, r2, #3
 8006348:	4622      	mov	r2, r4
 800634a:	462b      	mov	r3, r5
 800634c:	1814      	adds	r4, r2, r0
 800634e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006350:	414b      	adcs	r3, r1
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4618      	mov	r0, r3
 800635a:	f04f 0100 	mov.w	r1, #0
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	008b      	lsls	r3, r1, #2
 8006368:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800636c:	0082      	lsls	r2, r0, #2
 800636e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006372:	f7fa fc7b 	bl	8000c6c <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b2f      	ldr	r3, [pc, #188]	; (8006438 <UART_SetConfig+0x38c>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	; 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	3332      	adds	r3, #50	; 0x32
 800638e:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <UART_SetConfig+0x38c>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800639a:	441e      	add	r6, r3
 800639c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639e:	4618      	mov	r0, r3
 80063a0:	f04f 0100 	mov.w	r1, #0
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	1894      	adds	r4, r2, r2
 80063aa:	603c      	str	r4, [r7, #0]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063b4:	1812      	adds	r2, r2, r0
 80063b6:	eb41 0303 	adc.w	r3, r1, r3
 80063ba:	f04f 0400 	mov.w	r4, #0
 80063be:	f04f 0500 	mov.w	r5, #0
 80063c2:	00dd      	lsls	r5, r3, #3
 80063c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063c8:	00d4      	lsls	r4, r2, #3
 80063ca:	4622      	mov	r2, r4
 80063cc:	462b      	mov	r3, r5
 80063ce:	eb12 0a00 	adds.w	sl, r2, r0
 80063d2:	eb43 0b01 	adc.w	fp, r3, r1
 80063d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4618      	mov	r0, r3
 80063dc:	f04f 0100 	mov.w	r1, #0
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	008b      	lsls	r3, r1, #2
 80063ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063ee:	0082      	lsls	r2, r0, #2
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	f7fa fc3a 	bl	8000c6c <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <UART_SetConfig+0x38c>)
 80063fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2164      	movs	r1, #100	; 0x64
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	3332      	adds	r3, #50	; 0x32
 8006410:	4a09      	ldr	r2, [pc, #36]	; (8006438 <UART_SetConfig+0x38c>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4432      	add	r2, r6
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	377c      	adds	r7, #124	; 0x7c
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	40011000 	.word	0x40011000
 8006434:	40011400 	.word	0x40011400
 8006438:	51eb851f 	.word	0x51eb851f

0800643c <__errno>:
 800643c:	4b01      	ldr	r3, [pc, #4]	; (8006444 <__errno+0x8>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20000030 	.word	0x20000030

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4d0d      	ldr	r5, [pc, #52]	; (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	; (8006484 <__libc_init_array+0x3c>)
 800644e:	1b64      	subs	r4, r4, r5
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2600      	movs	r6, #0
 8006454:	42a6      	cmp	r6, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4d0b      	ldr	r5, [pc, #44]	; (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	; (800648c <__libc_init_array+0x44>)
 800645c:	f001 fc86 	bl	8007d6c <_init>
 8006460:	1b64      	subs	r4, r4, r5
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2600      	movs	r6, #0
 8006466:	42a6      	cmp	r6, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006470:	4798      	blx	r3
 8006472:	3601      	adds	r6, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f855 3b04 	ldr.w	r3, [r5], #4
 800647a:	4798      	blx	r3
 800647c:	3601      	adds	r6, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	08008258 	.word	0x08008258
 8006484:	08008258 	.word	0x08008258
 8006488:	08008258 	.word	0x08008258
 800648c:	0800825c 	.word	0x0800825c

08006490 <memcpy>:
 8006490:	440a      	add	r2, r1
 8006492:	4291      	cmp	r1, r2
 8006494:	f100 33ff 	add.w	r3, r0, #4294967295
 8006498:	d100      	bne.n	800649c <memcpy+0xc>
 800649a:	4770      	bx	lr
 800649c:	b510      	push	{r4, lr}
 800649e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a6:	4291      	cmp	r1, r2
 80064a8:	d1f9      	bne.n	800649e <memcpy+0xe>
 80064aa:	bd10      	pop	{r4, pc}

080064ac <memset>:
 80064ac:	4402      	add	r2, r0
 80064ae:	4603      	mov	r3, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d100      	bne.n	80064b6 <memset+0xa>
 80064b4:	4770      	bx	lr
 80064b6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ba:	e7f9      	b.n	80064b0 <memset+0x4>

080064bc <siprintf>:
 80064bc:	b40e      	push	{r1, r2, r3}
 80064be:	b500      	push	{lr}
 80064c0:	b09c      	sub	sp, #112	; 0x70
 80064c2:	ab1d      	add	r3, sp, #116	; 0x74
 80064c4:	9002      	str	r0, [sp, #8]
 80064c6:	9006      	str	r0, [sp, #24]
 80064c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064cc:	4809      	ldr	r0, [pc, #36]	; (80064f4 <siprintf+0x38>)
 80064ce:	9107      	str	r1, [sp, #28]
 80064d0:	9104      	str	r1, [sp, #16]
 80064d2:	4909      	ldr	r1, [pc, #36]	; (80064f8 <siprintf+0x3c>)
 80064d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064d8:	9105      	str	r1, [sp, #20]
 80064da:	6800      	ldr	r0, [r0, #0]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	a902      	add	r1, sp, #8
 80064e0:	f000 f868 	bl	80065b4 <_svfiprintf_r>
 80064e4:	9b02      	ldr	r3, [sp, #8]
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	b01c      	add	sp, #112	; 0x70
 80064ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80064f0:	b003      	add	sp, #12
 80064f2:	4770      	bx	lr
 80064f4:	20000030 	.word	0x20000030
 80064f8:	ffff0208 	.word	0xffff0208

080064fc <__ssputs_r>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	688e      	ldr	r6, [r1, #8]
 8006502:	429e      	cmp	r6, r3
 8006504:	4682      	mov	sl, r0
 8006506:	460c      	mov	r4, r1
 8006508:	4690      	mov	r8, r2
 800650a:	461f      	mov	r7, r3
 800650c:	d838      	bhi.n	8006580 <__ssputs_r+0x84>
 800650e:	898a      	ldrh	r2, [r1, #12]
 8006510:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006514:	d032      	beq.n	800657c <__ssputs_r+0x80>
 8006516:	6825      	ldr	r5, [r4, #0]
 8006518:	6909      	ldr	r1, [r1, #16]
 800651a:	eba5 0901 	sub.w	r9, r5, r1
 800651e:	6965      	ldr	r5, [r4, #20]
 8006520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006524:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006528:	3301      	adds	r3, #1
 800652a:	444b      	add	r3, r9
 800652c:	106d      	asrs	r5, r5, #1
 800652e:	429d      	cmp	r5, r3
 8006530:	bf38      	it	cc
 8006532:	461d      	movcc	r5, r3
 8006534:	0553      	lsls	r3, r2, #21
 8006536:	d531      	bpl.n	800659c <__ssputs_r+0xa0>
 8006538:	4629      	mov	r1, r5
 800653a:	f000 fb39 	bl	8006bb0 <_malloc_r>
 800653e:	4606      	mov	r6, r0
 8006540:	b950      	cbnz	r0, 8006558 <__ssputs_r+0x5c>
 8006542:	230c      	movs	r3, #12
 8006544:	f8ca 3000 	str.w	r3, [sl]
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654e:	81a3      	strh	r3, [r4, #12]
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	6921      	ldr	r1, [r4, #16]
 800655a:	464a      	mov	r2, r9
 800655c:	f7ff ff98 	bl	8006490 <memcpy>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	6126      	str	r6, [r4, #16]
 800656e:	6165      	str	r5, [r4, #20]
 8006570:	444e      	add	r6, r9
 8006572:	eba5 0509 	sub.w	r5, r5, r9
 8006576:	6026      	str	r6, [r4, #0]
 8006578:	60a5      	str	r5, [r4, #8]
 800657a:	463e      	mov	r6, r7
 800657c:	42be      	cmp	r6, r7
 800657e:	d900      	bls.n	8006582 <__ssputs_r+0x86>
 8006580:	463e      	mov	r6, r7
 8006582:	4632      	mov	r2, r6
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	4641      	mov	r1, r8
 8006588:	f000 faa8 	bl	8006adc <memmove>
 800658c:	68a3      	ldr	r3, [r4, #8]
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	1b9b      	subs	r3, r3, r6
 8006592:	4432      	add	r2, r6
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	6022      	str	r2, [r4, #0]
 8006598:	2000      	movs	r0, #0
 800659a:	e7db      	b.n	8006554 <__ssputs_r+0x58>
 800659c:	462a      	mov	r2, r5
 800659e:	f000 fb61 	bl	8006c64 <_realloc_r>
 80065a2:	4606      	mov	r6, r0
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d1e1      	bne.n	800656c <__ssputs_r+0x70>
 80065a8:	6921      	ldr	r1, [r4, #16]
 80065aa:	4650      	mov	r0, sl
 80065ac:	f000 fab0 	bl	8006b10 <_free_r>
 80065b0:	e7c7      	b.n	8006542 <__ssputs_r+0x46>
	...

080065b4 <_svfiprintf_r>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	4698      	mov	r8, r3
 80065ba:	898b      	ldrh	r3, [r1, #12]
 80065bc:	061b      	lsls	r3, r3, #24
 80065be:	b09d      	sub	sp, #116	; 0x74
 80065c0:	4607      	mov	r7, r0
 80065c2:	460d      	mov	r5, r1
 80065c4:	4614      	mov	r4, r2
 80065c6:	d50e      	bpl.n	80065e6 <_svfiprintf_r+0x32>
 80065c8:	690b      	ldr	r3, [r1, #16]
 80065ca:	b963      	cbnz	r3, 80065e6 <_svfiprintf_r+0x32>
 80065cc:	2140      	movs	r1, #64	; 0x40
 80065ce:	f000 faef 	bl	8006bb0 <_malloc_r>
 80065d2:	6028      	str	r0, [r5, #0]
 80065d4:	6128      	str	r0, [r5, #16]
 80065d6:	b920      	cbnz	r0, 80065e2 <_svfiprintf_r+0x2e>
 80065d8:	230c      	movs	r3, #12
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	f04f 30ff 	mov.w	r0, #4294967295
 80065e0:	e0d1      	b.n	8006786 <_svfiprintf_r+0x1d2>
 80065e2:	2340      	movs	r3, #64	; 0x40
 80065e4:	616b      	str	r3, [r5, #20]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ea:	2320      	movs	r3, #32
 80065ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80065f4:	2330      	movs	r3, #48	; 0x30
 80065f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80067a0 <_svfiprintf_r+0x1ec>
 80065fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065fe:	f04f 0901 	mov.w	r9, #1
 8006602:	4623      	mov	r3, r4
 8006604:	469a      	mov	sl, r3
 8006606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800660a:	b10a      	cbz	r2, 8006610 <_svfiprintf_r+0x5c>
 800660c:	2a25      	cmp	r2, #37	; 0x25
 800660e:	d1f9      	bne.n	8006604 <_svfiprintf_r+0x50>
 8006610:	ebba 0b04 	subs.w	fp, sl, r4
 8006614:	d00b      	beq.n	800662e <_svfiprintf_r+0x7a>
 8006616:	465b      	mov	r3, fp
 8006618:	4622      	mov	r2, r4
 800661a:	4629      	mov	r1, r5
 800661c:	4638      	mov	r0, r7
 800661e:	f7ff ff6d 	bl	80064fc <__ssputs_r>
 8006622:	3001      	adds	r0, #1
 8006624:	f000 80aa 	beq.w	800677c <_svfiprintf_r+0x1c8>
 8006628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800662a:	445a      	add	r2, fp
 800662c:	9209      	str	r2, [sp, #36]	; 0x24
 800662e:	f89a 3000 	ldrb.w	r3, [sl]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 80a2 	beq.w	800677c <_svfiprintf_r+0x1c8>
 8006638:	2300      	movs	r3, #0
 800663a:	f04f 32ff 	mov.w	r2, #4294967295
 800663e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006642:	f10a 0a01 	add.w	sl, sl, #1
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800664e:	931a      	str	r3, [sp, #104]	; 0x68
 8006650:	4654      	mov	r4, sl
 8006652:	2205      	movs	r2, #5
 8006654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006658:	4851      	ldr	r0, [pc, #324]	; (80067a0 <_svfiprintf_r+0x1ec>)
 800665a:	f7f9 fdc9 	bl	80001f0 <memchr>
 800665e:	9a04      	ldr	r2, [sp, #16]
 8006660:	b9d8      	cbnz	r0, 800669a <_svfiprintf_r+0xe6>
 8006662:	06d0      	lsls	r0, r2, #27
 8006664:	bf44      	itt	mi
 8006666:	2320      	movmi	r3, #32
 8006668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800666c:	0711      	lsls	r1, r2, #28
 800666e:	bf44      	itt	mi
 8006670:	232b      	movmi	r3, #43	; 0x2b
 8006672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006676:	f89a 3000 	ldrb.w	r3, [sl]
 800667a:	2b2a      	cmp	r3, #42	; 0x2a
 800667c:	d015      	beq.n	80066aa <_svfiprintf_r+0xf6>
 800667e:	9a07      	ldr	r2, [sp, #28]
 8006680:	4654      	mov	r4, sl
 8006682:	2000      	movs	r0, #0
 8006684:	f04f 0c0a 	mov.w	ip, #10
 8006688:	4621      	mov	r1, r4
 800668a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800668e:	3b30      	subs	r3, #48	; 0x30
 8006690:	2b09      	cmp	r3, #9
 8006692:	d94e      	bls.n	8006732 <_svfiprintf_r+0x17e>
 8006694:	b1b0      	cbz	r0, 80066c4 <_svfiprintf_r+0x110>
 8006696:	9207      	str	r2, [sp, #28]
 8006698:	e014      	b.n	80066c4 <_svfiprintf_r+0x110>
 800669a:	eba0 0308 	sub.w	r3, r0, r8
 800669e:	fa09 f303 	lsl.w	r3, r9, r3
 80066a2:	4313      	orrs	r3, r2
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	46a2      	mov	sl, r4
 80066a8:	e7d2      	b.n	8006650 <_svfiprintf_r+0x9c>
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	1d19      	adds	r1, r3, #4
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	9103      	str	r1, [sp, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	bfbb      	ittet	lt
 80066b6:	425b      	neglt	r3, r3
 80066b8:	f042 0202 	orrlt.w	r2, r2, #2
 80066bc:	9307      	strge	r3, [sp, #28]
 80066be:	9307      	strlt	r3, [sp, #28]
 80066c0:	bfb8      	it	lt
 80066c2:	9204      	strlt	r2, [sp, #16]
 80066c4:	7823      	ldrb	r3, [r4, #0]
 80066c6:	2b2e      	cmp	r3, #46	; 0x2e
 80066c8:	d10c      	bne.n	80066e4 <_svfiprintf_r+0x130>
 80066ca:	7863      	ldrb	r3, [r4, #1]
 80066cc:	2b2a      	cmp	r3, #42	; 0x2a
 80066ce:	d135      	bne.n	800673c <_svfiprintf_r+0x188>
 80066d0:	9b03      	ldr	r3, [sp, #12]
 80066d2:	1d1a      	adds	r2, r3, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	9203      	str	r2, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bfb8      	it	lt
 80066dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80066e0:	3402      	adds	r4, #2
 80066e2:	9305      	str	r3, [sp, #20]
 80066e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80067b0 <_svfiprintf_r+0x1fc>
 80066e8:	7821      	ldrb	r1, [r4, #0]
 80066ea:	2203      	movs	r2, #3
 80066ec:	4650      	mov	r0, sl
 80066ee:	f7f9 fd7f 	bl	80001f0 <memchr>
 80066f2:	b140      	cbz	r0, 8006706 <_svfiprintf_r+0x152>
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	eba0 000a 	sub.w	r0, r0, sl
 80066fa:	fa03 f000 	lsl.w	r0, r3, r0
 80066fe:	9b04      	ldr	r3, [sp, #16]
 8006700:	4303      	orrs	r3, r0
 8006702:	3401      	adds	r4, #1
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800670a:	4826      	ldr	r0, [pc, #152]	; (80067a4 <_svfiprintf_r+0x1f0>)
 800670c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006710:	2206      	movs	r2, #6
 8006712:	f7f9 fd6d 	bl	80001f0 <memchr>
 8006716:	2800      	cmp	r0, #0
 8006718:	d038      	beq.n	800678c <_svfiprintf_r+0x1d8>
 800671a:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <_svfiprintf_r+0x1f4>)
 800671c:	bb1b      	cbnz	r3, 8006766 <_svfiprintf_r+0x1b2>
 800671e:	9b03      	ldr	r3, [sp, #12]
 8006720:	3307      	adds	r3, #7
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	3308      	adds	r3, #8
 8006728:	9303      	str	r3, [sp, #12]
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	4433      	add	r3, r6
 800672e:	9309      	str	r3, [sp, #36]	; 0x24
 8006730:	e767      	b.n	8006602 <_svfiprintf_r+0x4e>
 8006732:	fb0c 3202 	mla	r2, ip, r2, r3
 8006736:	460c      	mov	r4, r1
 8006738:	2001      	movs	r0, #1
 800673a:	e7a5      	b.n	8006688 <_svfiprintf_r+0xd4>
 800673c:	2300      	movs	r3, #0
 800673e:	3401      	adds	r4, #1
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	4619      	mov	r1, r3
 8006744:	f04f 0c0a 	mov.w	ip, #10
 8006748:	4620      	mov	r0, r4
 800674a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800674e:	3a30      	subs	r2, #48	; 0x30
 8006750:	2a09      	cmp	r2, #9
 8006752:	d903      	bls.n	800675c <_svfiprintf_r+0x1a8>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0c5      	beq.n	80066e4 <_svfiprintf_r+0x130>
 8006758:	9105      	str	r1, [sp, #20]
 800675a:	e7c3      	b.n	80066e4 <_svfiprintf_r+0x130>
 800675c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006760:	4604      	mov	r4, r0
 8006762:	2301      	movs	r3, #1
 8006764:	e7f0      	b.n	8006748 <_svfiprintf_r+0x194>
 8006766:	ab03      	add	r3, sp, #12
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	462a      	mov	r2, r5
 800676c:	4b0f      	ldr	r3, [pc, #60]	; (80067ac <_svfiprintf_r+0x1f8>)
 800676e:	a904      	add	r1, sp, #16
 8006770:	4638      	mov	r0, r7
 8006772:	f3af 8000 	nop.w
 8006776:	1c42      	adds	r2, r0, #1
 8006778:	4606      	mov	r6, r0
 800677a:	d1d6      	bne.n	800672a <_svfiprintf_r+0x176>
 800677c:	89ab      	ldrh	r3, [r5, #12]
 800677e:	065b      	lsls	r3, r3, #25
 8006780:	f53f af2c 	bmi.w	80065dc <_svfiprintf_r+0x28>
 8006784:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006786:	b01d      	add	sp, #116	; 0x74
 8006788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	462a      	mov	r2, r5
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <_svfiprintf_r+0x1f8>)
 8006794:	a904      	add	r1, sp, #16
 8006796:	4638      	mov	r0, r7
 8006798:	f000 f87a 	bl	8006890 <_printf_i>
 800679c:	e7eb      	b.n	8006776 <_svfiprintf_r+0x1c2>
 800679e:	bf00      	nop
 80067a0:	08008040 	.word	0x08008040
 80067a4:	0800804a 	.word	0x0800804a
 80067a8:	00000000 	.word	0x00000000
 80067ac:	080064fd 	.word	0x080064fd
 80067b0:	08008046 	.word	0x08008046

080067b4 <_printf_common>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	4616      	mov	r6, r2
 80067ba:	4699      	mov	r9, r3
 80067bc:	688a      	ldr	r2, [r1, #8]
 80067be:	690b      	ldr	r3, [r1, #16]
 80067c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bfb8      	it	lt
 80067c8:	4613      	movlt	r3, r2
 80067ca:	6033      	str	r3, [r6, #0]
 80067cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067d0:	4607      	mov	r7, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b10a      	cbz	r2, 80067da <_printf_common+0x26>
 80067d6:	3301      	adds	r3, #1
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	0699      	lsls	r1, r3, #26
 80067de:	bf42      	ittt	mi
 80067e0:	6833      	ldrmi	r3, [r6, #0]
 80067e2:	3302      	addmi	r3, #2
 80067e4:	6033      	strmi	r3, [r6, #0]
 80067e6:	6825      	ldr	r5, [r4, #0]
 80067e8:	f015 0506 	ands.w	r5, r5, #6
 80067ec:	d106      	bne.n	80067fc <_printf_common+0x48>
 80067ee:	f104 0a19 	add.w	sl, r4, #25
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	6832      	ldr	r2, [r6, #0]
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	dc26      	bgt.n	800684a <_printf_common+0x96>
 80067fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006800:	1e13      	subs	r3, r2, #0
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	bf18      	it	ne
 8006806:	2301      	movne	r3, #1
 8006808:	0692      	lsls	r2, r2, #26
 800680a:	d42b      	bmi.n	8006864 <_printf_common+0xb0>
 800680c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006810:	4649      	mov	r1, r9
 8006812:	4638      	mov	r0, r7
 8006814:	47c0      	blx	r8
 8006816:	3001      	adds	r0, #1
 8006818:	d01e      	beq.n	8006858 <_printf_common+0xa4>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	68e5      	ldr	r5, [r4, #12]
 800681e:	6832      	ldr	r2, [r6, #0]
 8006820:	f003 0306 	and.w	r3, r3, #6
 8006824:	2b04      	cmp	r3, #4
 8006826:	bf08      	it	eq
 8006828:	1aad      	subeq	r5, r5, r2
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	6922      	ldr	r2, [r4, #16]
 800682e:	bf0c      	ite	eq
 8006830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006834:	2500      	movne	r5, #0
 8006836:	4293      	cmp	r3, r2
 8006838:	bfc4      	itt	gt
 800683a:	1a9b      	subgt	r3, r3, r2
 800683c:	18ed      	addgt	r5, r5, r3
 800683e:	2600      	movs	r6, #0
 8006840:	341a      	adds	r4, #26
 8006842:	42b5      	cmp	r5, r6
 8006844:	d11a      	bne.n	800687c <_printf_common+0xc8>
 8006846:	2000      	movs	r0, #0
 8006848:	e008      	b.n	800685c <_printf_common+0xa8>
 800684a:	2301      	movs	r3, #1
 800684c:	4652      	mov	r2, sl
 800684e:	4649      	mov	r1, r9
 8006850:	4638      	mov	r0, r7
 8006852:	47c0      	blx	r8
 8006854:	3001      	adds	r0, #1
 8006856:	d103      	bne.n	8006860 <_printf_common+0xac>
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006860:	3501      	adds	r5, #1
 8006862:	e7c6      	b.n	80067f2 <_printf_common+0x3e>
 8006864:	18e1      	adds	r1, r4, r3
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	2030      	movs	r0, #48	; 0x30
 800686a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800686e:	4422      	add	r2, r4
 8006870:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006874:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006878:	3302      	adds	r3, #2
 800687a:	e7c7      	b.n	800680c <_printf_common+0x58>
 800687c:	2301      	movs	r3, #1
 800687e:	4622      	mov	r2, r4
 8006880:	4649      	mov	r1, r9
 8006882:	4638      	mov	r0, r7
 8006884:	47c0      	blx	r8
 8006886:	3001      	adds	r0, #1
 8006888:	d0e6      	beq.n	8006858 <_printf_common+0xa4>
 800688a:	3601      	adds	r6, #1
 800688c:	e7d9      	b.n	8006842 <_printf_common+0x8e>
	...

08006890 <_printf_i>:
 8006890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006894:	460c      	mov	r4, r1
 8006896:	4691      	mov	r9, r2
 8006898:	7e27      	ldrb	r7, [r4, #24]
 800689a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800689c:	2f78      	cmp	r7, #120	; 0x78
 800689e:	4680      	mov	r8, r0
 80068a0:	469a      	mov	sl, r3
 80068a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068a6:	d807      	bhi.n	80068b8 <_printf_i+0x28>
 80068a8:	2f62      	cmp	r7, #98	; 0x62
 80068aa:	d80a      	bhi.n	80068c2 <_printf_i+0x32>
 80068ac:	2f00      	cmp	r7, #0
 80068ae:	f000 80d8 	beq.w	8006a62 <_printf_i+0x1d2>
 80068b2:	2f58      	cmp	r7, #88	; 0x58
 80068b4:	f000 80a3 	beq.w	80069fe <_printf_i+0x16e>
 80068b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068c0:	e03a      	b.n	8006938 <_printf_i+0xa8>
 80068c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068c6:	2b15      	cmp	r3, #21
 80068c8:	d8f6      	bhi.n	80068b8 <_printf_i+0x28>
 80068ca:	a001      	add	r0, pc, #4	; (adr r0, 80068d0 <_printf_i+0x40>)
 80068cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80068d0:	08006929 	.word	0x08006929
 80068d4:	0800693d 	.word	0x0800693d
 80068d8:	080068b9 	.word	0x080068b9
 80068dc:	080068b9 	.word	0x080068b9
 80068e0:	080068b9 	.word	0x080068b9
 80068e4:	080068b9 	.word	0x080068b9
 80068e8:	0800693d 	.word	0x0800693d
 80068ec:	080068b9 	.word	0x080068b9
 80068f0:	080068b9 	.word	0x080068b9
 80068f4:	080068b9 	.word	0x080068b9
 80068f8:	080068b9 	.word	0x080068b9
 80068fc:	08006a49 	.word	0x08006a49
 8006900:	0800696d 	.word	0x0800696d
 8006904:	08006a2b 	.word	0x08006a2b
 8006908:	080068b9 	.word	0x080068b9
 800690c:	080068b9 	.word	0x080068b9
 8006910:	08006a6b 	.word	0x08006a6b
 8006914:	080068b9 	.word	0x080068b9
 8006918:	0800696d 	.word	0x0800696d
 800691c:	080068b9 	.word	0x080068b9
 8006920:	080068b9 	.word	0x080068b9
 8006924:	08006a33 	.word	0x08006a33
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	1d1a      	adds	r2, r3, #4
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	600a      	str	r2, [r1, #0]
 8006930:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006938:	2301      	movs	r3, #1
 800693a:	e0a3      	b.n	8006a84 <_printf_i+0x1f4>
 800693c:	6825      	ldr	r5, [r4, #0]
 800693e:	6808      	ldr	r0, [r1, #0]
 8006940:	062e      	lsls	r6, r5, #24
 8006942:	f100 0304 	add.w	r3, r0, #4
 8006946:	d50a      	bpl.n	800695e <_printf_i+0xce>
 8006948:	6805      	ldr	r5, [r0, #0]
 800694a:	600b      	str	r3, [r1, #0]
 800694c:	2d00      	cmp	r5, #0
 800694e:	da03      	bge.n	8006958 <_printf_i+0xc8>
 8006950:	232d      	movs	r3, #45	; 0x2d
 8006952:	426d      	negs	r5, r5
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	485e      	ldr	r0, [pc, #376]	; (8006ad4 <_printf_i+0x244>)
 800695a:	230a      	movs	r3, #10
 800695c:	e019      	b.n	8006992 <_printf_i+0x102>
 800695e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006962:	6805      	ldr	r5, [r0, #0]
 8006964:	600b      	str	r3, [r1, #0]
 8006966:	bf18      	it	ne
 8006968:	b22d      	sxthne	r5, r5
 800696a:	e7ef      	b.n	800694c <_printf_i+0xbc>
 800696c:	680b      	ldr	r3, [r1, #0]
 800696e:	6825      	ldr	r5, [r4, #0]
 8006970:	1d18      	adds	r0, r3, #4
 8006972:	6008      	str	r0, [r1, #0]
 8006974:	0628      	lsls	r0, r5, #24
 8006976:	d501      	bpl.n	800697c <_printf_i+0xec>
 8006978:	681d      	ldr	r5, [r3, #0]
 800697a:	e002      	b.n	8006982 <_printf_i+0xf2>
 800697c:	0669      	lsls	r1, r5, #25
 800697e:	d5fb      	bpl.n	8006978 <_printf_i+0xe8>
 8006980:	881d      	ldrh	r5, [r3, #0]
 8006982:	4854      	ldr	r0, [pc, #336]	; (8006ad4 <_printf_i+0x244>)
 8006984:	2f6f      	cmp	r7, #111	; 0x6f
 8006986:	bf0c      	ite	eq
 8006988:	2308      	moveq	r3, #8
 800698a:	230a      	movne	r3, #10
 800698c:	2100      	movs	r1, #0
 800698e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006992:	6866      	ldr	r6, [r4, #4]
 8006994:	60a6      	str	r6, [r4, #8]
 8006996:	2e00      	cmp	r6, #0
 8006998:	bfa2      	ittt	ge
 800699a:	6821      	ldrge	r1, [r4, #0]
 800699c:	f021 0104 	bicge.w	r1, r1, #4
 80069a0:	6021      	strge	r1, [r4, #0]
 80069a2:	b90d      	cbnz	r5, 80069a8 <_printf_i+0x118>
 80069a4:	2e00      	cmp	r6, #0
 80069a6:	d04d      	beq.n	8006a44 <_printf_i+0x1b4>
 80069a8:	4616      	mov	r6, r2
 80069aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ae:	fb03 5711 	mls	r7, r3, r1, r5
 80069b2:	5dc7      	ldrb	r7, [r0, r7]
 80069b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069b8:	462f      	mov	r7, r5
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	460d      	mov	r5, r1
 80069be:	d9f4      	bls.n	80069aa <_printf_i+0x11a>
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10b      	bne.n	80069dc <_printf_i+0x14c>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07df      	lsls	r7, r3, #31
 80069c8:	d508      	bpl.n	80069dc <_printf_i+0x14c>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	6861      	ldr	r1, [r4, #4]
 80069ce:	4299      	cmp	r1, r3
 80069d0:	bfde      	ittt	le
 80069d2:	2330      	movle	r3, #48	; 0x30
 80069d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069dc:	1b92      	subs	r2, r2, r6
 80069de:	6122      	str	r2, [r4, #16]
 80069e0:	f8cd a000 	str.w	sl, [sp]
 80069e4:	464b      	mov	r3, r9
 80069e6:	aa03      	add	r2, sp, #12
 80069e8:	4621      	mov	r1, r4
 80069ea:	4640      	mov	r0, r8
 80069ec:	f7ff fee2 	bl	80067b4 <_printf_common>
 80069f0:	3001      	adds	r0, #1
 80069f2:	d14c      	bne.n	8006a8e <_printf_i+0x1fe>
 80069f4:	f04f 30ff 	mov.w	r0, #4294967295
 80069f8:	b004      	add	sp, #16
 80069fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fe:	4835      	ldr	r0, [pc, #212]	; (8006ad4 <_printf_i+0x244>)
 8006a00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	680e      	ldr	r6, [r1, #0]
 8006a08:	061f      	lsls	r7, r3, #24
 8006a0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a0e:	600e      	str	r6, [r1, #0]
 8006a10:	d514      	bpl.n	8006a3c <_printf_i+0x1ac>
 8006a12:	07d9      	lsls	r1, r3, #31
 8006a14:	bf44      	itt	mi
 8006a16:	f043 0320 	orrmi.w	r3, r3, #32
 8006a1a:	6023      	strmi	r3, [r4, #0]
 8006a1c:	b91d      	cbnz	r5, 8006a26 <_printf_i+0x196>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	f023 0320 	bic.w	r3, r3, #32
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	2310      	movs	r3, #16
 8006a28:	e7b0      	b.n	800698c <_printf_i+0xfc>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	f043 0320 	orr.w	r3, r3, #32
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	2378      	movs	r3, #120	; 0x78
 8006a34:	4828      	ldr	r0, [pc, #160]	; (8006ad8 <_printf_i+0x248>)
 8006a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a3a:	e7e3      	b.n	8006a04 <_printf_i+0x174>
 8006a3c:	065e      	lsls	r6, r3, #25
 8006a3e:	bf48      	it	mi
 8006a40:	b2ad      	uxthmi	r5, r5
 8006a42:	e7e6      	b.n	8006a12 <_printf_i+0x182>
 8006a44:	4616      	mov	r6, r2
 8006a46:	e7bb      	b.n	80069c0 <_printf_i+0x130>
 8006a48:	680b      	ldr	r3, [r1, #0]
 8006a4a:	6826      	ldr	r6, [r4, #0]
 8006a4c:	6960      	ldr	r0, [r4, #20]
 8006a4e:	1d1d      	adds	r5, r3, #4
 8006a50:	600d      	str	r5, [r1, #0]
 8006a52:	0635      	lsls	r5, r6, #24
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	d501      	bpl.n	8006a5c <_printf_i+0x1cc>
 8006a58:	6018      	str	r0, [r3, #0]
 8006a5a:	e002      	b.n	8006a62 <_printf_i+0x1d2>
 8006a5c:	0671      	lsls	r1, r6, #25
 8006a5e:	d5fb      	bpl.n	8006a58 <_printf_i+0x1c8>
 8006a60:	8018      	strh	r0, [r3, #0]
 8006a62:	2300      	movs	r3, #0
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	4616      	mov	r6, r2
 8006a68:	e7ba      	b.n	80069e0 <_printf_i+0x150>
 8006a6a:	680b      	ldr	r3, [r1, #0]
 8006a6c:	1d1a      	adds	r2, r3, #4
 8006a6e:	600a      	str	r2, [r1, #0]
 8006a70:	681e      	ldr	r6, [r3, #0]
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	2100      	movs	r1, #0
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7f9 fbba 	bl	80001f0 <memchr>
 8006a7c:	b108      	cbz	r0, 8006a82 <_printf_i+0x1f2>
 8006a7e:	1b80      	subs	r0, r0, r6
 8006a80:	6060      	str	r0, [r4, #4]
 8006a82:	6863      	ldr	r3, [r4, #4]
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	2300      	movs	r3, #0
 8006a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a8c:	e7a8      	b.n	80069e0 <_printf_i+0x150>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	4632      	mov	r2, r6
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ab      	beq.n	80069f4 <_printf_i+0x164>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d413      	bmi.n	8006aca <_printf_i+0x23a>
 8006aa2:	68e0      	ldr	r0, [r4, #12]
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	bfb8      	it	lt
 8006aaa:	4618      	movlt	r0, r3
 8006aac:	e7a4      	b.n	80069f8 <_printf_i+0x168>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	47d0      	blx	sl
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d09b      	beq.n	80069f4 <_printf_i+0x164>
 8006abc:	3501      	adds	r5, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9903      	ldr	r1, [sp, #12]
 8006ac2:	1a5b      	subs	r3, r3, r1
 8006ac4:	42ab      	cmp	r3, r5
 8006ac6:	dcf2      	bgt.n	8006aae <_printf_i+0x21e>
 8006ac8:	e7eb      	b.n	8006aa2 <_printf_i+0x212>
 8006aca:	2500      	movs	r5, #0
 8006acc:	f104 0619 	add.w	r6, r4, #25
 8006ad0:	e7f5      	b.n	8006abe <_printf_i+0x22e>
 8006ad2:	bf00      	nop
 8006ad4:	08008051 	.word	0x08008051
 8006ad8:	08008062 	.word	0x08008062

08006adc <memmove>:
 8006adc:	4288      	cmp	r0, r1
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	eb01 0402 	add.w	r4, r1, r2
 8006ae4:	d902      	bls.n	8006aec <memmove+0x10>
 8006ae6:	4284      	cmp	r4, r0
 8006ae8:	4623      	mov	r3, r4
 8006aea:	d807      	bhi.n	8006afc <memmove+0x20>
 8006aec:	1e43      	subs	r3, r0, #1
 8006aee:	42a1      	cmp	r1, r4
 8006af0:	d008      	beq.n	8006b04 <memmove+0x28>
 8006af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006afa:	e7f8      	b.n	8006aee <memmove+0x12>
 8006afc:	4402      	add	r2, r0
 8006afe:	4601      	mov	r1, r0
 8006b00:	428a      	cmp	r2, r1
 8006b02:	d100      	bne.n	8006b06 <memmove+0x2a>
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b0e:	e7f7      	b.n	8006b00 <memmove+0x24>

08006b10 <_free_r>:
 8006b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d048      	beq.n	8006ba8 <_free_r+0x98>
 8006b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1a:	9001      	str	r0, [sp, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b22:	bfb8      	it	lt
 8006b24:	18e4      	addlt	r4, r4, r3
 8006b26:	f000 f8d3 	bl	8006cd0 <__malloc_lock>
 8006b2a:	4a20      	ldr	r2, [pc, #128]	; (8006bac <_free_r+0x9c>)
 8006b2c:	9801      	ldr	r0, [sp, #4]
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	4615      	mov	r5, r2
 8006b32:	b933      	cbnz	r3, 8006b42 <_free_r+0x32>
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	6014      	str	r4, [r2, #0]
 8006b38:	b003      	add	sp, #12
 8006b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3e:	f000 b8cd 	b.w	8006cdc <__malloc_unlock>
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	d90b      	bls.n	8006b5e <_free_r+0x4e>
 8006b46:	6821      	ldr	r1, [r4, #0]
 8006b48:	1862      	adds	r2, r4, r1
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	bf04      	itt	eq
 8006b4e:	681a      	ldreq	r2, [r3, #0]
 8006b50:	685b      	ldreq	r3, [r3, #4]
 8006b52:	6063      	str	r3, [r4, #4]
 8006b54:	bf04      	itt	eq
 8006b56:	1852      	addeq	r2, r2, r1
 8006b58:	6022      	streq	r2, [r4, #0]
 8006b5a:	602c      	str	r4, [r5, #0]
 8006b5c:	e7ec      	b.n	8006b38 <_free_r+0x28>
 8006b5e:	461a      	mov	r2, r3
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b10b      	cbz	r3, 8006b68 <_free_r+0x58>
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d9fa      	bls.n	8006b5e <_free_r+0x4e>
 8006b68:	6811      	ldr	r1, [r2, #0]
 8006b6a:	1855      	adds	r5, r2, r1
 8006b6c:	42a5      	cmp	r5, r4
 8006b6e:	d10b      	bne.n	8006b88 <_free_r+0x78>
 8006b70:	6824      	ldr	r4, [r4, #0]
 8006b72:	4421      	add	r1, r4
 8006b74:	1854      	adds	r4, r2, r1
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	d1dd      	bne.n	8006b38 <_free_r+0x28>
 8006b7c:	681c      	ldr	r4, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	6053      	str	r3, [r2, #4]
 8006b82:	4421      	add	r1, r4
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	e7d7      	b.n	8006b38 <_free_r+0x28>
 8006b88:	d902      	bls.n	8006b90 <_free_r+0x80>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	6003      	str	r3, [r0, #0]
 8006b8e:	e7d3      	b.n	8006b38 <_free_r+0x28>
 8006b90:	6825      	ldr	r5, [r4, #0]
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf04      	itt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	bf04      	itt	eq
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	6054      	str	r4, [r2, #4]
 8006ba6:	e7c7      	b.n	8006b38 <_free_r+0x28>
 8006ba8:	b003      	add	sp, #12
 8006baa:	bd30      	pop	{r4, r5, pc}
 8006bac:	20000130 	.word	0x20000130

08006bb0 <_malloc_r>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	1ccd      	adds	r5, r1, #3
 8006bb4:	f025 0503 	bic.w	r5, r5, #3
 8006bb8:	3508      	adds	r5, #8
 8006bba:	2d0c      	cmp	r5, #12
 8006bbc:	bf38      	it	cc
 8006bbe:	250c      	movcc	r5, #12
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	db01      	blt.n	8006bca <_malloc_r+0x1a>
 8006bc6:	42a9      	cmp	r1, r5
 8006bc8:	d903      	bls.n	8006bd2 <_malloc_r+0x22>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	2000      	movs	r0, #0
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd2:	f000 f87d 	bl	8006cd0 <__malloc_lock>
 8006bd6:	4921      	ldr	r1, [pc, #132]	; (8006c5c <_malloc_r+0xac>)
 8006bd8:	680a      	ldr	r2, [r1, #0]
 8006bda:	4614      	mov	r4, r2
 8006bdc:	b99c      	cbnz	r4, 8006c06 <_malloc_r+0x56>
 8006bde:	4f20      	ldr	r7, [pc, #128]	; (8006c60 <_malloc_r+0xb0>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	b923      	cbnz	r3, 8006bee <_malloc_r+0x3e>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f862 	bl	8006cb0 <_sbrk_r>
 8006bec:	6038      	str	r0, [r7, #0]
 8006bee:	4629      	mov	r1, r5
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f85d 	bl	8006cb0 <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d123      	bne.n	8006c42 <_malloc_r+0x92>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	6033      	str	r3, [r6, #0]
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f000 f86c 	bl	8006cdc <__malloc_unlock>
 8006c04:	e7e3      	b.n	8006bce <_malloc_r+0x1e>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	1b5b      	subs	r3, r3, r5
 8006c0a:	d417      	bmi.n	8006c3c <_malloc_r+0x8c>
 8006c0c:	2b0b      	cmp	r3, #11
 8006c0e:	d903      	bls.n	8006c18 <_malloc_r+0x68>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	441c      	add	r4, r3
 8006c14:	6025      	str	r5, [r4, #0]
 8006c16:	e004      	b.n	8006c22 <_malloc_r+0x72>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	42a2      	cmp	r2, r4
 8006c1c:	bf0c      	ite	eq
 8006c1e:	600b      	streq	r3, [r1, #0]
 8006c20:	6053      	strne	r3, [r2, #4]
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f85a 	bl	8006cdc <__malloc_unlock>
 8006c28:	f104 000b 	add.w	r0, r4, #11
 8006c2c:	1d23      	adds	r3, r4, #4
 8006c2e:	f020 0007 	bic.w	r0, r0, #7
 8006c32:	1ac2      	subs	r2, r0, r3
 8006c34:	d0cc      	beq.n	8006bd0 <_malloc_r+0x20>
 8006c36:	1a1b      	subs	r3, r3, r0
 8006c38:	50a3      	str	r3, [r4, r2]
 8006c3a:	e7c9      	b.n	8006bd0 <_malloc_r+0x20>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	6864      	ldr	r4, [r4, #4]
 8006c40:	e7cc      	b.n	8006bdc <_malloc_r+0x2c>
 8006c42:	1cc4      	adds	r4, r0, #3
 8006c44:	f024 0403 	bic.w	r4, r4, #3
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d0e3      	beq.n	8006c14 <_malloc_r+0x64>
 8006c4c:	1a21      	subs	r1, r4, r0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f000 f82e 	bl	8006cb0 <_sbrk_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d1dd      	bne.n	8006c14 <_malloc_r+0x64>
 8006c58:	e7cf      	b.n	8006bfa <_malloc_r+0x4a>
 8006c5a:	bf00      	nop
 8006c5c:	20000130 	.word	0x20000130
 8006c60:	20000134 	.word	0x20000134

08006c64 <_realloc_r>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	4607      	mov	r7, r0
 8006c68:	4614      	mov	r4, r2
 8006c6a:	460e      	mov	r6, r1
 8006c6c:	b921      	cbnz	r1, 8006c78 <_realloc_r+0x14>
 8006c6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c72:	4611      	mov	r1, r2
 8006c74:	f7ff bf9c 	b.w	8006bb0 <_malloc_r>
 8006c78:	b922      	cbnz	r2, 8006c84 <_realloc_r+0x20>
 8006c7a:	f7ff ff49 	bl	8006b10 <_free_r>
 8006c7e:	4625      	mov	r5, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c84:	f000 f830 	bl	8006ce8 <_malloc_usable_size_r>
 8006c88:	42a0      	cmp	r0, r4
 8006c8a:	d20f      	bcs.n	8006cac <_realloc_r+0x48>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4638      	mov	r0, r7
 8006c90:	f7ff ff8e 	bl	8006bb0 <_malloc_r>
 8006c94:	4605      	mov	r5, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0f2      	beq.n	8006c80 <_realloc_r+0x1c>
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4622      	mov	r2, r4
 8006c9e:	f7ff fbf7 	bl	8006490 <memcpy>
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ff33 	bl	8006b10 <_free_r>
 8006caa:	e7e9      	b.n	8006c80 <_realloc_r+0x1c>
 8006cac:	4635      	mov	r5, r6
 8006cae:	e7e7      	b.n	8006c80 <_realloc_r+0x1c>

08006cb0 <_sbrk_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4d06      	ldr	r5, [pc, #24]	; (8006ccc <_sbrk_r+0x1c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	f7fb fb9e 	bl	80023fc <_sbrk>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_sbrk_r+0x1a>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_sbrk_r+0x1a>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000314 	.word	0x20000314

08006cd0 <__malloc_lock>:
 8006cd0:	4801      	ldr	r0, [pc, #4]	; (8006cd8 <__malloc_lock+0x8>)
 8006cd2:	f000 b811 	b.w	8006cf8 <__retarget_lock_acquire_recursive>
 8006cd6:	bf00      	nop
 8006cd8:	2000031c 	.word	0x2000031c

08006cdc <__malloc_unlock>:
 8006cdc:	4801      	ldr	r0, [pc, #4]	; (8006ce4 <__malloc_unlock+0x8>)
 8006cde:	f000 b80c 	b.w	8006cfa <__retarget_lock_release_recursive>
 8006ce2:	bf00      	nop
 8006ce4:	2000031c 	.word	0x2000031c

08006ce8 <_malloc_usable_size_r>:
 8006ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cec:	1f18      	subs	r0, r3, #4
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfbc      	itt	lt
 8006cf2:	580b      	ldrlt	r3, [r1, r0]
 8006cf4:	18c0      	addlt	r0, r0, r3
 8006cf6:	4770      	bx	lr

08006cf8 <__retarget_lock_acquire_recursive>:
 8006cf8:	4770      	bx	lr

08006cfa <__retarget_lock_release_recursive>:
 8006cfa:	4770      	bx	lr
 8006cfc:	0000      	movs	r0, r0
	...

08006d00 <sin>:
 8006d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d02:	ec53 2b10 	vmov	r2, r3, d0
 8006d06:	4826      	ldr	r0, [pc, #152]	; (8006da0 <sin+0xa0>)
 8006d08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006d0c:	4281      	cmp	r1, r0
 8006d0e:	dc07      	bgt.n	8006d20 <sin+0x20>
 8006d10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006d98 <sin+0x98>
 8006d14:	2000      	movs	r0, #0
 8006d16:	f000 fe5b 	bl	80079d0 <__kernel_sin>
 8006d1a:	ec51 0b10 	vmov	r0, r1, d0
 8006d1e:	e007      	b.n	8006d30 <sin+0x30>
 8006d20:	4820      	ldr	r0, [pc, #128]	; (8006da4 <sin+0xa4>)
 8006d22:	4281      	cmp	r1, r0
 8006d24:	dd09      	ble.n	8006d3a <sin+0x3a>
 8006d26:	ee10 0a10 	vmov	r0, s0
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f7f9 fab4 	bl	8000298 <__aeabi_dsub>
 8006d30:	ec41 0b10 	vmov	d0, r0, r1
 8006d34:	b005      	add	sp, #20
 8006d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d3a:	4668      	mov	r0, sp
 8006d3c:	f000 f834 	bl	8006da8 <__ieee754_rem_pio2>
 8006d40:	f000 0003 	and.w	r0, r0, #3
 8006d44:	2801      	cmp	r0, #1
 8006d46:	d008      	beq.n	8006d5a <sin+0x5a>
 8006d48:	2802      	cmp	r0, #2
 8006d4a:	d00d      	beq.n	8006d68 <sin+0x68>
 8006d4c:	b9d0      	cbnz	r0, 8006d84 <sin+0x84>
 8006d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d52:	ed9d 0b00 	vldr	d0, [sp]
 8006d56:	2001      	movs	r0, #1
 8006d58:	e7dd      	b.n	8006d16 <sin+0x16>
 8006d5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d5e:	ed9d 0b00 	vldr	d0, [sp]
 8006d62:	f000 fa2d 	bl	80071c0 <__kernel_cos>
 8006d66:	e7d8      	b.n	8006d1a <sin+0x1a>
 8006d68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d6c:	ed9d 0b00 	vldr	d0, [sp]
 8006d70:	2001      	movs	r0, #1
 8006d72:	f000 fe2d 	bl	80079d0 <__kernel_sin>
 8006d76:	ec53 2b10 	vmov	r2, r3, d0
 8006d7a:	ee10 0a10 	vmov	r0, s0
 8006d7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d82:	e7d5      	b.n	8006d30 <sin+0x30>
 8006d84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d88:	ed9d 0b00 	vldr	d0, [sp]
 8006d8c:	f000 fa18 	bl	80071c0 <__kernel_cos>
 8006d90:	e7f1      	b.n	8006d76 <sin+0x76>
 8006d92:	bf00      	nop
 8006d94:	f3af 8000 	nop.w
	...
 8006da0:	3fe921fb 	.word	0x3fe921fb
 8006da4:	7fefffff 	.word	0x7fefffff

08006da8 <__ieee754_rem_pio2>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	ed2d 8b02 	vpush	{d8}
 8006db0:	ec55 4b10 	vmov	r4, r5, d0
 8006db4:	4bca      	ldr	r3, [pc, #808]	; (80070e0 <__ieee754_rem_pio2+0x338>)
 8006db6:	b08b      	sub	sp, #44	; 0x2c
 8006db8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006dbc:	4598      	cmp	r8, r3
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	9502      	str	r5, [sp, #8]
 8006dc2:	dc08      	bgt.n	8006dd6 <__ieee754_rem_pio2+0x2e>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	ed80 0b00 	vstr	d0, [r0]
 8006dcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006dd0:	f04f 0b00 	mov.w	fp, #0
 8006dd4:	e028      	b.n	8006e28 <__ieee754_rem_pio2+0x80>
 8006dd6:	4bc3      	ldr	r3, [pc, #780]	; (80070e4 <__ieee754_rem_pio2+0x33c>)
 8006dd8:	4598      	cmp	r8, r3
 8006dda:	dc78      	bgt.n	8006ece <__ieee754_rem_pio2+0x126>
 8006ddc:	9b02      	ldr	r3, [sp, #8]
 8006dde:	4ec2      	ldr	r6, [pc, #776]	; (80070e8 <__ieee754_rem_pio2+0x340>)
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	ee10 0a10 	vmov	r0, s0
 8006de6:	a3b0      	add	r3, pc, #704	; (adr r3, 80070a8 <__ieee754_rem_pio2+0x300>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	4629      	mov	r1, r5
 8006dee:	dd39      	ble.n	8006e64 <__ieee754_rem_pio2+0xbc>
 8006df0:	f7f9 fa52 	bl	8000298 <__aeabi_dsub>
 8006df4:	45b0      	cmp	r8, r6
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	d01b      	beq.n	8006e34 <__ieee754_rem_pio2+0x8c>
 8006dfc:	a3ac      	add	r3, pc, #688	; (adr r3, 80070b0 <__ieee754_rem_pio2+0x308>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	f7f9 fa49 	bl	8000298 <__aeabi_dsub>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006e0e:	4620      	mov	r0, r4
 8006e10:	4629      	mov	r1, r5
 8006e12:	f7f9 fa41 	bl	8000298 <__aeabi_dsub>
 8006e16:	a3a6      	add	r3, pc, #664	; (adr r3, 80070b0 <__ieee754_rem_pio2+0x308>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f7f9 fa3c 	bl	8000298 <__aeabi_dsub>
 8006e20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e24:	f04f 0b01 	mov.w	fp, #1
 8006e28:	4658      	mov	r0, fp
 8006e2a:	b00b      	add	sp, #44	; 0x2c
 8006e2c:	ecbd 8b02 	vpop	{d8}
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e34:	a3a0      	add	r3, pc, #640	; (adr r3, 80070b8 <__ieee754_rem_pio2+0x310>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f7f9 fa2d 	bl	8000298 <__aeabi_dsub>
 8006e3e:	a3a0      	add	r3, pc, #640	; (adr r3, 80070c0 <__ieee754_rem_pio2+0x318>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4604      	mov	r4, r0
 8006e46:	460d      	mov	r5, r1
 8006e48:	f7f9 fa26 	bl	8000298 <__aeabi_dsub>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	e9ca 2300 	strd	r2, r3, [sl]
 8006e54:	4620      	mov	r0, r4
 8006e56:	4629      	mov	r1, r5
 8006e58:	f7f9 fa1e 	bl	8000298 <__aeabi_dsub>
 8006e5c:	a398      	add	r3, pc, #608	; (adr r3, 80070c0 <__ieee754_rem_pio2+0x318>)
 8006e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e62:	e7db      	b.n	8006e1c <__ieee754_rem_pio2+0x74>
 8006e64:	f7f9 fa1a 	bl	800029c <__adddf3>
 8006e68:	45b0      	cmp	r8, r6
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	460d      	mov	r5, r1
 8006e6e:	d016      	beq.n	8006e9e <__ieee754_rem_pio2+0xf6>
 8006e70:	a38f      	add	r3, pc, #572	; (adr r3, 80070b0 <__ieee754_rem_pio2+0x308>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fa11 	bl	800029c <__adddf3>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	e9ca 2300 	strd	r2, r3, [sl]
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 fa07 	bl	8000298 <__aeabi_dsub>
 8006e8a:	a389      	add	r3, pc, #548	; (adr r3, 80070b0 <__ieee754_rem_pio2+0x308>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 fa04 	bl	800029c <__adddf3>
 8006e94:	f04f 3bff 	mov.w	fp, #4294967295
 8006e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e9c:	e7c4      	b.n	8006e28 <__ieee754_rem_pio2+0x80>
 8006e9e:	a386      	add	r3, pc, #536	; (adr r3, 80070b8 <__ieee754_rem_pio2+0x310>)
 8006ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea4:	f7f9 f9fa 	bl	800029c <__adddf3>
 8006ea8:	a385      	add	r3, pc, #532	; (adr r3, 80070c0 <__ieee754_rem_pio2+0x318>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	4604      	mov	r4, r0
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	f7f9 f9f3 	bl	800029c <__adddf3>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	e9ca 2300 	strd	r2, r3, [sl]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 f9e9 	bl	8000298 <__aeabi_dsub>
 8006ec6:	a37e      	add	r3, pc, #504	; (adr r3, 80070c0 <__ieee754_rem_pio2+0x318>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	e7e0      	b.n	8006e90 <__ieee754_rem_pio2+0xe8>
 8006ece:	4b87      	ldr	r3, [pc, #540]	; (80070ec <__ieee754_rem_pio2+0x344>)
 8006ed0:	4598      	cmp	r8, r3
 8006ed2:	f300 80d9 	bgt.w	8007088 <__ieee754_rem_pio2+0x2e0>
 8006ed6:	f000 fe39 	bl	8007b4c <fabs>
 8006eda:	ec55 4b10 	vmov	r4, r5, d0
 8006ede:	ee10 0a10 	vmov	r0, s0
 8006ee2:	a379      	add	r3, pc, #484	; (adr r3, 80070c8 <__ieee754_rem_pio2+0x320>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fb8d 	bl	8000608 <__aeabi_dmul>
 8006eee:	4b80      	ldr	r3, [pc, #512]	; (80070f0 <__ieee754_rem_pio2+0x348>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f7f9 f9d3 	bl	800029c <__adddf3>
 8006ef6:	f7f9 fe21 	bl	8000b3c <__aeabi_d2iz>
 8006efa:	4683      	mov	fp, r0
 8006efc:	f7f9 fb1a 	bl	8000534 <__aeabi_i2d>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	ec43 2b18 	vmov	d8, r2, r3
 8006f08:	a367      	add	r3, pc, #412	; (adr r3, 80070a8 <__ieee754_rem_pio2+0x300>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fb7b 	bl	8000608 <__aeabi_dmul>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 f9bd 	bl	8000298 <__aeabi_dsub>
 8006f1e:	a364      	add	r3, pc, #400	; (adr r3, 80070b0 <__ieee754_rem_pio2+0x308>)
 8006f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f24:	4606      	mov	r6, r0
 8006f26:	460f      	mov	r7, r1
 8006f28:	ec51 0b18 	vmov	r0, r1, d8
 8006f2c:	f7f9 fb6c 	bl	8000608 <__aeabi_dmul>
 8006f30:	f1bb 0f1f 	cmp.w	fp, #31
 8006f34:	4604      	mov	r4, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	dc0d      	bgt.n	8006f56 <__ieee754_rem_pio2+0x1ae>
 8006f3a:	4b6e      	ldr	r3, [pc, #440]	; (80070f4 <__ieee754_rem_pio2+0x34c>)
 8006f3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f44:	4543      	cmp	r3, r8
 8006f46:	d006      	beq.n	8006f56 <__ieee754_rem_pio2+0x1ae>
 8006f48:	4622      	mov	r2, r4
 8006f4a:	462b      	mov	r3, r5
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	4639      	mov	r1, r7
 8006f50:	f7f9 f9a2 	bl	8000298 <__aeabi_dsub>
 8006f54:	e00f      	b.n	8006f76 <__ieee754_rem_pio2+0x1ce>
 8006f56:	462b      	mov	r3, r5
 8006f58:	4622      	mov	r2, r4
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	f7f9 f99b 	bl	8000298 <__aeabi_dsub>
 8006f62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006f66:	9303      	str	r3, [sp, #12]
 8006f68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006f70:	f1b8 0f10 	cmp.w	r8, #16
 8006f74:	dc02      	bgt.n	8006f7c <__ieee754_rem_pio2+0x1d4>
 8006f76:	e9ca 0100 	strd	r0, r1, [sl]
 8006f7a:	e039      	b.n	8006ff0 <__ieee754_rem_pio2+0x248>
 8006f7c:	a34e      	add	r3, pc, #312	; (adr r3, 80070b8 <__ieee754_rem_pio2+0x310>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	ec51 0b18 	vmov	r0, r1, d8
 8006f86:	f7f9 fb3f 	bl	8000608 <__aeabi_dmul>
 8006f8a:	4604      	mov	r4, r0
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	f7f9 f97f 	bl	8000298 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4680      	mov	r8, r0
 8006fa0:	4689      	mov	r9, r1
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	4639      	mov	r1, r7
 8006fa6:	f7f9 f977 	bl	8000298 <__aeabi_dsub>
 8006faa:	4622      	mov	r2, r4
 8006fac:	462b      	mov	r3, r5
 8006fae:	f7f9 f973 	bl	8000298 <__aeabi_dsub>
 8006fb2:	a343      	add	r3, pc, #268	; (adr r3, 80070c0 <__ieee754_rem_pio2+0x318>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	4604      	mov	r4, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	ec51 0b18 	vmov	r0, r1, d8
 8006fc0:	f7f9 fb22 	bl	8000608 <__aeabi_dmul>
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	f7f9 f966 	bl	8000298 <__aeabi_dsub>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 f95e 	bl	8000298 <__aeabi_dsub>
 8006fdc:	9a03      	ldr	r2, [sp, #12]
 8006fde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b31      	cmp	r3, #49	; 0x31
 8006fe6:	dc24      	bgt.n	8007032 <__ieee754_rem_pio2+0x28a>
 8006fe8:	e9ca 0100 	strd	r0, r1, [sl]
 8006fec:	4646      	mov	r6, r8
 8006fee:	464f      	mov	r7, r9
 8006ff0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 f94c 	bl	8000298 <__aeabi_dsub>
 8007000:	462b      	mov	r3, r5
 8007002:	4622      	mov	r2, r4
 8007004:	f7f9 f948 	bl	8000298 <__aeabi_dsub>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007010:	f6bf af0a 	bge.w	8006e28 <__ieee754_rem_pio2+0x80>
 8007014:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007018:	f8ca 3004 	str.w	r3, [sl, #4]
 800701c:	f8ca 8000 	str.w	r8, [sl]
 8007020:	f8ca 0008 	str.w	r0, [sl, #8]
 8007024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007028:	f8ca 300c 	str.w	r3, [sl, #12]
 800702c:	f1cb 0b00 	rsb	fp, fp, #0
 8007030:	e6fa      	b.n	8006e28 <__ieee754_rem_pio2+0x80>
 8007032:	a327      	add	r3, pc, #156	; (adr r3, 80070d0 <__ieee754_rem_pio2+0x328>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	ec51 0b18 	vmov	r0, r1, d8
 800703c:	f7f9 fae4 	bl	8000608 <__aeabi_dmul>
 8007040:	4604      	mov	r4, r0
 8007042:	460d      	mov	r5, r1
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4640      	mov	r0, r8
 800704a:	4649      	mov	r1, r9
 800704c:	f7f9 f924 	bl	8000298 <__aeabi_dsub>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4606      	mov	r6, r0
 8007056:	460f      	mov	r7, r1
 8007058:	4640      	mov	r0, r8
 800705a:	4649      	mov	r1, r9
 800705c:	f7f9 f91c 	bl	8000298 <__aeabi_dsub>
 8007060:	4622      	mov	r2, r4
 8007062:	462b      	mov	r3, r5
 8007064:	f7f9 f918 	bl	8000298 <__aeabi_dsub>
 8007068:	a31b      	add	r3, pc, #108	; (adr r3, 80070d8 <__ieee754_rem_pio2+0x330>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	4604      	mov	r4, r0
 8007070:	460d      	mov	r5, r1
 8007072:	ec51 0b18 	vmov	r0, r1, d8
 8007076:	f7f9 fac7 	bl	8000608 <__aeabi_dmul>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	f7f9 f90b 	bl	8000298 <__aeabi_dsub>
 8007082:	4604      	mov	r4, r0
 8007084:	460d      	mov	r5, r1
 8007086:	e75f      	b.n	8006f48 <__ieee754_rem_pio2+0x1a0>
 8007088:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <__ieee754_rem_pio2+0x350>)
 800708a:	4598      	cmp	r8, r3
 800708c:	dd36      	ble.n	80070fc <__ieee754_rem_pio2+0x354>
 800708e:	ee10 2a10 	vmov	r2, s0
 8007092:	462b      	mov	r3, r5
 8007094:	4620      	mov	r0, r4
 8007096:	4629      	mov	r1, r5
 8007098:	f7f9 f8fe 	bl	8000298 <__aeabi_dsub>
 800709c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070a0:	e9ca 0100 	strd	r0, r1, [sl]
 80070a4:	e694      	b.n	8006dd0 <__ieee754_rem_pio2+0x28>
 80070a6:	bf00      	nop
 80070a8:	54400000 	.word	0x54400000
 80070ac:	3ff921fb 	.word	0x3ff921fb
 80070b0:	1a626331 	.word	0x1a626331
 80070b4:	3dd0b461 	.word	0x3dd0b461
 80070b8:	1a600000 	.word	0x1a600000
 80070bc:	3dd0b461 	.word	0x3dd0b461
 80070c0:	2e037073 	.word	0x2e037073
 80070c4:	3ba3198a 	.word	0x3ba3198a
 80070c8:	6dc9c883 	.word	0x6dc9c883
 80070cc:	3fe45f30 	.word	0x3fe45f30
 80070d0:	2e000000 	.word	0x2e000000
 80070d4:	3ba3198a 	.word	0x3ba3198a
 80070d8:	252049c1 	.word	0x252049c1
 80070dc:	397b839a 	.word	0x397b839a
 80070e0:	3fe921fb 	.word	0x3fe921fb
 80070e4:	4002d97b 	.word	0x4002d97b
 80070e8:	3ff921fb 	.word	0x3ff921fb
 80070ec:	413921fb 	.word	0x413921fb
 80070f0:	3fe00000 	.word	0x3fe00000
 80070f4:	08008074 	.word	0x08008074
 80070f8:	7fefffff 	.word	0x7fefffff
 80070fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007100:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007104:	ee10 0a10 	vmov	r0, s0
 8007108:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800710c:	ee10 6a10 	vmov	r6, s0
 8007110:	460f      	mov	r7, r1
 8007112:	f7f9 fd13 	bl	8000b3c <__aeabi_d2iz>
 8007116:	f7f9 fa0d 	bl	8000534 <__aeabi_i2d>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4630      	mov	r0, r6
 8007120:	4639      	mov	r1, r7
 8007122:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	4b22      	ldr	r3, [pc, #136]	; (80071b4 <__ieee754_rem_pio2+0x40c>)
 800712c:	2200      	movs	r2, #0
 800712e:	f7f9 fa6b 	bl	8000608 <__aeabi_dmul>
 8007132:	460f      	mov	r7, r1
 8007134:	4606      	mov	r6, r0
 8007136:	f7f9 fd01 	bl	8000b3c <__aeabi_d2iz>
 800713a:	f7f9 f9fb 	bl	8000534 <__aeabi_i2d>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800714a:	f7f9 f8a5 	bl	8000298 <__aeabi_dsub>
 800714e:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <__ieee754_rem_pio2+0x40c>)
 8007150:	2200      	movs	r2, #0
 8007152:	f7f9 fa59 	bl	8000608 <__aeabi_dmul>
 8007156:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800715a:	ad04      	add	r5, sp, #16
 800715c:	f04f 0803 	mov.w	r8, #3
 8007160:	46a9      	mov	r9, r5
 8007162:	2600      	movs	r6, #0
 8007164:	2700      	movs	r7, #0
 8007166:	4632      	mov	r2, r6
 8007168:	463b      	mov	r3, r7
 800716a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800716e:	46c3      	mov	fp, r8
 8007170:	3d08      	subs	r5, #8
 8007172:	f108 38ff 	add.w	r8, r8, #4294967295
 8007176:	f7f9 fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800717a:	2800      	cmp	r0, #0
 800717c:	d1f3      	bne.n	8007166 <__ieee754_rem_pio2+0x3be>
 800717e:	4b0e      	ldr	r3, [pc, #56]	; (80071b8 <__ieee754_rem_pio2+0x410>)
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	2302      	movs	r3, #2
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	4622      	mov	r2, r4
 8007188:	465b      	mov	r3, fp
 800718a:	4651      	mov	r1, sl
 800718c:	4648      	mov	r0, r9
 800718e:	f000 f8df 	bl	8007350 <__kernel_rem_pio2>
 8007192:	9b02      	ldr	r3, [sp, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	4683      	mov	fp, r0
 8007198:	f6bf ae46 	bge.w	8006e28 <__ieee754_rem_pio2+0x80>
 800719c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80071a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80071a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80071ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80071b0:	e73a      	b.n	8007028 <__ieee754_rem_pio2+0x280>
 80071b2:	bf00      	nop
 80071b4:	41700000 	.word	0x41700000
 80071b8:	080080f4 	.word	0x080080f4
 80071bc:	00000000 	.word	0x00000000

080071c0 <__kernel_cos>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	ec57 6b10 	vmov	r6, r7, d0
 80071c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80071cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80071d0:	ed8d 1b00 	vstr	d1, [sp]
 80071d4:	da07      	bge.n	80071e6 <__kernel_cos+0x26>
 80071d6:	ee10 0a10 	vmov	r0, s0
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 fcae 	bl	8000b3c <__aeabi_d2iz>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f000 8088 	beq.w	80072f6 <__kernel_cos+0x136>
 80071e6:	4632      	mov	r2, r6
 80071e8:	463b      	mov	r3, r7
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f9 fa0b 	bl	8000608 <__aeabi_dmul>
 80071f2:	4b51      	ldr	r3, [pc, #324]	; (8007338 <__kernel_cos+0x178>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	4604      	mov	r4, r0
 80071f8:	460d      	mov	r5, r1
 80071fa:	f7f9 fa05 	bl	8000608 <__aeabi_dmul>
 80071fe:	a340      	add	r3, pc, #256	; (adr r3, 8007300 <__kernel_cos+0x140>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	4682      	mov	sl, r0
 8007206:	468b      	mov	fp, r1
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f9 f9fc 	bl	8000608 <__aeabi_dmul>
 8007210:	a33d      	add	r3, pc, #244	; (adr r3, 8007308 <__kernel_cos+0x148>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f841 	bl	800029c <__adddf3>
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	f7f9 f9f3 	bl	8000608 <__aeabi_dmul>
 8007222:	a33b      	add	r3, pc, #236	; (adr r3, 8007310 <__kernel_cos+0x150>)
 8007224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007228:	f7f9 f836 	bl	8000298 <__aeabi_dsub>
 800722c:	4622      	mov	r2, r4
 800722e:	462b      	mov	r3, r5
 8007230:	f7f9 f9ea 	bl	8000608 <__aeabi_dmul>
 8007234:	a338      	add	r3, pc, #224	; (adr r3, 8007318 <__kernel_cos+0x158>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f82f 	bl	800029c <__adddf3>
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	f7f9 f9e1 	bl	8000608 <__aeabi_dmul>
 8007246:	a336      	add	r3, pc, #216	; (adr r3, 8007320 <__kernel_cos+0x160>)
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 f824 	bl	8000298 <__aeabi_dsub>
 8007250:	4622      	mov	r2, r4
 8007252:	462b      	mov	r3, r5
 8007254:	f7f9 f9d8 	bl	8000608 <__aeabi_dmul>
 8007258:	a333      	add	r3, pc, #204	; (adr r3, 8007328 <__kernel_cos+0x168>)
 800725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725e:	f7f9 f81d 	bl	800029c <__adddf3>
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	f7f9 f9cf 	bl	8000608 <__aeabi_dmul>
 800726a:	4622      	mov	r2, r4
 800726c:	462b      	mov	r3, r5
 800726e:	f7f9 f9cb 	bl	8000608 <__aeabi_dmul>
 8007272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	4630      	mov	r0, r6
 800727c:	4639      	mov	r1, r7
 800727e:	f7f9 f9c3 	bl	8000608 <__aeabi_dmul>
 8007282:	460b      	mov	r3, r1
 8007284:	4602      	mov	r2, r0
 8007286:	4629      	mov	r1, r5
 8007288:	4620      	mov	r0, r4
 800728a:	f7f9 f805 	bl	8000298 <__aeabi_dsub>
 800728e:	4b2b      	ldr	r3, [pc, #172]	; (800733c <__kernel_cos+0x17c>)
 8007290:	4598      	cmp	r8, r3
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	dc10      	bgt.n	80072ba <__kernel_cos+0xfa>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4650      	mov	r0, sl
 800729e:	4659      	mov	r1, fp
 80072a0:	f7f8 fffa 	bl	8000298 <__aeabi_dsub>
 80072a4:	460b      	mov	r3, r1
 80072a6:	4926      	ldr	r1, [pc, #152]	; (8007340 <__kernel_cos+0x180>)
 80072a8:	4602      	mov	r2, r0
 80072aa:	2000      	movs	r0, #0
 80072ac:	f7f8 fff4 	bl	8000298 <__aeabi_dsub>
 80072b0:	ec41 0b10 	vmov	d0, r0, r1
 80072b4:	b003      	add	sp, #12
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	4b22      	ldr	r3, [pc, #136]	; (8007344 <__kernel_cos+0x184>)
 80072bc:	4920      	ldr	r1, [pc, #128]	; (8007340 <__kernel_cos+0x180>)
 80072be:	4598      	cmp	r8, r3
 80072c0:	bfcc      	ite	gt
 80072c2:	4d21      	ldrgt	r5, [pc, #132]	; (8007348 <__kernel_cos+0x188>)
 80072c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80072c8:	2400      	movs	r4, #0
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7f8 ffe2 	bl	8000298 <__aeabi_dsub>
 80072d4:	4622      	mov	r2, r4
 80072d6:	4680      	mov	r8, r0
 80072d8:	4689      	mov	r9, r1
 80072da:	462b      	mov	r3, r5
 80072dc:	4650      	mov	r0, sl
 80072de:	4659      	mov	r1, fp
 80072e0:	f7f8 ffda 	bl	8000298 <__aeabi_dsub>
 80072e4:	4632      	mov	r2, r6
 80072e6:	463b      	mov	r3, r7
 80072e8:	f7f8 ffd6 	bl	8000298 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4640      	mov	r0, r8
 80072f2:	4649      	mov	r1, r9
 80072f4:	e7da      	b.n	80072ac <__kernel_cos+0xec>
 80072f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007330 <__kernel_cos+0x170>
 80072fa:	e7db      	b.n	80072b4 <__kernel_cos+0xf4>
 80072fc:	f3af 8000 	nop.w
 8007300:	be8838d4 	.word	0xbe8838d4
 8007304:	bda8fae9 	.word	0xbda8fae9
 8007308:	bdb4b1c4 	.word	0xbdb4b1c4
 800730c:	3e21ee9e 	.word	0x3e21ee9e
 8007310:	809c52ad 	.word	0x809c52ad
 8007314:	3e927e4f 	.word	0x3e927e4f
 8007318:	19cb1590 	.word	0x19cb1590
 800731c:	3efa01a0 	.word	0x3efa01a0
 8007320:	16c15177 	.word	0x16c15177
 8007324:	3f56c16c 	.word	0x3f56c16c
 8007328:	5555554c 	.word	0x5555554c
 800732c:	3fa55555 	.word	0x3fa55555
 8007330:	00000000 	.word	0x00000000
 8007334:	3ff00000 	.word	0x3ff00000
 8007338:	3fe00000 	.word	0x3fe00000
 800733c:	3fd33332 	.word	0x3fd33332
 8007340:	3ff00000 	.word	0x3ff00000
 8007344:	3fe90000 	.word	0x3fe90000
 8007348:	3fd20000 	.word	0x3fd20000
 800734c:	00000000 	.word	0x00000000

08007350 <__kernel_rem_pio2>:
 8007350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007354:	ed2d 8b02 	vpush	{d8}
 8007358:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800735c:	f112 0f14 	cmn.w	r2, #20
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	9101      	str	r1, [sp, #4]
 8007364:	4bc6      	ldr	r3, [pc, #792]	; (8007680 <__kernel_rem_pio2+0x330>)
 8007366:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007368:	9009      	str	r0, [sp, #36]	; 0x24
 800736a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	9b08      	ldr	r3, [sp, #32]
 8007372:	f103 33ff 	add.w	r3, r3, #4294967295
 8007376:	bfa8      	it	ge
 8007378:	1ed4      	subge	r4, r2, #3
 800737a:	9306      	str	r3, [sp, #24]
 800737c:	bfb2      	itee	lt
 800737e:	2400      	movlt	r4, #0
 8007380:	2318      	movge	r3, #24
 8007382:	fb94 f4f3 	sdivge	r4, r4, r3
 8007386:	f06f 0317 	mvn.w	r3, #23
 800738a:	fb04 3303 	mla	r3, r4, r3, r3
 800738e:	eb03 0a02 	add.w	sl, r3, r2
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	9a06      	ldr	r2, [sp, #24]
 8007396:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007670 <__kernel_rem_pio2+0x320>
 800739a:	eb03 0802 	add.w	r8, r3, r2
 800739e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073a0:	1aa7      	subs	r7, r4, r2
 80073a2:	ae20      	add	r6, sp, #128	; 0x80
 80073a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80073a8:	2500      	movs	r5, #0
 80073aa:	4545      	cmp	r5, r8
 80073ac:	dd18      	ble.n	80073e0 <__kernel_rem_pio2+0x90>
 80073ae:	9b08      	ldr	r3, [sp, #32]
 80073b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80073b4:	aa20      	add	r2, sp, #128	; 0x80
 80073b6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007670 <__kernel_rem_pio2+0x320>
 80073ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80073be:	f1c3 0301 	rsb	r3, r3, #1
 80073c2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80073c6:	9307      	str	r3, [sp, #28]
 80073c8:	9b07      	ldr	r3, [sp, #28]
 80073ca:	9a04      	ldr	r2, [sp, #16]
 80073cc:	4443      	add	r3, r8
 80073ce:	429a      	cmp	r2, r3
 80073d0:	db2f      	blt.n	8007432 <__kernel_rem_pio2+0xe2>
 80073d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80073d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80073da:	462f      	mov	r7, r5
 80073dc:	2600      	movs	r6, #0
 80073de:	e01b      	b.n	8007418 <__kernel_rem_pio2+0xc8>
 80073e0:	42ef      	cmn	r7, r5
 80073e2:	d407      	bmi.n	80073f4 <__kernel_rem_pio2+0xa4>
 80073e4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80073e8:	f7f9 f8a4 	bl	8000534 <__aeabi_i2d>
 80073ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80073f0:	3501      	adds	r5, #1
 80073f2:	e7da      	b.n	80073aa <__kernel_rem_pio2+0x5a>
 80073f4:	ec51 0b18 	vmov	r0, r1, d8
 80073f8:	e7f8      	b.n	80073ec <__kernel_rem_pio2+0x9c>
 80073fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007402:	f7f9 f901 	bl	8000608 <__aeabi_dmul>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800740e:	f7f8 ff45 	bl	800029c <__adddf3>
 8007412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007416:	3601      	adds	r6, #1
 8007418:	9b06      	ldr	r3, [sp, #24]
 800741a:	429e      	cmp	r6, r3
 800741c:	f1a7 0708 	sub.w	r7, r7, #8
 8007420:	ddeb      	ble.n	80073fa <__kernel_rem_pio2+0xaa>
 8007422:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007426:	3508      	adds	r5, #8
 8007428:	ecab 7b02 	vstmia	fp!, {d7}
 800742c:	f108 0801 	add.w	r8, r8, #1
 8007430:	e7ca      	b.n	80073c8 <__kernel_rem_pio2+0x78>
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	aa0c      	add	r2, sp, #48	; 0x30
 8007436:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800743a:	930b      	str	r3, [sp, #44]	; 0x2c
 800743c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800743e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007442:	9c04      	ldr	r4, [sp, #16]
 8007444:	930a      	str	r3, [sp, #40]	; 0x28
 8007446:	ab98      	add	r3, sp, #608	; 0x260
 8007448:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800744c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007450:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007454:	f8cd b008 	str.w	fp, [sp, #8]
 8007458:	4625      	mov	r5, r4
 800745a:	2d00      	cmp	r5, #0
 800745c:	dc78      	bgt.n	8007550 <__kernel_rem_pio2+0x200>
 800745e:	ec47 6b10 	vmov	d0, r6, r7
 8007462:	4650      	mov	r0, sl
 8007464:	f000 fbfc 	bl	8007c60 <scalbn>
 8007468:	ec57 6b10 	vmov	r6, r7, d0
 800746c:	2200      	movs	r2, #0
 800746e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007472:	ee10 0a10 	vmov	r0, s0
 8007476:	4639      	mov	r1, r7
 8007478:	f7f9 f8c6 	bl	8000608 <__aeabi_dmul>
 800747c:	ec41 0b10 	vmov	d0, r0, r1
 8007480:	f000 fb6e 	bl	8007b60 <floor>
 8007484:	4b7f      	ldr	r3, [pc, #508]	; (8007684 <__kernel_rem_pio2+0x334>)
 8007486:	ec51 0b10 	vmov	r0, r1, d0
 800748a:	2200      	movs	r2, #0
 800748c:	f7f9 f8bc 	bl	8000608 <__aeabi_dmul>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f8 fefe 	bl	8000298 <__aeabi_dsub>
 800749c:	460f      	mov	r7, r1
 800749e:	4606      	mov	r6, r0
 80074a0:	f7f9 fb4c 	bl	8000b3c <__aeabi_d2iz>
 80074a4:	9007      	str	r0, [sp, #28]
 80074a6:	f7f9 f845 	bl	8000534 <__aeabi_i2d>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4630      	mov	r0, r6
 80074b0:	4639      	mov	r1, r7
 80074b2:	f7f8 fef1 	bl	8000298 <__aeabi_dsub>
 80074b6:	f1ba 0f00 	cmp.w	sl, #0
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	dd70      	ble.n	80075a2 <__kernel_rem_pio2+0x252>
 80074c0:	1e62      	subs	r2, r4, #1
 80074c2:	ab0c      	add	r3, sp, #48	; 0x30
 80074c4:	9d07      	ldr	r5, [sp, #28]
 80074c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80074ca:	f1ca 0118 	rsb	r1, sl, #24
 80074ce:	fa40 f301 	asr.w	r3, r0, r1
 80074d2:	441d      	add	r5, r3
 80074d4:	408b      	lsls	r3, r1
 80074d6:	1ac0      	subs	r0, r0, r3
 80074d8:	ab0c      	add	r3, sp, #48	; 0x30
 80074da:	9507      	str	r5, [sp, #28]
 80074dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80074e0:	f1ca 0317 	rsb	r3, sl, #23
 80074e4:	fa40 f303 	asr.w	r3, r0, r3
 80074e8:	9302      	str	r3, [sp, #8]
 80074ea:	9b02      	ldr	r3, [sp, #8]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dd66      	ble.n	80075be <__kernel_rem_pio2+0x26e>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	2200      	movs	r2, #0
 80074f4:	3301      	adds	r3, #1
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	4615      	mov	r5, r2
 80074fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80074fe:	4294      	cmp	r4, r2
 8007500:	f300 8099 	bgt.w	8007636 <__kernel_rem_pio2+0x2e6>
 8007504:	f1ba 0f00 	cmp.w	sl, #0
 8007508:	dd07      	ble.n	800751a <__kernel_rem_pio2+0x1ca>
 800750a:	f1ba 0f01 	cmp.w	sl, #1
 800750e:	f000 80a5 	beq.w	800765c <__kernel_rem_pio2+0x30c>
 8007512:	f1ba 0f02 	cmp.w	sl, #2
 8007516:	f000 80c1 	beq.w	800769c <__kernel_rem_pio2+0x34c>
 800751a:	9b02      	ldr	r3, [sp, #8]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d14e      	bne.n	80075be <__kernel_rem_pio2+0x26e>
 8007520:	4632      	mov	r2, r6
 8007522:	463b      	mov	r3, r7
 8007524:	4958      	ldr	r1, [pc, #352]	; (8007688 <__kernel_rem_pio2+0x338>)
 8007526:	2000      	movs	r0, #0
 8007528:	f7f8 feb6 	bl	8000298 <__aeabi_dsub>
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	2d00      	cmp	r5, #0
 8007532:	d044      	beq.n	80075be <__kernel_rem_pio2+0x26e>
 8007534:	4650      	mov	r0, sl
 8007536:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007678 <__kernel_rem_pio2+0x328>
 800753a:	f000 fb91 	bl	8007c60 <scalbn>
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	ec53 2b10 	vmov	r2, r3, d0
 8007546:	f7f8 fea7 	bl	8000298 <__aeabi_dsub>
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	e036      	b.n	80075be <__kernel_rem_pio2+0x26e>
 8007550:	4b4e      	ldr	r3, [pc, #312]	; (800768c <__kernel_rem_pio2+0x33c>)
 8007552:	2200      	movs	r2, #0
 8007554:	4630      	mov	r0, r6
 8007556:	4639      	mov	r1, r7
 8007558:	f7f9 f856 	bl	8000608 <__aeabi_dmul>
 800755c:	f7f9 faee 	bl	8000b3c <__aeabi_d2iz>
 8007560:	f7f8 ffe8 	bl	8000534 <__aeabi_i2d>
 8007564:	4b4a      	ldr	r3, [pc, #296]	; (8007690 <__kernel_rem_pio2+0x340>)
 8007566:	2200      	movs	r2, #0
 8007568:	4680      	mov	r8, r0
 800756a:	4689      	mov	r9, r1
 800756c:	f7f9 f84c 	bl	8000608 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4630      	mov	r0, r6
 8007576:	4639      	mov	r1, r7
 8007578:	f7f8 fe8e 	bl	8000298 <__aeabi_dsub>
 800757c:	f7f9 fade 	bl	8000b3c <__aeabi_d2iz>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	f843 0b04 	str.w	r0, [r3], #4
 8007586:	3d01      	subs	r5, #1
 8007588:	9302      	str	r3, [sp, #8]
 800758a:	ab70      	add	r3, sp, #448	; 0x1c0
 800758c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4640      	mov	r0, r8
 8007596:	4649      	mov	r1, r9
 8007598:	f7f8 fe80 	bl	800029c <__adddf3>
 800759c:	4606      	mov	r6, r0
 800759e:	460f      	mov	r7, r1
 80075a0:	e75b      	b.n	800745a <__kernel_rem_pio2+0x10a>
 80075a2:	d105      	bne.n	80075b0 <__kernel_rem_pio2+0x260>
 80075a4:	1e63      	subs	r3, r4, #1
 80075a6:	aa0c      	add	r2, sp, #48	; 0x30
 80075a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80075ac:	15c3      	asrs	r3, r0, #23
 80075ae:	e79b      	b.n	80074e8 <__kernel_rem_pio2+0x198>
 80075b0:	4b38      	ldr	r3, [pc, #224]	; (8007694 <__kernel_rem_pio2+0x344>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	f7f9 faae 	bl	8000b14 <__aeabi_dcmpge>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d139      	bne.n	8007630 <__kernel_rem_pio2+0x2e0>
 80075bc:	9002      	str	r0, [sp, #8]
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	f000 80b4 	beq.w	8007738 <__kernel_rem_pio2+0x3e8>
 80075d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80075d4:	465b      	mov	r3, fp
 80075d6:	2200      	movs	r2, #0
 80075d8:	9904      	ldr	r1, [sp, #16]
 80075da:	428b      	cmp	r3, r1
 80075dc:	da65      	bge.n	80076aa <__kernel_rem_pio2+0x35a>
 80075de:	2a00      	cmp	r2, #0
 80075e0:	d07b      	beq.n	80076da <__kernel_rem_pio2+0x38a>
 80075e2:	ab0c      	add	r3, sp, #48	; 0x30
 80075e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80075e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 80a0 	beq.w	8007732 <__kernel_rem_pio2+0x3e2>
 80075f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007678 <__kernel_rem_pio2+0x328>
 80075f6:	4650      	mov	r0, sl
 80075f8:	f000 fb32 	bl	8007c60 <scalbn>
 80075fc:	4f23      	ldr	r7, [pc, #140]	; (800768c <__kernel_rem_pio2+0x33c>)
 80075fe:	ec55 4b10 	vmov	r4, r5, d0
 8007602:	46d8      	mov	r8, fp
 8007604:	2600      	movs	r6, #0
 8007606:	f1b8 0f00 	cmp.w	r8, #0
 800760a:	f280 80cf 	bge.w	80077ac <__kernel_rem_pio2+0x45c>
 800760e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007670 <__kernel_rem_pio2+0x320>
 8007612:	465f      	mov	r7, fp
 8007614:	f04f 0800 	mov.w	r8, #0
 8007618:	2f00      	cmp	r7, #0
 800761a:	f2c0 80fd 	blt.w	8007818 <__kernel_rem_pio2+0x4c8>
 800761e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007620:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007698 <__kernel_rem_pio2+0x348>
 8007624:	ec55 4b18 	vmov	r4, r5, d8
 8007628:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800762c:	2600      	movs	r6, #0
 800762e:	e0e5      	b.n	80077fc <__kernel_rem_pio2+0x4ac>
 8007630:	2302      	movs	r3, #2
 8007632:	9302      	str	r3, [sp, #8]
 8007634:	e75c      	b.n	80074f0 <__kernel_rem_pio2+0x1a0>
 8007636:	f8db 3000 	ldr.w	r3, [fp]
 800763a:	b955      	cbnz	r5, 8007652 <__kernel_rem_pio2+0x302>
 800763c:	b123      	cbz	r3, 8007648 <__kernel_rem_pio2+0x2f8>
 800763e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007642:	f8cb 3000 	str.w	r3, [fp]
 8007646:	2301      	movs	r3, #1
 8007648:	3201      	adds	r2, #1
 800764a:	f10b 0b04 	add.w	fp, fp, #4
 800764e:	461d      	mov	r5, r3
 8007650:	e755      	b.n	80074fe <__kernel_rem_pio2+0x1ae>
 8007652:	1acb      	subs	r3, r1, r3
 8007654:	f8cb 3000 	str.w	r3, [fp]
 8007658:	462b      	mov	r3, r5
 800765a:	e7f5      	b.n	8007648 <__kernel_rem_pio2+0x2f8>
 800765c:	1e62      	subs	r2, r4, #1
 800765e:	ab0c      	add	r3, sp, #48	; 0x30
 8007660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007664:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007668:	a90c      	add	r1, sp, #48	; 0x30
 800766a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800766e:	e754      	b.n	800751a <__kernel_rem_pio2+0x1ca>
	...
 800767c:	3ff00000 	.word	0x3ff00000
 8007680:	08008240 	.word	0x08008240
 8007684:	40200000 	.word	0x40200000
 8007688:	3ff00000 	.word	0x3ff00000
 800768c:	3e700000 	.word	0x3e700000
 8007690:	41700000 	.word	0x41700000
 8007694:	3fe00000 	.word	0x3fe00000
 8007698:	08008200 	.word	0x08008200
 800769c:	1e62      	subs	r2, r4, #1
 800769e:	ab0c      	add	r3, sp, #48	; 0x30
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80076a8:	e7de      	b.n	8007668 <__kernel_rem_pio2+0x318>
 80076aa:	a90c      	add	r1, sp, #48	; 0x30
 80076ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	430a      	orrs	r2, r1
 80076b4:	e790      	b.n	80075d8 <__kernel_rem_pio2+0x288>
 80076b6:	3301      	adds	r3, #1
 80076b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80076bc:	2900      	cmp	r1, #0
 80076be:	d0fa      	beq.n	80076b6 <__kernel_rem_pio2+0x366>
 80076c0:	9a08      	ldr	r2, [sp, #32]
 80076c2:	18e3      	adds	r3, r4, r3
 80076c4:	18a6      	adds	r6, r4, r2
 80076c6:	aa20      	add	r2, sp, #128	; 0x80
 80076c8:	1c65      	adds	r5, r4, #1
 80076ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80076ce:	9302      	str	r3, [sp, #8]
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	42ab      	cmp	r3, r5
 80076d4:	da04      	bge.n	80076e0 <__kernel_rem_pio2+0x390>
 80076d6:	461c      	mov	r4, r3
 80076d8:	e6b5      	b.n	8007446 <__kernel_rem_pio2+0xf6>
 80076da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076dc:	2301      	movs	r3, #1
 80076de:	e7eb      	b.n	80076b8 <__kernel_rem_pio2+0x368>
 80076e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076e6:	f7f8 ff25 	bl	8000534 <__aeabi_i2d>
 80076ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	46b3      	mov	fp, r6
 80076f2:	461c      	mov	r4, r3
 80076f4:	2700      	movs	r7, #0
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	f04f 0900 	mov.w	r9, #0
 80076fe:	9b06      	ldr	r3, [sp, #24]
 8007700:	429f      	cmp	r7, r3
 8007702:	dd06      	ble.n	8007712 <__kernel_rem_pio2+0x3c2>
 8007704:	ab70      	add	r3, sp, #448	; 0x1c0
 8007706:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800770a:	e9c3 8900 	strd	r8, r9, [r3]
 800770e:	3501      	adds	r5, #1
 8007710:	e7de      	b.n	80076d0 <__kernel_rem_pio2+0x380>
 8007712:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007716:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800771a:	f7f8 ff75 	bl	8000608 <__aeabi_dmul>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	f7f8 fdb9 	bl	800029c <__adddf3>
 800772a:	3701      	adds	r7, #1
 800772c:	4680      	mov	r8, r0
 800772e:	4689      	mov	r9, r1
 8007730:	e7e5      	b.n	80076fe <__kernel_rem_pio2+0x3ae>
 8007732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007736:	e754      	b.n	80075e2 <__kernel_rem_pio2+0x292>
 8007738:	ec47 6b10 	vmov	d0, r6, r7
 800773c:	f1ca 0000 	rsb	r0, sl, #0
 8007740:	f000 fa8e 	bl	8007c60 <scalbn>
 8007744:	ec57 6b10 	vmov	r6, r7, d0
 8007748:	4b9f      	ldr	r3, [pc, #636]	; (80079c8 <__kernel_rem_pio2+0x678>)
 800774a:	ee10 0a10 	vmov	r0, s0
 800774e:	2200      	movs	r2, #0
 8007750:	4639      	mov	r1, r7
 8007752:	f7f9 f9df 	bl	8000b14 <__aeabi_dcmpge>
 8007756:	b300      	cbz	r0, 800779a <__kernel_rem_pio2+0x44a>
 8007758:	4b9c      	ldr	r3, [pc, #624]	; (80079cc <__kernel_rem_pio2+0x67c>)
 800775a:	2200      	movs	r2, #0
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 ff52 	bl	8000608 <__aeabi_dmul>
 8007764:	f7f9 f9ea 	bl	8000b3c <__aeabi_d2iz>
 8007768:	4605      	mov	r5, r0
 800776a:	f7f8 fee3 	bl	8000534 <__aeabi_i2d>
 800776e:	4b96      	ldr	r3, [pc, #600]	; (80079c8 <__kernel_rem_pio2+0x678>)
 8007770:	2200      	movs	r2, #0
 8007772:	f7f8 ff49 	bl	8000608 <__aeabi_dmul>
 8007776:	460b      	mov	r3, r1
 8007778:	4602      	mov	r2, r0
 800777a:	4639      	mov	r1, r7
 800777c:	4630      	mov	r0, r6
 800777e:	f7f8 fd8b 	bl	8000298 <__aeabi_dsub>
 8007782:	f7f9 f9db 	bl	8000b3c <__aeabi_d2iz>
 8007786:	f104 0b01 	add.w	fp, r4, #1
 800778a:	ab0c      	add	r3, sp, #48	; 0x30
 800778c:	f10a 0a18 	add.w	sl, sl, #24
 8007790:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007794:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007798:	e72b      	b.n	80075f2 <__kernel_rem_pio2+0x2a2>
 800779a:	4630      	mov	r0, r6
 800779c:	4639      	mov	r1, r7
 800779e:	f7f9 f9cd 	bl	8000b3c <__aeabi_d2iz>
 80077a2:	ab0c      	add	r3, sp, #48	; 0x30
 80077a4:	46a3      	mov	fp, r4
 80077a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80077aa:	e722      	b.n	80075f2 <__kernel_rem_pio2+0x2a2>
 80077ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80077ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80077b2:	ab0c      	add	r3, sp, #48	; 0x30
 80077b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80077b8:	f7f8 febc 	bl	8000534 <__aeabi_i2d>
 80077bc:	4622      	mov	r2, r4
 80077be:	462b      	mov	r3, r5
 80077c0:	f7f8 ff22 	bl	8000608 <__aeabi_dmul>
 80077c4:	4632      	mov	r2, r6
 80077c6:	e9c9 0100 	strd	r0, r1, [r9]
 80077ca:	463b      	mov	r3, r7
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 ff1a 	bl	8000608 <__aeabi_dmul>
 80077d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80077d8:	4604      	mov	r4, r0
 80077da:	460d      	mov	r5, r1
 80077dc:	e713      	b.n	8007606 <__kernel_rem_pio2+0x2b6>
 80077de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80077e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80077e6:	f7f8 ff0f 	bl	8000608 <__aeabi_dmul>
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	4620      	mov	r0, r4
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f8 fd53 	bl	800029c <__adddf3>
 80077f6:	3601      	adds	r6, #1
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	429e      	cmp	r6, r3
 8007800:	dc01      	bgt.n	8007806 <__kernel_rem_pio2+0x4b6>
 8007802:	45b0      	cmp	r8, r6
 8007804:	daeb      	bge.n	80077de <__kernel_rem_pio2+0x48e>
 8007806:	ab48      	add	r3, sp, #288	; 0x120
 8007808:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800780c:	e9c3 4500 	strd	r4, r5, [r3]
 8007810:	3f01      	subs	r7, #1
 8007812:	f108 0801 	add.w	r8, r8, #1
 8007816:	e6ff      	b.n	8007618 <__kernel_rem_pio2+0x2c8>
 8007818:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800781a:	2b02      	cmp	r3, #2
 800781c:	dc0b      	bgt.n	8007836 <__kernel_rem_pio2+0x4e6>
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc6e      	bgt.n	8007900 <__kernel_rem_pio2+0x5b0>
 8007822:	d045      	beq.n	80078b0 <__kernel_rem_pio2+0x560>
 8007824:	9b07      	ldr	r3, [sp, #28]
 8007826:	f003 0007 	and.w	r0, r3, #7
 800782a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800782e:	ecbd 8b02 	vpop	{d8}
 8007832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007838:	2b03      	cmp	r3, #3
 800783a:	d1f3      	bne.n	8007824 <__kernel_rem_pio2+0x4d4>
 800783c:	ab48      	add	r3, sp, #288	; 0x120
 800783e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007842:	46d0      	mov	r8, sl
 8007844:	46d9      	mov	r9, fp
 8007846:	f1b9 0f00 	cmp.w	r9, #0
 800784a:	f1a8 0808 	sub.w	r8, r8, #8
 800784e:	dc64      	bgt.n	800791a <__kernel_rem_pio2+0x5ca>
 8007850:	465c      	mov	r4, fp
 8007852:	2c01      	cmp	r4, #1
 8007854:	f1aa 0a08 	sub.w	sl, sl, #8
 8007858:	dc7e      	bgt.n	8007958 <__kernel_rem_pio2+0x608>
 800785a:	2000      	movs	r0, #0
 800785c:	2100      	movs	r1, #0
 800785e:	f1bb 0f01 	cmp.w	fp, #1
 8007862:	f300 8097 	bgt.w	8007994 <__kernel_rem_pio2+0x644>
 8007866:	9b02      	ldr	r3, [sp, #8]
 8007868:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800786c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007870:	2b00      	cmp	r3, #0
 8007872:	f040 8099 	bne.w	80079a8 <__kernel_rem_pio2+0x658>
 8007876:	9b01      	ldr	r3, [sp, #4]
 8007878:	e9c3 5600 	strd	r5, r6, [r3]
 800787c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007880:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007884:	e7ce      	b.n	8007824 <__kernel_rem_pio2+0x4d4>
 8007886:	ab48      	add	r3, sp, #288	; 0x120
 8007888:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fd04 	bl	800029c <__adddf3>
 8007894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007898:	f1bb 0f00 	cmp.w	fp, #0
 800789c:	daf3      	bge.n	8007886 <__kernel_rem_pio2+0x536>
 800789e:	9b02      	ldr	r3, [sp, #8]
 80078a0:	b113      	cbz	r3, 80078a8 <__kernel_rem_pio2+0x558>
 80078a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078a6:	4619      	mov	r1, r3
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	e9c3 0100 	strd	r0, r1, [r3]
 80078ae:	e7b9      	b.n	8007824 <__kernel_rem_pio2+0x4d4>
 80078b0:	2000      	movs	r0, #0
 80078b2:	2100      	movs	r1, #0
 80078b4:	e7f0      	b.n	8007898 <__kernel_rem_pio2+0x548>
 80078b6:	ab48      	add	r3, sp, #288	; 0x120
 80078b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f7f8 fcec 	bl	800029c <__adddf3>
 80078c4:	3c01      	subs	r4, #1
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	daf5      	bge.n	80078b6 <__kernel_rem_pio2+0x566>
 80078ca:	9b02      	ldr	r3, [sp, #8]
 80078cc:	b1e3      	cbz	r3, 8007908 <__kernel_rem_pio2+0x5b8>
 80078ce:	4602      	mov	r2, r0
 80078d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078d4:	9c01      	ldr	r4, [sp, #4]
 80078d6:	e9c4 2300 	strd	r2, r3, [r4]
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80078e2:	f7f8 fcd9 	bl	8000298 <__aeabi_dsub>
 80078e6:	ad4a      	add	r5, sp, #296	; 0x128
 80078e8:	2401      	movs	r4, #1
 80078ea:	45a3      	cmp	fp, r4
 80078ec:	da0f      	bge.n	800790e <__kernel_rem_pio2+0x5be>
 80078ee:	9b02      	ldr	r3, [sp, #8]
 80078f0:	b113      	cbz	r3, 80078f8 <__kernel_rem_pio2+0x5a8>
 80078f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078f6:	4619      	mov	r1, r3
 80078f8:	9b01      	ldr	r3, [sp, #4]
 80078fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80078fe:	e791      	b.n	8007824 <__kernel_rem_pio2+0x4d4>
 8007900:	465c      	mov	r4, fp
 8007902:	2000      	movs	r0, #0
 8007904:	2100      	movs	r1, #0
 8007906:	e7de      	b.n	80078c6 <__kernel_rem_pio2+0x576>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	e7e2      	b.n	80078d4 <__kernel_rem_pio2+0x584>
 800790e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007912:	f7f8 fcc3 	bl	800029c <__adddf3>
 8007916:	3401      	adds	r4, #1
 8007918:	e7e7      	b.n	80078ea <__kernel_rem_pio2+0x59a>
 800791a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800791e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007922:	4620      	mov	r0, r4
 8007924:	4632      	mov	r2, r6
 8007926:	463b      	mov	r3, r7
 8007928:	4629      	mov	r1, r5
 800792a:	f7f8 fcb7 	bl	800029c <__adddf3>
 800792e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007932:	4602      	mov	r2, r0
 8007934:	460b      	mov	r3, r1
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f8 fcad 	bl	8000298 <__aeabi_dsub>
 800793e:	4632      	mov	r2, r6
 8007940:	463b      	mov	r3, r7
 8007942:	f7f8 fcab 	bl	800029c <__adddf3>
 8007946:	ed9d 7b04 	vldr	d7, [sp, #16]
 800794a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800794e:	ed88 7b00 	vstr	d7, [r8]
 8007952:	f109 39ff 	add.w	r9, r9, #4294967295
 8007956:	e776      	b.n	8007846 <__kernel_rem_pio2+0x4f6>
 8007958:	e9da 8900 	ldrd	r8, r9, [sl]
 800795c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007960:	4640      	mov	r0, r8
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4649      	mov	r1, r9
 8007968:	f7f8 fc98 	bl	800029c <__adddf3>
 800796c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4640      	mov	r0, r8
 8007976:	4649      	mov	r1, r9
 8007978:	f7f8 fc8e 	bl	8000298 <__aeabi_dsub>
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	f7f8 fc8c 	bl	800029c <__adddf3>
 8007984:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007988:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800798c:	ed8a 7b00 	vstr	d7, [sl]
 8007990:	3c01      	subs	r4, #1
 8007992:	e75e      	b.n	8007852 <__kernel_rem_pio2+0x502>
 8007994:	ab48      	add	r3, sp, #288	; 0x120
 8007996:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	f7f8 fc7d 	bl	800029c <__adddf3>
 80079a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80079a6:	e75a      	b.n	800785e <__kernel_rem_pio2+0x50e>
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	9a01      	ldr	r2, [sp, #4]
 80079ac:	601d      	str	r5, [r3, #0]
 80079ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80079b2:	605c      	str	r4, [r3, #4]
 80079b4:	609f      	str	r7, [r3, #8]
 80079b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80079ba:	60d3      	str	r3, [r2, #12]
 80079bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079c0:	6110      	str	r0, [r2, #16]
 80079c2:	6153      	str	r3, [r2, #20]
 80079c4:	e72e      	b.n	8007824 <__kernel_rem_pio2+0x4d4>
 80079c6:	bf00      	nop
 80079c8:	41700000 	.word	0x41700000
 80079cc:	3e700000 	.word	0x3e700000

080079d0 <__kernel_sin>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	ed2d 8b04 	vpush	{d8-d9}
 80079d8:	eeb0 8a41 	vmov.f32	s16, s2
 80079dc:	eef0 8a61 	vmov.f32	s17, s3
 80079e0:	ec55 4b10 	vmov	r4, r5, d0
 80079e4:	b083      	sub	sp, #12
 80079e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80079ee:	9001      	str	r0, [sp, #4]
 80079f0:	da06      	bge.n	8007a00 <__kernel_sin+0x30>
 80079f2:	ee10 0a10 	vmov	r0, s0
 80079f6:	4629      	mov	r1, r5
 80079f8:	f7f9 f8a0 	bl	8000b3c <__aeabi_d2iz>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d051      	beq.n	8007aa4 <__kernel_sin+0xd4>
 8007a00:	4622      	mov	r2, r4
 8007a02:	462b      	mov	r3, r5
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	f7f8 fdfe 	bl	8000608 <__aeabi_dmul>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4620      	mov	r0, r4
 8007a16:	4629      	mov	r1, r5
 8007a18:	f7f8 fdf6 	bl	8000608 <__aeabi_dmul>
 8007a1c:	a341      	add	r3, pc, #260	; (adr r3, 8007b24 <__kernel_sin+0x154>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	4680      	mov	r8, r0
 8007a24:	4689      	mov	r9, r1
 8007a26:	4650      	mov	r0, sl
 8007a28:	4659      	mov	r1, fp
 8007a2a:	f7f8 fded 	bl	8000608 <__aeabi_dmul>
 8007a2e:	a33f      	add	r3, pc, #252	; (adr r3, 8007b2c <__kernel_sin+0x15c>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f7f8 fc30 	bl	8000298 <__aeabi_dsub>
 8007a38:	4652      	mov	r2, sl
 8007a3a:	465b      	mov	r3, fp
 8007a3c:	f7f8 fde4 	bl	8000608 <__aeabi_dmul>
 8007a40:	a33c      	add	r3, pc, #240	; (adr r3, 8007b34 <__kernel_sin+0x164>)
 8007a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a46:	f7f8 fc29 	bl	800029c <__adddf3>
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	465b      	mov	r3, fp
 8007a4e:	f7f8 fddb 	bl	8000608 <__aeabi_dmul>
 8007a52:	a33a      	add	r3, pc, #232	; (adr r3, 8007b3c <__kernel_sin+0x16c>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fc1e 	bl	8000298 <__aeabi_dsub>
 8007a5c:	4652      	mov	r2, sl
 8007a5e:	465b      	mov	r3, fp
 8007a60:	f7f8 fdd2 	bl	8000608 <__aeabi_dmul>
 8007a64:	a337      	add	r3, pc, #220	; (adr r3, 8007b44 <__kernel_sin+0x174>)
 8007a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6a:	f7f8 fc17 	bl	800029c <__adddf3>
 8007a6e:	9b01      	ldr	r3, [sp, #4]
 8007a70:	4606      	mov	r6, r0
 8007a72:	460f      	mov	r7, r1
 8007a74:	b9eb      	cbnz	r3, 8007ab2 <__kernel_sin+0xe2>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	4659      	mov	r1, fp
 8007a7e:	f7f8 fdc3 	bl	8000608 <__aeabi_dmul>
 8007a82:	a325      	add	r3, pc, #148	; (adr r3, 8007b18 <__kernel_sin+0x148>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fc06 	bl	8000298 <__aeabi_dsub>
 8007a8c:	4642      	mov	r2, r8
 8007a8e:	464b      	mov	r3, r9
 8007a90:	f7f8 fdba 	bl	8000608 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fbfe 	bl	800029c <__adddf3>
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	460d      	mov	r5, r1
 8007aa4:	ec45 4b10 	vmov	d0, r4, r5
 8007aa8:	b003      	add	sp, #12
 8007aaa:	ecbd 8b04 	vpop	{d8-d9}
 8007aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab2:	4b1b      	ldr	r3, [pc, #108]	; (8007b20 <__kernel_sin+0x150>)
 8007ab4:	ec51 0b18 	vmov	r0, r1, d8
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fda5 	bl	8000608 <__aeabi_dmul>
 8007abe:	4632      	mov	r2, r6
 8007ac0:	ec41 0b19 	vmov	d9, r0, r1
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	4649      	mov	r1, r9
 8007aca:	f7f8 fd9d 	bl	8000608 <__aeabi_dmul>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	ec51 0b19 	vmov	r0, r1, d9
 8007ad6:	f7f8 fbdf 	bl	8000298 <__aeabi_dsub>
 8007ada:	4652      	mov	r2, sl
 8007adc:	465b      	mov	r3, fp
 8007ade:	f7f8 fd93 	bl	8000608 <__aeabi_dmul>
 8007ae2:	ec53 2b18 	vmov	r2, r3, d8
 8007ae6:	f7f8 fbd7 	bl	8000298 <__aeabi_dsub>
 8007aea:	a30b      	add	r3, pc, #44	; (adr r3, 8007b18 <__kernel_sin+0x148>)
 8007aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af0:	4606      	mov	r6, r0
 8007af2:	460f      	mov	r7, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fd86 	bl	8000608 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 fbca 	bl	800029c <__adddf3>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fbc2 	bl	8000298 <__aeabi_dsub>
 8007b14:	e7c4      	b.n	8007aa0 <__kernel_sin+0xd0>
 8007b16:	bf00      	nop
 8007b18:	55555549 	.word	0x55555549
 8007b1c:	3fc55555 	.word	0x3fc55555
 8007b20:	3fe00000 	.word	0x3fe00000
 8007b24:	5acfd57c 	.word	0x5acfd57c
 8007b28:	3de5d93a 	.word	0x3de5d93a
 8007b2c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007b30:	3e5ae5e6 	.word	0x3e5ae5e6
 8007b34:	57b1fe7d 	.word	0x57b1fe7d
 8007b38:	3ec71de3 	.word	0x3ec71de3
 8007b3c:	19c161d5 	.word	0x19c161d5
 8007b40:	3f2a01a0 	.word	0x3f2a01a0
 8007b44:	1110f8a6 	.word	0x1110f8a6
 8007b48:	3f811111 	.word	0x3f811111

08007b4c <fabs>:
 8007b4c:	ec51 0b10 	vmov	r0, r1, d0
 8007b50:	ee10 2a10 	vmov	r2, s0
 8007b54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b58:	ec43 2b10 	vmov	d0, r2, r3
 8007b5c:	4770      	bx	lr
	...

08007b60 <floor>:
 8007b60:	ec51 0b10 	vmov	r0, r1, d0
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007b6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007b70:	2e13      	cmp	r6, #19
 8007b72:	ee10 5a10 	vmov	r5, s0
 8007b76:	ee10 8a10 	vmov	r8, s0
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	dc32      	bgt.n	8007be4 <floor+0x84>
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	da14      	bge.n	8007bac <floor+0x4c>
 8007b82:	a333      	add	r3, pc, #204	; (adr r3, 8007c50 <floor+0xf0>)
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	f7f8 fb88 	bl	800029c <__adddf3>
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f7f8 ffca 	bl	8000b28 <__aeabi_dcmpgt>
 8007b94:	b138      	cbz	r0, 8007ba6 <floor+0x46>
 8007b96:	2c00      	cmp	r4, #0
 8007b98:	da57      	bge.n	8007c4a <floor+0xea>
 8007b9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007b9e:	431d      	orrs	r5, r3
 8007ba0:	d001      	beq.n	8007ba6 <floor+0x46>
 8007ba2:	4c2d      	ldr	r4, [pc, #180]	; (8007c58 <floor+0xf8>)
 8007ba4:	2500      	movs	r5, #0
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e025      	b.n	8007bf8 <floor+0x98>
 8007bac:	4f2b      	ldr	r7, [pc, #172]	; (8007c5c <floor+0xfc>)
 8007bae:	4137      	asrs	r7, r6
 8007bb0:	ea01 0307 	and.w	r3, r1, r7
 8007bb4:	4303      	orrs	r3, r0
 8007bb6:	d01f      	beq.n	8007bf8 <floor+0x98>
 8007bb8:	a325      	add	r3, pc, #148	; (adr r3, 8007c50 <floor+0xf0>)
 8007bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbe:	f7f8 fb6d 	bl	800029c <__adddf3>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f7f8 ffaf 	bl	8000b28 <__aeabi_dcmpgt>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d0eb      	beq.n	8007ba6 <floor+0x46>
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	bfbe      	ittt	lt
 8007bd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007bd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8007bda:	19a4      	addlt	r4, r4, r6
 8007bdc:	ea24 0407 	bic.w	r4, r4, r7
 8007be0:	2500      	movs	r5, #0
 8007be2:	e7e0      	b.n	8007ba6 <floor+0x46>
 8007be4:	2e33      	cmp	r6, #51	; 0x33
 8007be6:	dd0b      	ble.n	8007c00 <floor+0xa0>
 8007be8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007bec:	d104      	bne.n	8007bf8 <floor+0x98>
 8007bee:	ee10 2a10 	vmov	r2, s0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	f7f8 fb52 	bl	800029c <__adddf3>
 8007bf8:	ec41 0b10 	vmov	d0, r0, r1
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295
 8007c08:	fa23 f707 	lsr.w	r7, r3, r7
 8007c0c:	4207      	tst	r7, r0
 8007c0e:	d0f3      	beq.n	8007bf8 <floor+0x98>
 8007c10:	a30f      	add	r3, pc, #60	; (adr r3, 8007c50 <floor+0xf0>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fb41 	bl	800029c <__adddf3>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f7f8 ff83 	bl	8000b28 <__aeabi_dcmpgt>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0bf      	beq.n	8007ba6 <floor+0x46>
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	da02      	bge.n	8007c30 <floor+0xd0>
 8007c2a:	2e14      	cmp	r6, #20
 8007c2c:	d103      	bne.n	8007c36 <floor+0xd6>
 8007c2e:	3401      	adds	r4, #1
 8007c30:	ea25 0507 	bic.w	r5, r5, r7
 8007c34:	e7b7      	b.n	8007ba6 <floor+0x46>
 8007c36:	2301      	movs	r3, #1
 8007c38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007c3c:	fa03 f606 	lsl.w	r6, r3, r6
 8007c40:	4435      	add	r5, r6
 8007c42:	4545      	cmp	r5, r8
 8007c44:	bf38      	it	cc
 8007c46:	18e4      	addcc	r4, r4, r3
 8007c48:	e7f2      	b.n	8007c30 <floor+0xd0>
 8007c4a:	2500      	movs	r5, #0
 8007c4c:	462c      	mov	r4, r5
 8007c4e:	e7aa      	b.n	8007ba6 <floor+0x46>
 8007c50:	8800759c 	.word	0x8800759c
 8007c54:	7e37e43c 	.word	0x7e37e43c
 8007c58:	bff00000 	.word	0xbff00000
 8007c5c:	000fffff 	.word	0x000fffff

08007c60 <scalbn>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	ec55 4b10 	vmov	r4, r5, d0
 8007c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c6a:	4606      	mov	r6, r0
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	b99a      	cbnz	r2, 8007c98 <scalbn+0x38>
 8007c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007c74:	4323      	orrs	r3, r4
 8007c76:	d036      	beq.n	8007ce6 <scalbn+0x86>
 8007c78:	4b39      	ldr	r3, [pc, #228]	; (8007d60 <scalbn+0x100>)
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	ee10 0a10 	vmov	r0, s0
 8007c80:	2200      	movs	r2, #0
 8007c82:	f7f8 fcc1 	bl	8000608 <__aeabi_dmul>
 8007c86:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <scalbn+0x104>)
 8007c88:	429e      	cmp	r6, r3
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	460d      	mov	r5, r1
 8007c8e:	da10      	bge.n	8007cb2 <scalbn+0x52>
 8007c90:	a32b      	add	r3, pc, #172	; (adr r3, 8007d40 <scalbn+0xe0>)
 8007c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c96:	e03a      	b.n	8007d0e <scalbn+0xae>
 8007c98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007c9c:	428a      	cmp	r2, r1
 8007c9e:	d10c      	bne.n	8007cba <scalbn+0x5a>
 8007ca0:	ee10 2a10 	vmov	r2, s0
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	f7f8 faf8 	bl	800029c <__adddf3>
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	e019      	b.n	8007ce6 <scalbn+0x86>
 8007cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	3a36      	subs	r2, #54	; 0x36
 8007cba:	4432      	add	r2, r6
 8007cbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007cc0:	428a      	cmp	r2, r1
 8007cc2:	dd08      	ble.n	8007cd6 <scalbn+0x76>
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	a120      	add	r1, pc, #128	; (adr r1, 8007d48 <scalbn+0xe8>)
 8007cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ccc:	da1c      	bge.n	8007d08 <scalbn+0xa8>
 8007cce:	a120      	add	r1, pc, #128	; (adr r1, 8007d50 <scalbn+0xf0>)
 8007cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd4:	e018      	b.n	8007d08 <scalbn+0xa8>
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	dd08      	ble.n	8007cec <scalbn+0x8c>
 8007cda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ce6:	ec45 4b10 	vmov	d0, r4, r5
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007cf0:	da19      	bge.n	8007d26 <scalbn+0xc6>
 8007cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cf6:	429e      	cmp	r6, r3
 8007cf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007cfc:	dd0a      	ble.n	8007d14 <scalbn+0xb4>
 8007cfe:	a112      	add	r1, pc, #72	; (adr r1, 8007d48 <scalbn+0xe8>)
 8007d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e2      	bne.n	8007cce <scalbn+0x6e>
 8007d08:	a30f      	add	r3, pc, #60	; (adr r3, 8007d48 <scalbn+0xe8>)
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	e7cb      	b.n	8007cac <scalbn+0x4c>
 8007d14:	a10a      	add	r1, pc, #40	; (adr r1, 8007d40 <scalbn+0xe0>)
 8007d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0b8      	beq.n	8007c90 <scalbn+0x30>
 8007d1e:	a10e      	add	r1, pc, #56	; (adr r1, 8007d58 <scalbn+0xf8>)
 8007d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d24:	e7b4      	b.n	8007c90 <scalbn+0x30>
 8007d26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d2a:	3236      	adds	r2, #54	; 0x36
 8007d2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d34:	4620      	mov	r0, r4
 8007d36:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <scalbn+0x108>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	e7e8      	b.n	8007d0e <scalbn+0xae>
 8007d3c:	f3af 8000 	nop.w
 8007d40:	c2f8f359 	.word	0xc2f8f359
 8007d44:	01a56e1f 	.word	0x01a56e1f
 8007d48:	8800759c 	.word	0x8800759c
 8007d4c:	7e37e43c 	.word	0x7e37e43c
 8007d50:	8800759c 	.word	0x8800759c
 8007d54:	fe37e43c 	.word	0xfe37e43c
 8007d58:	c2f8f359 	.word	0xc2f8f359
 8007d5c:	81a56e1f 	.word	0x81a56e1f
 8007d60:	43500000 	.word	0x43500000
 8007d64:	ffff3cb0 	.word	0xffff3cb0
 8007d68:	3c900000 	.word	0x3c900000

08007d6c <_init>:
 8007d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6e:	bf00      	nop
 8007d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d72:	bc08      	pop	{r3}
 8007d74:	469e      	mov	lr, r3
 8007d76:	4770      	bx	lr

08007d78 <_fini>:
 8007d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7a:	bf00      	nop
 8007d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7e:	bc08      	pop	{r3}
 8007d80:	469e      	mov	lr, r3
 8007d82:	4770      	bx	lr
